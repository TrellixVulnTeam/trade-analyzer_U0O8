{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/benjaminshiao/Desktop/react/trade-analyzer/src/components/Balance.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport * as d3 from \"d3\";\nimport \"../chart.css\";\nimport Chart from \"../components/chart-components/Chart\";\nimport { GlobalContext } from '../context/GlobalState';\nexport const Balance = () => {\n  _s();\n\n  const {\n    transactions\n  } = useContext(GlobalContext);\n  const amounts = transactions.map(transaction => transaction.amount);\n  const total = amounts.reduce((acc, item) => acc += item, 0).toFixed(2); //temp graph d3 example--------------------------\n\n  const chart_width = window.screen.availWidth * 2 / 3;\n  const chart_height = window.screen.availHeight * 2 / 3;\n\n  const randomOne = (weight = 1) => {\n    return (Math.random() + Math.random() - 1) * weight;\n  };\n\n  const generateData = () => {\n    //i should make this code do the api call and convert it...-12/29/20\n    const length = 185; //Math.round(Math.random() * 90) + 10;\n    // initial values\n\n    const seed_close = Math.random() * 150 + 50;\n    let previous_close = seed_close;\n    let previous_volume = Math.random() * 300 + 10;\n    let trend = Math.floor(Math.random() * 2) * 2 - 1; // calculate each bar\n\n    return d3.range(length).map((item, i) => {\n      const open = previous_close * (1 + randomOne(0.1));\n      const close = open * (1 + randomOne(0.2) * trend);\n      const high = Math.max(open, close) * (1 + randomOne(0.1));\n      const low = Math.min(open, close) * (1 - randomOne(0.1));\n      const volume = previous_volume * (1 + randomOne(0.5));\n      previous_close = close;\n      trend = Math.floor(Math.random() * 2) * 2 - 1;\n      return {\n        time: i,\n        open,\n        high,\n        low,\n        close,\n        volume\n      };\n    });\n  };\n\n  const data_temp = generateData();\n  console.log(data_temp[0]);\n  const [data] = useState(data_temp); //candlestick tutorial end-----\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Your Balance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      data: data,\n      width: chart_width,\n      height: chart_height\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"$\", total]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Balance, \"v5M0f22erqvGV36lT4S6//k10Mw=\");\n\n_c = Balance;\n\nvar _c;\n\n$RefreshReg$(_c, \"Balance\");","map":{"version":3,"sources":["/Users/benjaminshiao/Desktop/react/trade-analyzer/src/components/Balance.js"],"names":["React","useContext","useState","d3","Chart","GlobalContext","Balance","transactions","amounts","map","transaction","amount","total","reduce","acc","item","toFixed","chart_width","window","screen","availWidth","chart_height","availHeight","randomOne","weight","Math","random","generateData","length","seed_close","previous_close","previous_volume","trend","floor","range","i","open","close","high","max","low","min","volume","time","data_temp","console","log","data"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\nimport * as d3 from \"d3\";\n\nimport \"../chart.css\";\n\nimport Chart from \"../components/chart-components/Chart\";\n\nimport { GlobalContext } from '../context/GlobalState';\n\nexport const Balance = () => {\n  const { transactions } = useContext(GlobalContext);\n\n  const amounts = transactions.map(transaction => transaction.amount);\n\n  const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\n\n  //temp graph d3 example--------------------------\n  const chart_width = window.screen.availWidth*2/3;\n  const chart_height = window.screen.availHeight*2/3;\n\n  const randomOne = (weight = 1) => {\n    return (Math.random() + Math.random() - 1) * weight;\n  };\n\n  const generateData = () => {//i should make this code do the api call and convert it...-12/29/20\n    const length = 185;//Math.round(Math.random() * 90) + 10;\n\n    // initial values\n    const seed_close = Math.random() * 150 + 50;\n    let previous_close = seed_close;\n    let previous_volume = Math.random() * 300 + 10;\n    let trend = Math.floor(Math.random() * 2) * 2 - 1;\n\n    // calculate each bar\n    return d3.range(length).map((item, i) => {\n      const open = previous_close * (1 + randomOne(0.1));\n      const close = open * (1 + randomOne(0.2) * trend);\n      const high = Math.max(open, close) * (1 + randomOne(0.1));\n      const low = Math.min(open, close) * (1 - randomOne(0.1));\n      const volume = previous_volume * (1 + randomOne(0.5));\n\n      previous_close = close;\n      trend = Math.floor(Math.random() * 2) * 2 - 1;\n\n      return {\n        time: i,\n        open,\n        high,\n        low,\n        close,\n        volume\n      };\n    });\n  };\n  const data_temp = generateData();\n  console.log(data_temp[0]);\n  const [data] = useState(data_temp);\n\n\n  //candlestick tutorial end-----\n\n\n  return (\n    <>\n      <h4>Your Balance</h4>\n\n      <Chart data={data} width={chart_width} height={chart_height} />\n      <h1>${total}</h1>\n    </>\n  )\n}\n\n\n"]},"metadata":{},"sourceType":"module"}