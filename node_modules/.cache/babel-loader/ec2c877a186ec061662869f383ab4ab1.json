{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/benjaminshiao/Desktop/react/trade-analyzer/src/components/GraphSection.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport Chart from \"./chart-components/Chart\";\nimport styled from \"styled-components\";\nimport { GlobalContext } from '../context/GlobalState';\nimport \"../chart.css\";\nconst CSS = styled.div`\n  background: linear-gradient(-45deg, #DCDCDC, #FFFF00, #F5FFFA, #FFDAB9);\n  background-size: 400% 400%;\n  animation: gradient 60s ease infinite;\n  \n  @keyframes gradient {\n    0% {\n      background-position: 0% 50%;\n    }\n    50% {\n      background-position: 100% 50%;\n    }\n    100% {\n      background-position: 0% 50%;\n    }\n  }\n`; //me Day. Week. Month.\n//it Day. Day Week. 7, 20\n\n_c = CSS;\nexport const GraphSection = () => {\n  _s();\n\n  //grab global variables/functions to call in this file\n  const {\n    graphData_AV_API,\n    graphSymbol,\n    current_symbol,\n    graph_type\n  } = useContext(GlobalContext);\n  const chart_width = window.screen.availWidth;\n  const chart_height = window.screen.availHeight * 2 / 3; // Processes update to API call and sends data to candlestick chart.\n\n  const processGraphData = () => {\n    let time_series_type;\n\n    if (graphData_AV_API['Time Series (15min)']) {\n      time_series_type = 'Time Series (15min)';\n    } else if (graphData_AV_API['Time Series (60min)']) {\n      time_series_type = 'Time Series (60min)';\n    } else {\n      //if(graphData_AV_API['Time Series (Daily)']){\n      time_series_type = 'Time Series (Daily)';\n    }\n\n    const time_series_isDaily = time_series_type === 'Time Series (Daily)' ? true : false;\n    let split_ratio = 1.0; //this arrays are sus\n\n    let graphDataProcessed = [];\n    let i = 0;\n    let date_counter = 0;\n    let previous_date = '';\n    let stop_graphing = false; // Iterate/translate API call to fit my charts inputs\n\n    for (let myDate in graphData_AV_API[time_series_type]) {\n      // Counts unique dates, stops graphing according to graph_Type\n      if (!(previous_date === myDate.substr(0, 10))) {\n        previous_date = myDate.substr(0, 10);\n        date_counter++;\n\n        switch (graph_type) {\n          case 'day':\n            if (date_counter > 1) stop_graphing = true;\n            break;\n\n          case 'week':\n            if (date_counter > 5) stop_graphing = true;\n            break;\n\n          case 'month':\n            if (date_counter > 20) stop_graphing = true;\n            break;\n\n          case 'quarter':\n            if (date_counter > 60) stop_graphing = true;\n            break;\n\n          case 'year':\n            if (date_counter > 253) stop_graphing = true;\n            break;\n\n          default:\n        }\n\n        if (stop_graphing) break;\n      } // Some API data open==close==high==low, resulting in candles of size 0x0, resulting in empty graph. \n      // flat_candle ensures candles are never 0x0 (invisible).\n\n\n      let flat_candle = +graphData_AV_API[time_series_type][myDate]['1. open'] === +graphData_AV_API[time_series_type][myDate]['4. close'] ? 0.001 : 0;\n      graphDataProcessed.push({\n        \"time\": i++,\n        \"xAxis\": myDate,\n        \"open\": (+graphData_AV_API[time_series_type][myDate]['1. open'] / split_ratio).toFixed(2),\n        \"close\": (flat_candle + graphData_AV_API[time_series_type][myDate]['4. close'] / split_ratio).toFixed(2),\n        \"high\": (+graphData_AV_API[time_series_type][myDate]['2. high'] / split_ratio).toFixed(2),\n        \"low\": (+graphData_AV_API[time_series_type][myDate]['3. low'] / split_ratio).toFixed(2),\n        \"volume\": +graphData_AV_API[time_series_type][myDate][time_series_isDaily ? '6. volume' : '5. volume']\n      });\n      if (time_series_isDaily) split_ratio *= +graphData_AV_API[time_series_type][myDate]['8. split coefficient'];\n    }\n\n    graphDataProcessed.reverse();\n    return graphDataProcessed;\n  }; // Only for intialization: maybe make it display SPY as default\n\n\n  const [data, setData] = useState(() => processGraphData()); // Whenever graphData_AV_API is changed, code below will update graph\n\n  useEffect(() => {\n    if (current_symbol.length > 0) setData(processGraphData());\n  }, [graph_type, current_symbol]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (current_symbol.length > 0) {\n    return /*#__PURE__*/_jsxDEV(CSS, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"d-flex justify-content-center\",\n        children: current_symbol\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-center\",\n        children: /*#__PURE__*/_jsxDEV(Chart, {\n          data: data,\n          width: chart_width,\n          height: chart_height\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card mb-1 center\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => graphSymbol(current_symbol, 'day', false),\n          className: \"text-info bg-dark\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-warning\",\n            children: \"1D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => graphSymbol(current_symbol, 'week', false),\n          className: \"text-info bg-dark\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-warning\",\n            children: \"1W\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => graphSymbol(current_symbol, 'month', false),\n          className: \"text-info bg-dark\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-warning\",\n            children: \"1M\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => graphSymbol(current_symbol, 'quarter', false),\n          className: \"text-info bg-dark\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-warning\",\n            children: \"3M\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => graphSymbol(current_symbol, 'year', false),\n          className: \"text-info bg-dark\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-warning\",\n            children: \"1Y\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n};\n\n_s(GraphSection, \"FTUEDsOT7hjTCh1yJUk8iWj0/Sc=\");\n\n_c2 = GraphSection;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CSS\");\n$RefreshReg$(_c2, \"GraphSection\");","map":{"version":3,"sources":["/Users/benjaminshiao/Desktop/react/trade-analyzer/src/components/GraphSection.js"],"names":["React","useContext","useEffect","useState","Chart","styled","GlobalContext","CSS","div","GraphSection","graphData_AV_API","graphSymbol","current_symbol","graph_type","chart_width","window","screen","availWidth","chart_height","availHeight","processGraphData","time_series_type","time_series_isDaily","split_ratio","graphDataProcessed","i","date_counter","previous_date","stop_graphing","myDate","substr","flat_candle","push","toFixed","reverse","data","setData","length"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport Chart from \"./chart-components/Chart\";\nimport styled from \"styled-components\";\n\nimport { GlobalContext } from '../context/GlobalState';\nimport \"../chart.css\";\n\nconst CSS = styled.div`\n  background: linear-gradient(-45deg, #DCDCDC, #FFFF00, #F5FFFA, #FFDAB9);\n  background-size: 400% 400%;\n  animation: gradient 60s ease infinite;\n  \n  @keyframes gradient {\n    0% {\n      background-position: 0% 50%;\n    }\n    50% {\n      background-position: 100% 50%;\n    }\n    100% {\n      background-position: 0% 50%;\n    }\n  }\n`;\n//me Day. Week. Month.\n//it Day. Day Week. 7, 20\n\nexport const GraphSection = () => {\n  //grab global variables/functions to call in this file\n  const { graphData_AV_API, graphSymbol, current_symbol, graph_type } = useContext(GlobalContext);\n\n  const chart_width = window.screen.availWidth;\n  const chart_height = window.screen.availHeight*2/3;\n\n  // Processes update to API call and sends data to candlestick chart.\n  const processGraphData = () => {\n    let time_series_type;\n    if(graphData_AV_API['Time Series (15min)']){\n      time_series_type = 'Time Series (15min)';\n    }else if(graphData_AV_API['Time Series (60min)']){\n      time_series_type = 'Time Series (60min)';\n    }else{//if(graphData_AV_API['Time Series (Daily)']){\n      time_series_type = 'Time Series (Daily)';\n    }\n    const time_series_isDaily = time_series_type === 'Time Series (Daily)' ? true : false;\n    let split_ratio = 1.0;\n\n    //this arrays are sus\n    let graphDataProcessed = [];\n    let i = 0\n\n    let date_counter = 0;\n    let previous_date = '';\n    let stop_graphing = false;\n    // Iterate/translate API call to fit my charts inputs\n    for(let myDate in graphData_AV_API[time_series_type]){\n      // Counts unique dates, stops graphing according to graph_Type\n      if( !(previous_date===myDate.substr(0,10)) ){\n        previous_date = myDate.substr(0,10);\n        date_counter++;\n        \n        switch(graph_type){\n            case 'day':\n                if(date_counter>1) stop_graphing = true;\n                break;\n            case 'week':\n                if(date_counter>5) stop_graphing = true;\n                break;\n            case 'month':\n                if(date_counter>20) stop_graphing = true;\n                break;\n            case 'quarter':\n                if(date_counter>60) stop_graphing = true;\n                break;\n            case 'year':\n                if(date_counter>253) stop_graphing = true;\n                break;\n            default:\n        }\n        if(stop_graphing) break;\n      }\n\n      // Some API data open==close==high==low, resulting in candles of size 0x0, resulting in empty graph. \n      // flat_candle ensures candles are never 0x0 (invisible).\n      let flat_candle = +graphData_AV_API[time_series_type][myDate]['1. open']=== +graphData_AV_API[time_series_type][myDate]['4. close'] ? 0.001 : 0;\n      \n      graphDataProcessed.push({\n        \"time\": i++,\n        \"xAxis\": myDate,\n        \"open\": (+graphData_AV_API[time_series_type][myDate]['1. open']/split_ratio).toFixed(2),\n        \"close\": (flat_candle+graphData_AV_API[time_series_type][myDate]['4. close']/split_ratio).toFixed(2),\n        \"high\": (+graphData_AV_API[time_series_type][myDate]['2. high']/split_ratio).toFixed(2),\n        \"low\": (+graphData_AV_API[time_series_type][myDate]['3. low']/split_ratio).toFixed(2),\n        \"volume\": +graphData_AV_API[time_series_type][myDate][time_series_isDaily ? '6. volume' : '5. volume']\n      });\n      if(time_series_isDaily) split_ratio *= +graphData_AV_API[time_series_type][myDate]['8. split coefficient'];\n    }\n    graphDataProcessed.reverse();\n    return graphDataProcessed;\n  };\n\n  // Only for intialization: maybe make it display SPY as default\n  const [data, setData] = useState(() => processGraphData());\n  // Whenever graphData_AV_API is changed, code below will update graph\n  useEffect(() => {\n    if(current_symbol.length>0) setData(processGraphData());\n  }, [graph_type, current_symbol]); // eslint-disable-line react-hooks/exhaustive-deps\n\n\n  if(current_symbol.length>0){\n    return (\n      <CSS>\n        <h1 className='d-flex justify-content-center'>{current_symbol}</h1>\n        <div className='d-flex justify-content-center'>\n          <Chart data={data} width={chart_width} height={chart_height} />\n        </div>\n        <div className='card mb-1 center'>\n          <button onClick={() => graphSymbol(current_symbol,'day', false)} className=\"text-info bg-dark\">\n            <p className='text-warning'>1D</p>\n          </button>\n          <button onClick={() => graphSymbol(current_symbol,'week', false)} className=\"text-info bg-dark\">\n            <p className='text-warning'>1W</p>\n          </button>\n          <button onClick={() => graphSymbol(current_symbol,'month', false)} className=\"text-info bg-dark\">\n            <p className='text-warning'>1M</p>\n          </button>\n          <button onClick={() => graphSymbol(current_symbol,'quarter', false)} className=\"text-info bg-dark\">\n            <p className='text-warning'>3M</p>\n          </button>\n          <button onClick={() => graphSymbol(current_symbol,'year', false)} className=\"text-info bg-dark\">\n            <p className='text-warning'>1Y</p>\n          </button>\n      </div>\n      </CSS>\n    )\n  }else{\n    return (\n      <>\n      </>\n    )\n  }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}