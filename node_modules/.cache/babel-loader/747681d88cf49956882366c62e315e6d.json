{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/benjaminshiao/Desktop/react/trade-analyzer/src/components/Backtest.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport styled from \"styled-components\";\nimport TradeList from './TradeList';\nimport { GlobalContext } from '../context/GlobalState'; //import { pairs } from 'd3';\n\nconst CSS = styled.div`\n  background: #3d3d4a;\n  color: #898996;\n  display:flex;\n\n  padding: 1%;\n  margin: 0% 0% 1% 0%;\n\n  .settings{\n    padding: 1%;\n    width: 25%;\n    box-shadow: rgba(0, 0, 0, 0.25) 0px 0.0625em 0.0625em, rgba(0, 0, 0, 0.25) 0px 0.125em 0.5em, rgba(255, 255, 255, 0.1) 0px 0px 0px 1px inset;\n  }\n  .results-overview{\n    padding: 0% 1%;\n    width: 15%;\n\n  }\n  .list-of-trades{\n    padding: 0% 1%;\n    width: 60%;\n\n  }\n\n\n  /* Input */\n  .input-flex{\n    display:flex;\n    border: none;\n    border-bottom: 2px solid #6464a3;\n    background: transparent;//#eff1f2;\n    color: #898996;\n    width: 75%;\n    height: 2rem;\n    font-size: 1.3625rem;\n    padding-left: 0.5rem;\n    padding-top: 0.325rem;\n    padding-bottom: 0.325rem;\n    margin-bottom: 0.425rem;\n    \n    &:focus, &:hover{\n      outline: none;\n      color: #373641;\n      background: #dedfe4;\n    }\n    ::placeholder{\n      color: #898996;\n    }\n  }\n\n  .input-inline{\n    display:inline;\n    border: none;\n    border-bottom: 2px solid #6464a3;\n    background: transparent;//#eff1f2;\n    color: #898996;\n    width:10%;\n    height: 2rem;\n    font-size: 1.3625rem;\n    padding-left: 0.5rem;\n    padding-top: 0.325rem;\n    padding-bottom: 0.325rem;\n    margin-bottom: 0.425rem;\n    \n    &:focus, &:hover{\n      outline: none;\n      color: #373641;\n      background: #dedfe4;\n    }\n    ::placeholder{\n      color: #898996;\n    }\n  }\n\n  .input-label{\n    color: #898996;\n    font-size: 1.3625rem;\n  }\n\n  .input-label-sub{\n    color: #898996;\n    font-style: italic;\n    padding-left: 5%;\n    margin-bottom: 2%;\n  }\n\n  .input-select {\n    display:flex;\n    width: 75%;\n    color: #898996;\n    border: none;\n    border-bottom: 2px solid #6464a3;\n    background: transparent;\n    height: 2rem;\n    font-size: 1.3625rem;\n    padding-left: 0.5rem;\n    margin-bottom: 0.425rem;\n\n    &:focus, &:hover{\n      outline: none;\n      color: #373641;\n      background: #dedfe4;\n    }\n  }\n\n  h4{\n    font-size: 210%;\n    border-bottom: 6px solid #898996;\n  }\n\n\n\n  .calc-button {\n    display: block;\n    cursor: pointer;\n    outline: none;\n    border: none;\n    background-color: #dedfe4;\n    width: 30%;\n    height: 5%;\n    border-radius: 30px;\n    font-size: 1.5rem;\n    font-weight: 600;\n    color: white;\n    background-size: 100% 100%;\n    box-shadow: 0 0 0 1px black inset;\n    margin: 1%;\n  }\n  \n  .calc-button:hover {\n    background-image: linear-gradient(\n      145deg,\n      transparent 10%,\n      lightgray 10% 20%,\n      transparent 20% 30%,\n      lightgray 30% 40%,\n      transparent 40% 50%,\n      darkgray 50% 60%,\n      transparent 60% 70%,\n      pink 70% 80%,\n      transparent 80% 90%,\n      blue 90% 100%\n    );\n    animation: background 3s linear infinite;\n  }\n  \n  @keyframes background {\n    0% {\n      background-position: 0 0;\n    }\n    100% {\n      background-position: 400px 0;\n    }\n  }\n\n`;\n_c = CSS;\nexport const Backtest = ({\n  backtest\n}) => {\n  _s();\n\n  const defaultTimePeriod = () => {\n    switch (backtest.indicator) {\n      case 'RSI':\n        return 14;\n\n      case 'EMA':\n        return 9;\n\n      case 'SMA':\n        return 9;\n\n      case 'BB':\n        return 20;\n\n      default:\n        return 24;\n    }\n  };\n\n  const defaultBuyStrat = () => {\n    switch (backtest.indicator) {\n      case 'RSI':\n        return 30;\n\n      case 'EMA':\n        return -3;\n\n      case 'SMA':\n        return -3;\n\n      case 'BB':\n        return -3;\n\n      default:\n        return -3;\n    }\n  }; // Returns today date in YYYY-MM-DD formate\n\n\n  const getTodayDate = () => {\n    return new Date().toISOString().slice(0, 10);\n  }; // Returns 100 years ago today date in YYYY-MM-DD formate\n\n\n  const getOldDate = () => {\n    let myDate = new Date(new Date().setFullYear(new Date().getFullYear() - 100));\n    return myDate.toISOString().slice(0, 10);\n  };\n\n  const [tradeListData, setTradeListData] = useState([]);\n  const [seriesType, setSeriesType] = useState('1. open');\n  const [timePeriod, setTimePeriod] = useState(defaultTimePeriod());\n  const [stdDeviation, setStdDeviation] = useState(2);\n  const [startDate, setStartDate] = useState(getOldDate());\n  const [endDate, setEndDate] = useState(getTodayDate());\n  const [maxBags, setMaxBags] = useState(5);\n  const [initalBalance, setInitialBalance] = useState(10000);\n  const [initalBuyType, setInitalBuyType] = useState('usd');\n  const [initalBuyAmount, setInitalBuyAmount] = useState(1500);\n  const [buyStrategyValue, setBuyStrategyValue] = useState(defaultBuyStrat());\n  const [buyStrategyType, setBuyStrategyType] = useState('Real Middle Band'); // Used for Bollinger upper/middle/lower\n\n  const [sellStrategyValue, setSellStrategyValue] = useState(1);\n  const {\n    deleteBacktest,\n    current_symbol,\n    cache_TSDA,\n    cache_TSDA_function\n  } = useContext(GlobalContext); // Used for JSX dropdown items\n\n  const dropdownItems = items => {\n    return items.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: item.value,\n      children: item.name\n    }, item.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 30\n    }, this));\n  }; // Calculates USD value for creating a bag\n\n\n  function calcInitalBuy(buyType, buyAmount, currentBalance, curStockPrice) {\n    switch (buyType) {\n      case \"numStocks\":\n        return curStockPrice * buyAmount;\n\n      case \"percent\":\n        return currentBalance * (buyAmount / 100.00);\n\n      default:\n        // case \"usd\":\n        return buyAmount;\n    }\n  } // Function to return true/false for buy condition, given price and indicator values\n\n\n  function isBuyConditionMet(buyStrategyValue, curStockPrice, curIndicatorValue) {\n    switch (backtest.indicator) {\n      case \"RSI\":\n        return curIndicatorValue < buyStrategyValue;\n\n      default:\n        // case EMA, SMA, BB (all cases where indicator is a price of stock)\n        return curStockPrice <= curIndicatorValue * ((100.0 + buyStrategyValue) / 100.0);\n    }\n  } // Returns JSON name of element for indicator item\n\n\n  function getIndicatorJSON() {\n    switch (backtest.indicator) {\n      case \"BBANDS\":\n        return buyStrategyType;\n\n      default:\n        return backtest.indicator;\n    }\n  } // Finalizes trade, storing buy/sell data into backtest.tradeListData\n\n\n  function finalizeTrade(myBag, buyDate, sellDate, candleCountSell, sellPrice, curIndicatorValue, numShares) {\n    const percentChange = sellPrice / myBag[\"buy-price\"];\n    const profitUSD = +(percentChange - 1) * myBag[\"volume-USD\"];\n    const candleLength = +candleCountSell - myBag[\"candle-count-buy\"]; // Push on individual trade data\n\n    backtest.tradeListData.push({\n      buyDate,\n      sellDate,\n      buyPrice: myBag[\"buy-price\"],\n      sellPrice,\n      numShares,\n      profitPercent: +percentChange - 1,\n      profitUSD,\n      candleLength,\n      indicatorAtSell: curIndicatorValue,\n      indicatorAtBuy: myBag[\"indicator-at-buy\"]\n    }); // Update results Overview data\n\n    backtest.numTrades++;\n    backtest.profitUSD += profitUSD;\n    backtest.netBars += candleLength;\n    backtest.netSellVolume += sellPrice * numShares; //console.log(\"finalizeTrade called, % change:\", percentChange, buyDate, sellDate);\n  } // Runs user specified backtest algorithms and prepares outputs/trades to display\n\n\n  async function runBacktests(paperAPICall, pairSettings) {\n    let stockPriceData;\n    let stockIndicatorData;\n    let response; // Ensure user has selected a stock\n\n    if (!current_symbol) {\n      alert(\"Please select a stock to test your strategy on.\");\n      return;\n    } // Ensure API json for cache_TSDA exists\n\n\n    if (!cache_TSDA['Meta Data']) {\n      response = await fetch(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${current_symbol}&outputsize=full&apikey=CQ5JZQYM4DG0OODA`);\n      stockPriceData = await response.json();\n      cache_TSDA_function(stockPriceData); // Stop if MAX API\n\n      if (stockPriceData.Note) return;\n    } else {\n      stockPriceData = cache_TSDA;\n    } // Make API call for stockIndicatorData\n\n\n    let optionalParameters;\n\n    switch (backtest.indicator) {\n      case 'BBANDS':\n        optionalParameters = `&nbdevup=${pairSettings.stdDeviation}&nbdevdn=${pairSettings.stdDeviation}`;\n        break;\n\n      default:\n        optionalParameters = '';\n    }\n\n    response = await fetch(`https://www.alphavantage.co/query?function=${backtest.indicator}&symbol=${current_symbol}&interval=daily&time_period=${paperAPICall.timePeriod}&series_type=${paperAPICall.seriesType}${optionalParameters}&apikey=CQ5JZQYM4DG0OODA`);\n    stockIndicatorData = await response.json(); // Catches MAX API\n\n    if (stockIndicatorData.Note) {\n      alert(\"MAX API CALLS. Please wait a minute for more. Thank you for visitng my project! However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n      return;\n    } // Initalize bags/candle-count/currentBalance\n\n\n    let candleCount = 0;\n    let bagList = {};\n    bagList.length = 0;\n    let currentBalance = pairSettings.initalBalance;\n    let startDateReached = false; // Initalize single integer to know lowest price I consider selling at(updated when new bags are added)\n\n    let lowestSellPrice = 0; // Main loop that runs the paper trading bot algo, maintains bags/buys/sells/etc throughout 5 years (1265 trading days)\n    // Note: in the following for loop: key == date\n\n    for (let [key] of Object.entries(stockIndicatorData[`Technical Analysis: ${backtest.indicator}`]).reverse()) {\n      // Enables iterator code to run once start date reached/passed\n      if (key >= startDate) {\n        startDateReached = true;\n      } // Skips iterator because start date not reached\n\n\n      if (startDateReached === false) {\n        continue;\n      } else if (key === endDate) {\n        // End date reached... so stop iterating.\n        break;\n      } // Count Candles interated over\n\n\n      candleCount++; // Skip days where no price exists\n\n      if (!stockPriceData[\"Time Series (Daily)\"][`${key}`]) continue; // Essential values for iterating stock data\n\n      let curIndicatorValue = +stockIndicatorData[`Technical Analysis: ${backtest.indicator}`][`${key}`][`${getIndicatorJSON()}`];\n      let curStockPrice = +stockPriceData[\"Time Series (Daily)\"][`${key}`][`${paperAPICall.seriesType}`]; // First price of start date\n\n      if (!backtest.startPrice) {\n        backtest.startPrice = curStockPrice;\n      } // Maintain oldest price\n\n\n      backtest.endPrice = curStockPrice; // Prospective USD to create a new bag\n\n      const newBagVolume = calcInitalBuy(pairSettings.initalBuyType, pairSettings.initalBuyAmount, currentBalance, curStockPrice); // If Buy condition: Bags open, balance sufficient, price meets indicator limit\n\n      if (bagList.length < pairSettings.maxBags && newBagVolume <= currentBalance && isBuyConditionMet(pairSettings.buyStrategyValue, curStockPrice, curIndicatorValue)) {\n        // Create and add bag to bagList, increment bagList.length. Automatically added by creating key.\n        bagList.length++;\n        console.log(\"bag added\");\n        bagList[`${key}`] = {\n          \"sell-price-limit\": +(1 + pairSettings.sellStrategyValue / 100) * curStockPrice,\n          \"buy-price\": +curStockPrice,\n          \"candle-count-buy\": +candleCount,\n          \"volume-USD\": +newBagVolume,\n          \"num-shares\": +newBagVolume / curStockPrice,\n          \"indicator-at-buy\": curIndicatorValue\n        }; // Update currentBalance\n\n        currentBalance -= bagList[`${key}`][\"volume-USD\"]; // Update lowestSellPrice, min of current lowest, or new buy price is lower. Initialize if only 1 bag.\n\n        if (bagList.length === 1) {\n          lowestSellPrice = +bagList[`${key}`][\"sell-price-limit\"];\n        } else {\n          lowestSellPrice = Math.min(lowestSellPrice, bagList[`${key}`][\"sell-price-limit\"]);\n        } // Else If Sell Condition\n\n      } else if (curStockPrice >= lowestSellPrice && bagList.length > 0) {\n        // Store key of buy date(below loop has new key in smaller scope)\n        let sellDate = key;\n\n        for (let [key] of Object.entries(bagList)) {\n          if (curStockPrice >= bagList[`${key}`][\"sell-price-limit\"]) {\n            // Finalize Trade function records trade data into backtest to display in JSX below\n            finalizeTrade(bagList[`${key}`], key, sellDate, candleCount, curStockPrice, curIndicatorValue, bagList[`${key}`][\"num-shares\"], bagList[`${key}`][\"indicator-at-buy\"]);\n            delete bagList[`${key}`];\n            bagList.length--;\n          }\n        } // If bags exist, update to new lowest price\n\n\n        const newBagListKeys = Object.entries(bagList);\n\n        if (newBagListKeys[0][1] > 0) {\n          lowestSellPrice = bagList[newBagListKeys[1][0]][\"sell-price-limit\"];\n\n          for (let [key] of newBagListKeys) {\n            lowestSellPrice = Math.min(lowestSellPrice, +bagList[`${key}`][\"sell-price-limit\"]);\n          }\n        }\n      } // End of Buy/Sell conditions\n\n    }\n\n    console.log(\"iterating done\", backtest, startDate, endDate, backtest.holdReturn); // Iterating complete, finalize some data on compelted backtest algorithm\n\n    backtest.holdReturn = ((backtest.endPrice / backtest.startPrice - 1) * 100).toFixed(2);\n    console.log(\"set holdret\", backtest.holdReturn, \"end/start\", backtest.endPrice, backtest.startPrice);\n    delete backtest.startPrice;\n    backtest.profitPercentOnBalance = backtest.profitUSD / pairSettings.initalBalance;\n    backtest.profitPercentOnTrades = backtest.profitUSD / (backtest.netSellVolume - backtest.profitUSD);\n    backtest.avgBars = backtest.netBars / backtest.numTrades; // Update results display and sends tradeListData to TradeList.js in JSX below\n\n    setTradeListData(backtest.tradeListData);\n  }\n\n  const onSubmit = () => {\n    backtest.current_symbol = current_symbol;\n    const paperAPICall = {\n      // Relavent variables that are global: current_symbol, interval(daily), backtest.indicator(ex, RSI)\n      seriesType: seriesType,\n      timePeriod: +timePeriod,\n      stdDeviation: +stdDeviation\n    };\n    const pairSettings = {\n      maxBags: +maxBags,\n      initalBalance: +initalBalance,\n      initalBuyType: initalBuyType,\n      initalBuyAmount: +initalBuyAmount,\n      buyStrategyValue: +buyStrategyValue,\n      buyStrategyType,\n      // used for Bollinger upper/middle/lower\n      sellStrategyValue: +sellStrategyValue\n    }; // Ensure no trivial strategies are submitted\n\n    if (pairSettings.maxBags < 1 || pairSettings.initalBalance < 1 || pairSettings.initalBuyAmount < 1 || pairSettings.sellStrategyValue < 0 || paperAPICall.timePeriod < 1) {\n      // Bags, balance, timeperiod, buy amount, sell gain% must be positive\n      alert(\"Please enter valid inputs. Use positive integers for the following: Max bags, Sell percentage, Time period, Buy amount, Inital Balance.\");\n    } else if (pairSettings.initalBuyType === 'percent' && (pairSettings.initalBuyAmount < 1 || pairSettings.initalBuyAmount > 100)) {\n      // if(buy type is percent) buy amount must be (0-100]\n      alert(\"Buy amount percentage must be 1-100%\");\n    } else if (pairSettings.initalBuyAmount > pairSettings.initalBalance) {\n      // inital buy must be < inital balance\n      alert(\"Inital buys must be less than or equal to inital balance.\");\n    } else if (backtest.indicator === 'RSI' && (pairSettings.buyStrategyValue < 1 || pairSettings.buyStrategyValue > 99)) {\n      // Ensure no trivial strategy specific settings are submitted <connect to previous if chain thing>\n      alert(\"RSI values must be between 1-99\");\n    } else if (backtest.indicator === 'BBANDS' && paperAPICall.stdDeviation < 0.5) {\n      // Ensure no trivial BB std deviation\n      alert(\"Standard Deviation must be greater than or equal to 0.5.\");\n    } else {\n      // Calculation inputs valid\n      console.log(pairSettings); // Initialize Trade List Data(for final results)\n\n      backtest.tradeListData = [];\n      backtest.profitUSD = 0;\n      backtest.numTrades = 0;\n      backtest.netBars = 0;\n      backtest.netSellVolume = 0; // Net volume USD sold\n      // Run backtest algorithm\n\n      runBacktests(paperAPICall, pairSettings);\n    }\n  };\n\n  let indicatorSettingDOM = null;\n\n  switch (backtest.indicator) {\n    case 'RSI':\n      indicatorSettingDOM = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-label\",\n          children: \"Time Period:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-flex\",\n          placeholder: \"14\",\n          onChange: e => setTimePeriod(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n      break;\n\n    case 'EMA':\n      indicatorSettingDOM = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-label\",\n          children: \"Time Period: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-flex\",\n          placeholder: \"9\",\n          onChange: e => setTimePeriod(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true);\n      break;\n\n    case 'SMA':\n      indicatorSettingDOM = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-label\",\n          children: \"Time Period:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-flex\",\n          placeholder: \"9\",\n          onChange: e => setTimePeriod(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true);\n      break;\n\n    case 'BBANDS':\n      indicatorSettingDOM = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-label\",\n          children: \"Time Period: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-flex\",\n          placeholder: \"20\",\n          onChange: e => setTimePeriod(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-label\",\n          children: \"Standard Deviation for upper/lower lines:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-flex\",\n          placeholder: \"2\",\n          onChange: e => setStdDeviation(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true);\n      break;\n\n    default:\n      indicatorSettingDOM = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Default backtest indicator DOM\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 30\n      }, this);\n  }\n\n  let buyStrategyDOM = null;\n\n  switch (backtest.indicator) {\n    case 'RSI':\n      buyStrategyDOM = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-label\",\n          children: \"Buy when RSI less than\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-inline\",\n          placeholder: \"30\",\n          onChange: e => setBuyStrategyValue(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true);\n      break;\n\n    case 'EMA':\n      buyStrategyDOM = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-label\",\n          children: \"Buy at price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-inline\",\n          placeholder: \"-3\",\n          onChange: e => setBuyStrategyValue(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-label\",\n          children: \"% away from the EMA line. \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-label-sub\",\n          children: \"(3 = 3% above, -3 = 3% below)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true);\n      break;\n\n    case 'SMA':\n      buyStrategyDOM = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-label\",\n          children: \"Buy at price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-inline\",\n          placeholder: \"-3\",\n          onChange: e => setBuyStrategyValue(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-label\",\n          children: \"% away from the SMA line. \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-label-sub\",\n          children: \"(3 = 3% above, -3 = 3% below)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true);\n      break;\n\n    case 'BBANDS':\n      buyStrategyDOM = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-label\",\n          children: \"Band to follow:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"input-select\",\n          onChange: e => setBuyStrategyType(e.target.value),\n          children: dropdownItems([{\n            name: 'Middle',\n            value: 'Real Middle Band'\n          }, {\n            name: 'Upper',\n            value: 'Real Upper Band'\n          }, {\n            name: 'Lower',\n            value: 'Real Lower Band'\n          }])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-label\",\n          children: \"Buy at price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-inline\",\n          placeholder: \"-3\",\n          onChange: e => setBuyStrategyValue(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-label\",\n          children: \"% away from the selected line. \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-label-sub\",\n          children: \"(3 = 3% above, -3 = 3% below)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true);\n      break;\n\n    default:\n      buyStrategyDOM = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"buy strat dom default\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 25\n      }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(CSS, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"settings\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [backtest.indicator, \" Settings\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-label\",\n        children: \"Select Series Type:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"input-select\",\n        onChange: e => setSeriesType(e.target.value),\n        children: dropdownItems([{\n          name: 'open',\n          value: '1. open'\n        }, {\n          name: 'close',\n          value: '4. close'\n        }, {\n          name: 'high',\n          value: '2. high'\n        }, {\n          name: 'low',\n          value: '3. low'\n        }])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 9\n      }, this), indicatorSettingDOM, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 594,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Trading Strategy Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-label\",\n        children: \"Start Date:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-flex\",\n        type: \"date\",\n        value: getOldDate(),\n        onChange: e => setStartDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-label\",\n        children: \"End Date:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-flex\",\n        type: \"date\",\n        value: getTodayDate(),\n        onChange: e => setEndDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 604,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-label\",\n        children: \"Max number of bags:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 607,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-flex\",\n        placeholder: \"5\",\n        onChange: e => setMaxBags(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-label\",\n        children: \"Inital balance (USD):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-flex\",\n        min: \"0\",\n        placeholder: \"10000\",\n        onChange: e => setInitialBalance(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-label\",\n        children: \"Inital buy type:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"input-select\",\n        onChange: e => setInitalBuyType(e.target.value),\n        children: dropdownItems([{\n          name: '($) USD',\n          value: 'usd'\n        }, {\n          name: '(%) Percent of Balance',\n          value: 'percent'\n        }, {\n          name: '(#) Number of Stocks',\n          value: 'numStocks'\n        }])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-label\",\n        children: \"Inital buy amount:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-flex\",\n        min: \"0\",\n        placeholder: \"1500\",\n        onChange: e => setInitalBuyAmount(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 9\n      }, this), buyStrategyDOM, /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-label\",\n        children: \"Sell bags at\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 630,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-inline\",\n        placeholder: \"1\",\n        onChange: e => setSellStrategyValue(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-label\",\n        children: \"% profit.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"calc-button\",\n        onClick: () => onSubmit(),\n        children: \"Calculate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deleteBacktest(backtest.id),\n        className: \"btn-primary w-25\",\n        children: \"x\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 578,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results-overview\",\n      children: [\"Results overview \", backtest.current_symbol ? \"(\" + backtest.current_symbol + \")\" : \"\", /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Profit USD: $\", (backtest.profitUSD ? backtest.profitUSD : 0).toFixed(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Profit Percent on Entire Balance: \", (backtest.profitPercentOnBalance ? 100 * backtest.profitPercentOnBalance : 0).toFixed(2), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 647,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Average profit per trade: \", (backtest.profitPercentOnTrades ? 100 * backtest.profitPercentOnTrades : 0).toFixed(2), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Number of trades: \", backtest.numTrades]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 649,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Average bars per trade: \", (backtest.avgBars ? backtest.avgBars : 0).toFixed(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 650,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Buy and hold return: \", backtest.holdReturn > 0 ? \"+\" : \"\", backtest.holdReturn ? backtest.holdReturn : \"\", \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 644,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list-of-trades\",\n      children: [\"List of trades\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message_wrap\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message_box\",\n          children: /*#__PURE__*/_jsxDEV(TradeList, {\n            tradeList: tradeListData.map(tradeData => tradeData)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 661,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 660,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 659,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 657,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 577,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Backtest, \"chQaxZb7xKgPVg0QjEhwCab9XVg=\");\n\n_c2 = Backtest;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CSS\");\n$RefreshReg$(_c2, \"Backtest\");","map":{"version":3,"sources":["/Users/benjaminshiao/Desktop/react/trade-analyzer/src/components/Backtest.js"],"names":["React","useState","useContext","styled","TradeList","GlobalContext","CSS","div","Backtest","backtest","defaultTimePeriod","indicator","defaultBuyStrat","getTodayDate","Date","toISOString","slice","getOldDate","myDate","setFullYear","getFullYear","tradeListData","setTradeListData","seriesType","setSeriesType","timePeriod","setTimePeriod","stdDeviation","setStdDeviation","startDate","setStartDate","endDate","setEndDate","maxBags","setMaxBags","initalBalance","setInitialBalance","initalBuyType","setInitalBuyType","initalBuyAmount","setInitalBuyAmount","buyStrategyValue","setBuyStrategyValue","buyStrategyType","setBuyStrategyType","sellStrategyValue","setSellStrategyValue","deleteBacktest","current_symbol","cache_TSDA","cache_TSDA_function","dropdownItems","items","map","item","value","name","calcInitalBuy","buyType","buyAmount","currentBalance","curStockPrice","isBuyConditionMet","curIndicatorValue","getIndicatorJSON","finalizeTrade","myBag","buyDate","sellDate","candleCountSell","sellPrice","numShares","percentChange","profitUSD","candleLength","push","buyPrice","profitPercent","indicatorAtSell","indicatorAtBuy","numTrades","netBars","netSellVolume","runBacktests","paperAPICall","pairSettings","stockPriceData","stockIndicatorData","response","alert","fetch","json","Note","optionalParameters","candleCount","bagList","length","startDateReached","lowestSellPrice","key","Object","entries","reverse","startPrice","endPrice","newBagVolume","console","log","Math","min","newBagListKeys","holdReturn","toFixed","profitPercentOnBalance","profitPercentOnTrades","avgBars","onSubmit","indicatorSettingDOM","e","target","buyStrategyDOM","id","tradeData"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,UAAzB,QAA0C,OAA1C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,SAASC,aAAT,QAA8B,wBAA9B,C,CACA;;AAEA,MAAMC,GAAG,GAAGH,MAAM,CAACI,GAAI;AACvkB;AAAA;;AAExC,QAAMC,iBAAiB,GAAG,MAAM;AAC9B,YAAOD,QAAQ,CAACE,SAAhB;AACE,WAAK,KAAL;AAAY,eAAO,EAAP;;AACZ,WAAK,KAAL;AAAY,eAAO,CAAP;;AACZ,WAAK,KAAL;AAAY,eAAO,CAAP;;AACZ,WAAK,IAAL;AAAW,eAAO,EAAP;;AACX;AAAS,eAAO,EAAP;AALX;AAOD,GARD;;AASA,QAAMC,eAAe,GAAG,MAAM;AAC5B,YAAOH,QAAQ,CAACE,SAAhB;AACE,WAAK,KAAL;AAAY,eAAO,EAAP;;AACZ,WAAK,KAAL;AAAY,eAAO,CAAC,CAAR;;AACZ,WAAK,KAAL;AAAY,eAAO,CAAC,CAAR;;AACZ,WAAK,IAAL;AAAW,eAAO,CAAC,CAAR;;AACX;AAAS,eAAO,CAAC,CAAR;AALX;AAOD,GARD,CAXwC,CAqBxC;;;AACA,QAAME,YAAY,GAAG,MAAM;AACzB,WAAO,IAAIC,IAAJ,GAAWC,WAAX,GAAyBC,KAAzB,CAA+B,CAA/B,EAAkC,EAAlC,CAAP;AACD,GAFD,CAtBwC,CA0BxC;;;AACA,QAAMC,UAAU,GAAG,MAAM;AACvB,QAAIC,MAAM,GAAG,IAAIJ,IAAJ,CAAS,IAAIA,IAAJ,GAAWK,WAAX,CAAuB,IAAIL,IAAJ,GAAWM,WAAX,KAA2B,GAAlD,CAAT,CAAb;AACA,WAAOF,MAAM,CAACH,WAAP,GAAqBC,KAArB,CAA2B,CAA3B,EAA8B,EAA9B,CAAP;AACD,GAHD;;AAMA,QAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoCrB,QAAQ,CAAC,EAAD,CAAlD;AAEA,QAAM,CAACsB,UAAD,EAAaC,aAAb,IAA8BvB,QAAQ,CAAC,SAAD,CAA5C;AACA,QAAM,CAACwB,UAAD,EAAaC,aAAb,IAA8BzB,QAAQ,CAACS,iBAAiB,EAAlB,CAA5C;AACA,QAAM,CAACiB,YAAD,EAAeC,eAAf,IAAkC3B,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM,CAAC4B,SAAD,EAAYC,YAAZ,IAA4B7B,QAAQ,CAACgB,UAAU,EAAX,CAA1C;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwB/B,QAAQ,CAACY,YAAY,EAAb,CAAtC;AAEA,QAAM,CAACoB,OAAD,EAAUC,UAAV,IAAwBjC,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACkC,aAAD,EAAgBC,iBAAhB,IAAqCnC,QAAQ,CAAC,KAAD,CAAnD;AACA,QAAM,CAACoC,aAAD,EAAgBC,gBAAhB,IAAoCrC,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACsC,eAAD,EAAkBC,kBAAlB,IAAwCvC,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAM,CAACwC,gBAAD,EAAmBC,mBAAnB,IAA0CzC,QAAQ,CAACW,eAAe,EAAhB,CAAxD;AACA,QAAM,CAAC+B,eAAD,EAAkBC,kBAAlB,IAAwC3C,QAAQ,CAAC,kBAAD,CAAtD,CA9CwC,CA8CoC;;AAC5E,QAAM,CAAC4C,iBAAD,EAAoBC,oBAApB,IAA4C7C,QAAQ,CAAC,CAAD,CAA1D;AAEA,QAAM;AAAE8C,IAAAA,cAAF;AAAkBC,IAAAA,cAAlB;AAAkCC,IAAAA,UAAlC;AAA8CC,IAAAA;AAA9C,MAAsEhD,UAAU,CAACG,aAAD,CAAtF,CAjDwC,CAmDxC;;AACA,QAAM8C,aAAa,GAAIC,KAAD,IAAW;AAC/B,WAAOA,KAAK,CAACC,GAAN,CAAUC,IAAI,iBAAI;AAAQ,MAAA,KAAK,EAAEA,IAAI,CAACC,KAApB;AAAA,gBAA4CD,IAAI,CAACE;AAAjD,OAAgCF,IAAI,CAACE,IAArC;AAAA;AAAA;AAAA;AAAA,YAAlB,CAAP;AACD,GAFD,CApDwC,CAwDxC;;;AACA,WAASC,aAAT,CAAuBC,OAAvB,EAAgCC,SAAhC,EAA2CC,cAA3C,EAA2DC,aAA3D,EAA0E;AACxE,YAAOH,OAAP;AACE,WAAK,WAAL;AACE,eAAOG,aAAa,GAACF,SAArB;;AACF,WAAK,SAAL;AACE,eAAOC,cAAc,IAAID,SAAS,GAAC,MAAd,CAArB;;AACF;AACE;AACA,eAAOA,SAAP;AAPJ;AAUD,GApEuC,CAsExC;;;AACA,WAASG,iBAAT,CAA2BrB,gBAA3B,EAA6CoB,aAA7C,EAA4DE,iBAA5D,EAA+E;AAC7E,YAAOtD,QAAQ,CAACE,SAAhB;AACE,WAAK,KAAL;AACE,eAAOoD,iBAAiB,GAAGtB,gBAA3B;;AACF;AACE;AACA,eAAOoB,aAAa,IAAKE,iBAAiB,IAAI,CAAC,QAAQtB,gBAAT,IAA2B,KAA/B,CAA1C;AALJ;AAOD,GA/EuC,CAiFxC;;;AACA,WAASuB,gBAAT,GAA4B;AAC1B,YAAOvD,QAAQ,CAACE,SAAhB;AACE,WAAK,QAAL;AACE,eAAOgC,eAAP;;AACF;AACE,eAAOlC,QAAQ,CAACE,SAAhB;AAJJ;AAOD,GA1FuC,CA4FxC;;;AACA,WAASsD,aAAT,CAAuBC,KAAvB,EAA8BC,OAA9B,EAAuCC,QAAvC,EAAiDC,eAAjD,EAAkEC,SAAlE,EAA6EP,iBAA7E,EAAgGQ,SAAhG,EAA2G;AACzG,UAAMC,aAAa,GAAIF,SAAS,GAACJ,KAAK,CAAC,WAAD,CAAtC;AACA,UAAMO,SAAS,GAAG,EAAED,aAAa,GAAC,CAAhB,IAAmBN,KAAK,CAAC,YAAD,CAA1C;AACA,UAAMQ,YAAY,GAAG,CAACL,eAAD,GAAiBH,KAAK,CAAC,kBAAD,CAA3C,CAHyG,CAKzG;;AACCzD,IAAAA,QAAQ,CAACY,aAAV,CAAyBsD,IAAzB,CAA8B;AAC5BR,MAAAA,OAD4B;AAE5BC,MAAAA,QAF4B;AAG5BQ,MAAAA,QAAQ,EAAEV,KAAK,CAAC,WAAD,CAHa;AAI5BI,MAAAA,SAJ4B;AAK5BC,MAAAA,SAL4B;AAM5BM,MAAAA,aAAa,EAAE,CAACL,aAAD,GAAe,CANF;AAO5BC,MAAAA,SAP4B;AAQ5BC,MAAAA,YAR4B;AAS5BI,MAAAA,eAAe,EAAEf,iBATW;AAU5BgB,MAAAA,cAAc,EAAEb,KAAK,CAAC,kBAAD;AAVO,KAA9B,EANyG,CAmBzG;;AACAzD,IAAAA,QAAQ,CAACuE,SAAT;AACAvE,IAAAA,QAAQ,CAACgE,SAAT,IAAsBA,SAAtB;AACAhE,IAAAA,QAAQ,CAACwE,OAAT,IAAoBP,YAApB;AACAjE,IAAAA,QAAQ,CAACyE,aAAT,IAA0BZ,SAAS,GAAGC,SAAtC,CAvByG,CAyBzG;AACD,GAvHuC,CAyHxC;;;AACA,iBAAeY,YAAf,CAA4BC,YAA5B,EAA0CC,YAA1C,EAAwD;AACtD,QAAIC,cAAJ;AACA,QAAIC,kBAAJ;AACA,QAAIC,QAAJ,CAHsD,CAKtD;;AACA,QAAG,CAACxC,cAAJ,EAAmB;AACjByC,MAAAA,KAAK,CAAC,iDAAD,CAAL;AACA;AACD,KATqD,CAWtD;;;AACA,QAAG,CAACxC,UAAU,CAAC,WAAD,CAAd,EAA4B;AAC1BuC,MAAAA,QAAQ,GAAG,MAAME,KAAK,CAAE,gFAA+E1C,cAAe,0CAAhG,CAAtB;AACAsC,MAAAA,cAAc,GAAG,MAAME,QAAQ,CAACG,IAAT,EAAvB;AACAzC,MAAAA,mBAAmB,CAACoC,cAAD,CAAnB,CAH0B,CAK1B;;AACA,UAAGA,cAAc,CAACM,IAAlB,EAAwB;AACzB,KAPD,MAOK;AACHN,MAAAA,cAAc,GAAGrC,UAAjB;AACD,KArBqD,CAuBtD;;;AACA,QAAI4C,kBAAJ;;AACA,YAAOpF,QAAQ,CAACE,SAAhB;AACE,WAAK,QAAL;AACEkF,QAAAA,kBAAkB,GAAI,YAAWR,YAAY,CAAC1D,YAAa,YAAW0D,YAAY,CAAC1D,YAAa,EAAhG;AACA;;AACF;AACEkE,QAAAA,kBAAkB,GAAG,EAArB;AALJ;;AAOAL,IAAAA,QAAQ,GAAG,MAAME,KAAK,CAAE,8CAA6CjF,QAAQ,CAACE,SAAU,WAAUqC,cAAe,+BAA8BoC,YAAY,CAAC3D,UAAW,gBAAe2D,YAAY,CAAC7D,UAAW,GAAEsE,kBAAmB,0BAA7M,CAAtB;AACAN,IAAAA,kBAAkB,GAAG,MAAMC,QAAQ,CAACG,IAAT,EAA3B,CAjCsD,CAkCtD;;AACA,QAAGJ,kBAAkB,CAACK,IAAtB,EAA2B;AACzBH,MAAAA,KAAK,CAAC,gNAAD,CAAL;AACA;AACD,KAtCqD,CAwCtD;;;AACA,QAAIK,WAAW,GAAG,CAAlB;AACA,QAAIC,OAAO,GAAG,EAAd;AACAA,IAAAA,OAAO,CAACC,MAAR,GAAiB,CAAjB;AACA,QAAIpC,cAAc,GAAGyB,YAAY,CAAClD,aAAlC;AACA,QAAI8D,gBAAgB,GAAG,KAAvB,CA7CsD,CA8CtD;;AACA,QAAIC,eAAe,GAAG,CAAtB,CA/CsD,CAgDtD;AACA;;AACA,SAAI,IAAI,CAACC,GAAD,CAAR,IAAiBC,MAAM,CAACC,OAAP,CAAed,kBAAkB,CAAE,uBAAsB9E,QAAQ,CAACE,SAAU,EAA3C,CAAjC,EAAgF2F,OAAhF,EAAjB,EAA2G;AACzG;AACA,UAAGH,GAAG,IAAEtE,SAAR,EAAkB;AAChBoE,QAAAA,gBAAgB,GAAG,IAAnB;AACD,OAJwG,CAKzG;;;AACA,UAAGA,gBAAgB,KAAK,KAAxB,EAA8B;AAC5B;AACD,OAFD,MAEM,IAAGE,GAAG,KAAGpE,OAAT,EAAiB;AACrB;AACA;AACD,OAXwG,CAazG;;;AACA+D,MAAAA,WAAW,GAd8F,CAgBzG;;AACA,UAAG,CAACR,cAAc,CAAC,qBAAD,CAAd,CAAuC,GAAEa,GAAI,EAA7C,CAAJ,EAAqD,SAjBoD,CAkBzG;;AACA,UAAIpC,iBAAiB,GAAG,CAACwB,kBAAkB,CAAE,uBAAsB9E,QAAQ,CAACE,SAAU,EAA3C,CAAlB,CAAiE,GAAEwF,GAAI,EAAvE,EAA2E,GAAEnC,gBAAgB,EAAG,EAAhG,CAAzB;AACA,UAAIH,aAAa,GAAG,CAACyB,cAAc,CAAC,qBAAD,CAAd,CAAuC,GAAEa,GAAI,EAA7C,EAAiD,GAAEf,YAAY,CAAC7D,UAAW,EAA3E,CAArB,CApByG,CAsBzG;;AACA,UAAG,CAACd,QAAQ,CAAC8F,UAAb,EAAwB;AACtB9F,QAAAA,QAAQ,CAAC8F,UAAT,GAAsB1C,aAAtB;AACD,OAzBwG,CA0BzG;;;AACApD,MAAAA,QAAQ,CAAC+F,QAAT,GAAoB3C,aAApB,CA3ByG,CA6BzG;;AACA,YAAM4C,YAAY,GAAGhD,aAAa,CAAC4B,YAAY,CAAChD,aAAd,EAA6BgD,YAAY,CAAC9C,eAA1C,EAA2DqB,cAA3D,EAA2EC,aAA3E,CAAlC,CA9ByG,CAgCzG;;AACA,UAAGkC,OAAO,CAACC,MAAR,GAAeX,YAAY,CAACpD,OAA5B,IAAuCwE,YAAY,IAAI7C,cAAvD,IAAyEE,iBAAiB,CAACuB,YAAY,CAAC5C,gBAAd,EAAgCoB,aAAhC,EAA+CE,iBAA/C,CAA7F,EAA+J;AAC7J;AACAgC,QAAAA,OAAO,CAACC,MAAR;AACAU,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAZ,QAAAA,OAAO,CAAE,GAAEI,GAAI,EAAR,CAAP,GAAoB;AAClB,8BAAoB,EAAE,IAAGd,YAAY,CAACxC,iBAAb,GAA+B,GAApC,IAA4CgB,aAD9C;AAElB,uBAAa,CAACA,aAFI;AAGlB,8BAAoB,CAACiC,WAHH;AAIlB,wBAAc,CAACW,YAJG;AAKlB,wBAAc,CAACA,YAAD,GAAc5C,aALV;AAMlB,8BAAoBE;AANF,SAApB,CAJ6J,CAa7J;;AACAH,QAAAA,cAAc,IAAImC,OAAO,CAAE,GAAEI,GAAI,EAAR,CAAP,CAAkB,YAAlB,CAAlB,CAd6J,CAgB7J;;AACA,YAAGJ,OAAO,CAACC,MAAR,KAAiB,CAApB,EAAsB;AACpBE,UAAAA,eAAe,GAAG,CAACH,OAAO,CAAE,GAAEI,GAAI,EAAR,CAAP,CAAkB,kBAAlB,CAAnB;AACD,SAFD,MAEK;AACHD,UAAAA,eAAe,GAAGU,IAAI,CAACC,GAAL,CAASX,eAAT,EAA0BH,OAAO,CAAE,GAAEI,GAAI,EAAR,CAAP,CAAkB,kBAAlB,CAA1B,CAAlB;AACD,SArB4J,CAsB/J;;AACC,OAvBD,MAuBM,IAAGtC,aAAa,IAAGqC,eAAhB,IAAmCH,OAAO,CAACC,MAAR,GAAe,CAArD,EAAuD;AAC3D;AACA,YAAI5B,QAAQ,GAAG+B,GAAf;;AACA,aAAI,IAAI,CAACA,GAAD,CAAR,IAAiBC,MAAM,CAACC,OAAP,CAAeN,OAAf,CAAjB,EAAyC;AACvC,cAAGlC,aAAa,IAAIkC,OAAO,CAAE,GAAEI,GAAI,EAAR,CAAP,CAAkB,kBAAlB,CAApB,EAA0D;AACxD;AACAlC,YAAAA,aAAa,CAAC8B,OAAO,CAAE,GAAEI,GAAI,EAAR,CAAR,EAAoBA,GAApB,EAAyB/B,QAAzB,EAAmC0B,WAAnC,EAAgDjC,aAAhD,EAA+DE,iBAA/D,EAAkFgC,OAAO,CAAE,GAAEI,GAAI,EAAR,CAAP,CAAkB,YAAlB,CAAlF,EAAmHJ,OAAO,CAAE,GAAEI,GAAI,EAAR,CAAP,CAAkB,kBAAlB,CAAnH,CAAb;AACA,mBAAOJ,OAAO,CAAE,GAAEI,GAAI,EAAR,CAAd;AACAJ,YAAAA,OAAO,CAACC,MAAR;AACD;AACF,SAV0D,CAY3D;;;AACA,cAAMc,cAAc,GAAGV,MAAM,CAACC,OAAP,CAAeN,OAAf,CAAvB;;AACA,YAAGe,cAAc,CAAC,CAAD,CAAd,CAAkB,CAAlB,IAAqB,CAAxB,EAA0B;AACxBZ,UAAAA,eAAe,GAAGH,OAAO,CAACe,cAAc,CAAC,CAAD,CAAd,CAAkB,CAAlB,CAAD,CAAP,CAA8B,kBAA9B,CAAlB;;AACA,eAAI,IAAI,CAACX,GAAD,CAAR,IAAiBW,cAAjB,EAAgC;AAC9BZ,YAAAA,eAAe,GAAGU,IAAI,CAACC,GAAL,CAASX,eAAT,EAA0B,CAACH,OAAO,CAAE,GAAEI,GAAI,EAAR,CAAP,CAAkB,kBAAlB,CAA3B,CAAlB;AACD;AACF;AACF,OA5EwG,CA6EzG;;AACD;;AAEDO,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BlG,QAA9B,EAAwCoB,SAAxC,EAAmDE,OAAnD,EAA4DtB,QAAQ,CAACsG,UAArE,EAlIsD,CAmItD;;AACAtG,IAAAA,QAAQ,CAACsG,UAAT,GAAsB,CAAC,CAAEtG,QAAQ,CAAC+F,QAAT,GAAoB/F,QAAQ,CAAC8F,UAA9B,GAA0C,CAA3C,IAAgD,GAAjD,EAAsDS,OAAtD,CAA8D,CAA9D,CAAtB;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BlG,QAAQ,CAACsG,UAApC,EAAgD,WAAhD,EAA6DtG,QAAQ,CAAC+F,QAAtE,EAAgF/F,QAAQ,CAAC8F,UAAzF;AACA,WAAO9F,QAAQ,CAAC8F,UAAhB;AACA9F,IAAAA,QAAQ,CAACwG,sBAAT,GAAkCxG,QAAQ,CAACgE,SAAT,GAAqBY,YAAY,CAAClD,aAApE;AACA1B,IAAAA,QAAQ,CAACyG,qBAAT,GAAiCzG,QAAQ,CAACgE,SAAT,IAAsBhE,QAAQ,CAACyE,aAAT,GAAyBzE,QAAQ,CAACgE,SAAxD,CAAjC;AACAhE,IAAAA,QAAQ,CAAC0G,OAAT,GAAmB1G,QAAQ,CAACwE,OAAT,GAAmBxE,QAAQ,CAACuE,SAA/C,CAzIsD,CA2ItD;;AACA1D,IAAAA,gBAAgB,CAACb,QAAQ,CAACY,aAAV,CAAhB;AACD;;AAED,QAAM+F,QAAQ,GAAG,MAAM;AACrB3G,IAAAA,QAAQ,CAACuC,cAAT,GAA0BA,cAA1B;AAEA,UAAMoC,YAAY,GAAG;AACnB;AACA7D,MAAAA,UAAU,EAAEA,UAFO;AAGnBE,MAAAA,UAAU,EAAE,CAACA,UAHM;AAInBE,MAAAA,YAAY,EAAE,CAACA;AAJI,KAArB;AAOA,UAAM0D,YAAY,GAAG;AACnBpD,MAAAA,OAAO,EAAE,CAACA,OADS;AAEnBE,MAAAA,aAAa,EAAE,CAACA,aAFG;AAGnBE,MAAAA,aAAa,EAAEA,aAHI;AAInBE,MAAAA,eAAe,EAAE,CAACA,eAJC;AAKnBE,MAAAA,gBAAgB,EAAE,CAACA,gBALA;AAMnBE,MAAAA,eANmB;AAMF;AACjBE,MAAAA,iBAAiB,EAAE,CAACA;AAPD,KAArB,CAVqB,CAoBrB;;AACA,QAAGwC,YAAY,CAACpD,OAAb,GAAqB,CAArB,IAA0BoD,YAAY,CAAClD,aAAb,GAA2B,CAArD,IAA0DkD,YAAY,CAAC9C,eAAb,GAA6B,CAAvF,IAA4F8C,YAAY,CAACxC,iBAAb,GAA+B,CAA3H,IAAgIuC,YAAY,CAAC3D,UAAb,GAAwB,CAA3J,EAA6J;AAC3J;AACAgE,MAAAA,KAAK,CAAC,yIAAD,CAAL;AACD,KAHD,MAGM,IAAGJ,YAAY,CAAChD,aAAb,KAA6B,SAA7B,KAA2CgD,YAAY,CAAC9C,eAAb,GAA6B,CAA7B,IAAkC8C,YAAY,CAAC9C,eAAb,GAA6B,GAA1G,CAAH,EAAkH;AACtH;AACAkD,MAAAA,KAAK,CAAC,sCAAD,CAAL;AACD,KAHK,MAGA,IAAIJ,YAAY,CAAC9C,eAAb,GAA6B8C,YAAY,CAAClD,aAA9C,EAA4D;AAChE;AACAsD,MAAAA,KAAK,CAAC,2DAAD,CAAL;AACD,KAHK,MAGA,IAAGhF,QAAQ,CAACE,SAAT,KAAqB,KAArB,KAA+B0E,YAAY,CAAC5C,gBAAb,GAA8B,CAA9B,IAAmC4C,YAAY,CAAC5C,gBAAb,GAA8B,EAAhG,CAAH,EAAuG;AAC3G;AACAgD,MAAAA,KAAK,CAAC,iCAAD,CAAL;AACD,KAHK,MAGA,IAAGhF,QAAQ,CAACE,SAAT,KAAqB,QAArB,IAAiCyE,YAAY,CAACzD,YAAb,GAA0B,GAA9D,EAAkE;AACtE;AACA8D,MAAAA,KAAK,CAAC,0DAAD,CAAL;AACD,KAHK,MAGD;AACH;AACAiB,MAAAA,OAAO,CAACC,GAAR,CAAYtB,YAAZ,EAFG,CAIH;;AACA5E,MAAAA,QAAQ,CAACY,aAAT,GAAyB,EAAzB;AACAZ,MAAAA,QAAQ,CAACgE,SAAT,GAAqB,CAArB;AACAhE,MAAAA,QAAQ,CAACuE,SAAT,GAAqB,CAArB;AACAvE,MAAAA,QAAQ,CAACwE,OAAT,GAAmB,CAAnB;AACAxE,MAAAA,QAAQ,CAACyE,aAAT,GAAyB,CAAzB,CATG,CASyB;AAE5B;;AACAC,MAAAA,YAAY,CAACC,YAAD,EAAeC,YAAf,CAAZ;AACD;AAEF,GAnDD;;AAqDA,MAAIgC,mBAAmB,GAAG,IAA1B;;AACA,UAAO5G,QAAQ,CAACE,SAAhB;AACE,SAAK,KAAL;AACE0G,MAAAA,mBAAmB,gBAAI;AAAA,gCAEnB;AAAO,UAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFmB,eAGnB;AAAO,UAAA,SAAS,EAAC,YAAjB;AAA8B,UAAA,WAAW,EAAC,IAA1C;AAA+C,UAAA,QAAQ,EAAGC,CAAD,IAAO5F,aAAa,CAAC4F,CAAC,CAACC,MAAF,CAAShE,KAAV;AAA7E;AAAA;AAAA;AAAA;AAAA,gBAHmB;AAAA,sBAAvB;AAKA;;AACF,SAAK,KAAL;AACE8D,MAAAA,mBAAmB,gBAAI;AAAA,gCAErB;AAAO,UAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFqB,eAGrB;AAAO,UAAA,SAAS,EAAC,YAAjB;AAA8B,UAAA,WAAW,EAAC,GAA1C;AAA8C,UAAA,QAAQ,EAAGC,CAAD,IAAO5F,aAAa,CAAC4F,CAAC,CAACC,MAAF,CAAShE,KAAV;AAA5E;AAAA;AAAA;AAAA;AAAA,gBAHqB;AAAA,sBAAvB;AAKA;;AACF,SAAK,KAAL;AACE8D,MAAAA,mBAAmB,gBAAI;AAAA,gCAErB;AAAO,UAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFqB,eAGrB;AAAO,UAAA,SAAS,EAAC,YAAjB;AAA8B,UAAA,WAAW,EAAC,GAA1C;AAA8C,UAAA,QAAQ,EAAGC,CAAD,IAAO5F,aAAa,CAAC4F,CAAC,CAACC,MAAF,CAAShE,KAAV;AAA5E;AAAA;AAAA;AAAA;AAAA,gBAHqB;AAAA,sBAAvB;AAKA;;AACF,SAAK,QAAL;AACE8D,MAAAA,mBAAmB,gBAAI;AAAA,gCAErB;AAAO,UAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFqB,eAGrB;AAAO,UAAA,SAAS,EAAC,YAAjB;AAA8B,UAAA,WAAW,EAAC,IAA1C;AAA+C,UAAA,QAAQ,EAAGC,CAAD,IAAO5F,aAAa,CAAC4F,CAAC,CAACC,MAAF,CAAShE,KAAV;AAA7E;AAAA;AAAA;AAAA;AAAA,gBAHqB,eAMrB;AAAO,UAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANqB,eAOrB;AAAO,UAAA,SAAS,EAAC,YAAjB;AAA8B,UAAA,WAAW,EAAC,GAA1C;AAA8C,UAAA,QAAQ,EAAG+D,CAAD,IAAO1F,eAAe,CAAC0F,CAAC,CAACC,MAAF,CAAShE,KAAV;AAA9E;AAAA;AAAA;AAAA;AAAA,gBAPqB;AAAA,sBAAvB;AASA;;AACF;AACE8D,MAAAA,mBAAmB,gBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAvB;AAlCJ;;AAsCA,MAAIG,cAAc,GAAG,IAArB;;AACA,UAAO/G,QAAQ,CAACE,SAAhB;AACE,SAAK,KAAL;AACE6G,MAAAA,cAAc,gBAAI;AAAA,gCAEhB;AAAO,UAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFgB,eAGhB;AAAO,UAAA,SAAS,EAAC,cAAjB;AAAgC,UAAA,WAAW,EAAC,IAA5C;AAAiD,UAAA,QAAQ,EAAGF,CAAD,IAAO5E,mBAAmB,CAAC4E,CAAC,CAACC,MAAF,CAAShE,KAAV;AAArF;AAAA;AAAA;AAAA;AAAA,gBAHgB,eAIhB;AAAA;AAAA;AAAA;AAAA,gBAJgB;AAAA,sBAAlB;AAMA;;AACF,SAAK,KAAL;AACEiE,MAAAA,cAAc,gBAAI;AAAA,gCAEhB;AAAO,UAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFgB,eAGhB;AAAO,UAAA,SAAS,EAAC,cAAjB;AAAgC,UAAA,WAAW,EAAC,IAA5C;AAAiD,UAAA,QAAQ,EAAGF,CAAD,IAAO5E,mBAAmB,CAAC4E,CAAC,CAACC,MAAF,CAAShE,KAAV;AAArF;AAAA;AAAA;AAAA;AAAA,gBAHgB,eAIhB;AAAO,UAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJgB,eAKhB;AAAO,UAAA,SAAS,EAAC,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALgB,eAMhB;AAAA;AAAA;AAAA;AAAA,gBANgB;AAAA,sBAAlB;AAQA;;AACF,SAAK,KAAL;AACEiE,MAAAA,cAAc,gBAAI;AAAA,gCAEhB;AAAO,UAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFgB,eAGhB;AAAO,UAAA,SAAS,EAAC,cAAjB;AAAgC,UAAA,WAAW,EAAC,IAA5C;AAAiD,UAAA,QAAQ,EAAGF,CAAD,IAAO5E,mBAAmB,CAAC4E,CAAC,CAACC,MAAF,CAAShE,KAAV;AAArF;AAAA;AAAA;AAAA;AAAA,gBAHgB,eAIhB;AAAO,UAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJgB,eAKhB;AAAO,UAAA,SAAS,EAAC,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALgB,eAMhB;AAAA;AAAA;AAAA;AAAA,gBANgB;AAAA,sBAAlB;AAQA;;AACF,SAAK,QAAL;AACEiE,MAAAA,cAAc,gBAAI;AAAA,gCAEhB;AAAO,UAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFgB,eAGhB;AAAQ,UAAA,SAAS,EAAC,cAAlB;AAAiC,UAAA,QAAQ,EAAGF,CAAD,IAAO1E,kBAAkB,CAAC0E,CAAC,CAACC,MAAF,CAAShE,KAAV,CAApE;AAAA,oBACGJ,aAAa,CAAC,CACb;AAACK,YAAAA,IAAI,EAAC,QAAN;AAAgBD,YAAAA,KAAK,EAAC;AAAtB,WADa,EAEb;AAACC,YAAAA,IAAI,EAAC,OAAN;AAAeD,YAAAA,KAAK,EAAC;AAArB,WAFa,EAGb;AAACC,YAAAA,IAAI,EAAC,OAAN;AAAeD,YAAAA,KAAK,EAAC;AAArB,WAHa,CAAD;AADhB;AAAA;AAAA;AAAA;AAAA,gBAHgB,eAWhB;AAAO,UAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXgB,eAYhB;AAAO,UAAA,SAAS,EAAC,cAAjB;AAAgC,UAAA,WAAW,EAAC,IAA5C;AAAiD,UAAA,QAAQ,EAAG+D,CAAD,IAAO5E,mBAAmB,CAAC4E,CAAC,CAACC,MAAF,CAAShE,KAAV;AAArF;AAAA;AAAA;AAAA;AAAA,gBAZgB,eAahB;AAAO,UAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbgB,eAchB;AAAO,UAAA,SAAS,EAAC,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAdgB,eAehB;AAAA;AAAA;AAAA;AAAA,gBAfgB;AAAA,sBAAlB;AAiBA;;AACF;AACEiE,MAAAA,cAAc,gBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAlB;AAjDJ;;AAqDA,sBACE,QAAC,GAAD;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BAEE;AAAA,mBAAK/G,QAAQ,CAACE,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAKE;AAAO,QAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAME;AAAQ,QAAA,SAAS,EAAC,cAAlB;AAAiC,QAAA,QAAQ,EAAG2G,CAAD,IAAO9F,aAAa,CAAC8F,CAAC,CAACC,MAAF,CAAShE,KAAV,CAA/D;AAAA,kBACGJ,aAAa,CAAC,CACb;AAACK,UAAAA,IAAI,EAAC,MAAN;AAAcD,UAAAA,KAAK,EAAC;AAApB,SADa,EAEb;AAACC,UAAAA,IAAI,EAAC,OAAN;AAAeD,UAAAA,KAAK,EAAC;AAArB,SAFa,EAGb;AAACC,UAAAA,IAAI,EAAC,MAAN;AAAcD,UAAAA,KAAK,EAAC;AAApB,SAHa,EAIb;AAACC,UAAAA,IAAI,EAAC,KAAN;AAAaD,UAAAA,KAAK,EAAC;AAAnB,SAJa,CAAD;AADhB;AAAA;AAAA;AAAA;AAAA,cANF,EAcG8D,mBAdH,eAgBE;AAAA;AAAA;AAAA;AAAA,cAhBF,eAkBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBF,eAqBE;AAAO,QAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArBF,eAsBE;AAAO,QAAA,SAAS,EAAC,YAAjB;AAA8B,QAAA,IAAI,EAAC,MAAnC;AAA0C,QAAA,KAAK,EAAEpG,UAAU,EAA3D;AAA+D,QAAA,QAAQ,EAAGqG,CAAD,IAAOxF,YAAY,CAACwF,CAAC,CAACC,MAAF,CAAShE,KAAV;AAA5F;AAAA;AAAA;AAAA;AAAA,cAtBF,eAyBE;AAAO,QAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAzBF,eA0BE;AAAO,QAAA,SAAS,EAAC,YAAjB;AAA8B,QAAA,IAAI,EAAC,MAAnC;AAA0C,QAAA,KAAK,EAAE1C,YAAY,EAA7D;AAAiE,QAAA,QAAQ,EAAGyG,CAAD,IAAOtF,UAAU,CAACsF,CAAC,CAACC,MAAF,CAAShE,KAAV;AAA5F;AAAA;AAAA;AAAA;AAAA,cA1BF,eA6BE;AAAO,QAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA7BF,eA8BE;AAAO,QAAA,SAAS,EAAC,YAAjB;AAA8B,QAAA,WAAW,EAAC,GAA1C;AAA8C,QAAA,QAAQ,EAAG+D,CAAD,IAAOpF,UAAU,CAACoF,CAAC,CAACC,MAAF,CAAShE,KAAV;AAAzE;AAAA;AAAA;AAAA;AAAA,cA9BF,eAiCE;AAAO,QAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAjCF,eAkCE;AAAO,QAAA,SAAS,EAAC,YAAjB;AAA8B,QAAA,GAAG,EAAC,GAAlC;AAAsC,QAAA,WAAW,EAAC,OAAlD;AAA0D,QAAA,QAAQ,EAAG+D,CAAD,IAAOlF,iBAAiB,CAACkF,CAAC,CAACC,MAAF,CAAShE,KAAV;AAA5F;AAAA;AAAA;AAAA;AAAA,cAlCF,eAqCE;AAAO,QAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArCF,eAsCE;AAAQ,QAAA,SAAS,EAAC,cAAlB;AAAiC,QAAA,QAAQ,EAAG+D,CAAD,IAAOhF,gBAAgB,CAACgF,CAAC,CAACC,MAAF,CAAShE,KAAV,CAAlE;AAAA,kBACGJ,aAAa,CAAC,CACb;AAACK,UAAAA,IAAI,EAAC,SAAN;AAAiBD,UAAAA,KAAK,EAAC;AAAvB,SADa,EAEb;AAACC,UAAAA,IAAI,EAAC,wBAAN;AAAgCD,UAAAA,KAAK,EAAC;AAAtC,SAFa,EAGb;AAACC,UAAAA,IAAI,EAAC,sBAAN;AAA8BD,UAAAA,KAAK,EAAC;AAApC,SAHa,CAAD;AADhB;AAAA;AAAA;AAAA;AAAA,cAtCF,eA8CE;AAAO,QAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA9CF,eA+CE;AAAO,QAAA,SAAS,EAAC,YAAjB;AAA8B,QAAA,GAAG,EAAC,GAAlC;AAAsC,QAAA,WAAW,EAAC,MAAlD;AAAyD,QAAA,QAAQ,EAAG+D,CAAD,IAAO9E,kBAAkB,CAAC8E,CAAC,CAACC,MAAF,CAAShE,KAAV;AAA5F;AAAA;AAAA;AAAA;AAAA,cA/CF,EAiDGiE,cAjDH,eAoDE;AAAO,QAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApDF,eAqDE;AAAO,QAAA,SAAS,EAAC,cAAjB;AAAgC,QAAA,WAAW,EAAC,GAA5C;AAAgD,QAAA,QAAQ,EAAGF,CAAD,IAAOxE,oBAAoB,CAACwE,CAAC,CAACC,MAAF,CAAShE,KAAV;AAArF;AAAA;AAAA;AAAA;AAAA,cArDF,eAsDE;AAAO,QAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAtDF,eAuDE;AAAA;AAAA;AAAA;AAAA,cAvDF,eA0DE;AAAQ,QAAA,SAAS,EAAC,aAAlB;AAAgC,QAAA,OAAO,EAAE,MAAM6D,QAAQ,EAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA1DF,eA8DE;AAAQ,QAAA,OAAO,EAAE,MAAMrE,cAAc,CAACtC,QAAQ,CAACgH,EAAV,CAArC;AAAoD,QAAA,SAAS,EAAC,kBAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA9DF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAmEE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,sCACoBhH,QAAQ,CAACuC,cAAT,GAAwB,MAAIvC,QAAQ,CAACuC,cAAb,GAA4B,GAApD,GAAwD,EAD5E,eAEE;AAAA,oCAAqB,CAACvC,QAAQ,CAACgE,SAAT,GAAmBhE,QAAQ,CAACgE,SAA5B,GAAsC,CAAvC,EAA0CuC,OAA1C,CAAkD,CAAlD,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,yDAA0C,CAACvG,QAAQ,CAACwG,sBAAT,GAAkC,MAAIxG,QAAQ,CAACwG,sBAA/C,GAAwE,CAAzE,EAA4ED,OAA5E,CAAoF,CAApF,CAA1C;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAA,iDAAkC,CAACvG,QAAQ,CAACyG,qBAAT,GAA+B,MAAIzG,QAAQ,CAACyG,qBAA5C,GAAkE,CAAnE,EAAsEF,OAAtE,CAA8E,CAA9E,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAA,yCAA0BvG,QAAQ,CAACuE,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAME;AAAA,+CAAgC,CAACvE,QAAQ,CAAC0G,OAAT,GAAiB1G,QAAQ,CAAC0G,OAA1B,GAAkC,CAAnC,EAAsCH,OAAtC,CAA8C,CAA9C,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,eAOE;AAAA,4CAA6BvG,QAAQ,CAACsG,UAAT,GAAoB,CAApB,GAAsB,GAAtB,GAA0B,EAAvD,EAA2DtG,QAAQ,CAACsG,UAAT,GAAoBtG,QAAQ,CAACsG,UAA7B,GAAwC,EAAnG;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YAnEF,eAgFE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,gDAEE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,iCACE,QAAC,SAAD;AAAW,YAAA,SAAS,EAAE1F,aAAa,CAACgC,GAAd,CAAkBqE,SAAS,IAAIA,SAA/B;AAAtB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAhFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA6FD,CAxfM;;GAAMlH,Q;;MAAAA,Q","sourcesContent":["import React, {useState, useContext} from 'react';\nimport styled from \"styled-components\";\nimport TradeList from './TradeList';\n\nimport { GlobalContext } from '../context/GlobalState';\n//import { pairs } from 'd3';\n\nconst CSS = styled.div`\n  background: #3d3d4a;\n  color: #898996;\n  display:flex;\n\n  padding: 1%;\n  margin: 0% 0% 1% 0%;\n\n  .settings{\n    padding: 1%;\n    width: 25%;\n    box-shadow: rgba(0, 0, 0, 0.25) 0px 0.0625em 0.0625em, rgba(0, 0, 0, 0.25) 0px 0.125em 0.5em, rgba(255, 255, 255, 0.1) 0px 0px 0px 1px inset;\n  }\n  .results-overview{\n    padding: 0% 1%;\n    width: 15%;\n\n  }\n  .list-of-trades{\n    padding: 0% 1%;\n    width: 60%;\n\n  }\n\n\n  /* Input */\n  .input-flex{\n    display:flex;\n    border: none;\n    border-bottom: 2px solid #6464a3;\n    background: transparent;//#eff1f2;\n    color: #898996;\n    width: 75%;\n    height: 2rem;\n    font-size: 1.3625rem;\n    padding-left: 0.5rem;\n    padding-top: 0.325rem;\n    padding-bottom: 0.325rem;\n    margin-bottom: 0.425rem;\n    \n    &:focus, &:hover{\n      outline: none;\n      color: #373641;\n      background: #dedfe4;\n    }\n    ::placeholder{\n      color: #898996;\n    }\n  }\n\n  .input-inline{\n    display:inline;\n    border: none;\n    border-bottom: 2px solid #6464a3;\n    background: transparent;//#eff1f2;\n    color: #898996;\n    width:10%;\n    height: 2rem;\n    font-size: 1.3625rem;\n    padding-left: 0.5rem;\n    padding-top: 0.325rem;\n    padding-bottom: 0.325rem;\n    margin-bottom: 0.425rem;\n    \n    &:focus, &:hover{\n      outline: none;\n      color: #373641;\n      background: #dedfe4;\n    }\n    ::placeholder{\n      color: #898996;\n    }\n  }\n\n  .input-label{\n    color: #898996;\n    font-size: 1.3625rem;\n  }\n\n  .input-label-sub{\n    color: #898996;\n    font-style: italic;\n    padding-left: 5%;\n    margin-bottom: 2%;\n  }\n\n  .input-select {\n    display:flex;\n    width: 75%;\n    color: #898996;\n    border: none;\n    border-bottom: 2px solid #6464a3;\n    background: transparent;\n    height: 2rem;\n    font-size: 1.3625rem;\n    padding-left: 0.5rem;\n    margin-bottom: 0.425rem;\n\n    &:focus, &:hover{\n      outline: none;\n      color: #373641;\n      background: #dedfe4;\n    }\n  }\n\n  h4{\n    font-size: 210%;\n    border-bottom: 6px solid #898996;\n  }\n\n\n\n  .calc-button {\n    display: block;\n    cursor: pointer;\n    outline: none;\n    border: none;\n    background-color: #dedfe4;\n    width: 30%;\n    height: 5%;\n    border-radius: 30px;\n    font-size: 1.5rem;\n    font-weight: 600;\n    color: white;\n    background-size: 100% 100%;\n    box-shadow: 0 0 0 1px black inset;\n    margin: 1%;\n  }\n  \n  .calc-button:hover {\n    background-image: linear-gradient(\n      145deg,\n      transparent 10%,\n      lightgray 10% 20%,\n      transparent 20% 30%,\n      lightgray 30% 40%,\n      transparent 40% 50%,\n      darkgray 50% 60%,\n      transparent 60% 70%,\n      pink 70% 80%,\n      transparent 80% 90%,\n      blue 90% 100%\n    );\n    animation: background 3s linear infinite;\n  }\n  \n  @keyframes background {\n    0% {\n      background-position: 0 0;\n    }\n    100% {\n      background-position: 400px 0;\n    }\n  }\n\n`;\n\nexport const Backtest = ({ backtest }) => {\n\n  const defaultTimePeriod = () => {\n    switch(backtest.indicator){\n      case 'RSI': return 14;\n      case 'EMA': return 9;\n      case 'SMA': return 9;\n      case 'BB': return 20;\n      default: return 24;\n    }\n  }\n  const defaultBuyStrat = () => {\n    switch(backtest.indicator){\n      case 'RSI': return 30;\n      case 'EMA': return -3;\n      case 'SMA': return -3;\n      case 'BB': return -3;\n      default: return -3;\n    }\n  }\n\n  // Returns today date in YYYY-MM-DD formate\n  const getTodayDate = () => {\n    return new Date().toISOString().slice(0, 10);\n  }\n\n  // Returns 100 years ago today date in YYYY-MM-DD formate\n  const getOldDate = () => {\n    let myDate = new Date(new Date().setFullYear(new Date().getFullYear() - 100));\n    return myDate.toISOString().slice(0, 10);\n  }\n  \n\n  const [tradeListData, setTradeListData] = useState([]);\n\n  const [seriesType, setSeriesType] = useState('1. open');\n  const [timePeriod, setTimePeriod] = useState(defaultTimePeriod());\n  const [stdDeviation, setStdDeviation] = useState(2);\n  const [startDate, setStartDate] = useState(getOldDate());\n  const [endDate, setEndDate] = useState(getTodayDate());\n\n  const [maxBags, setMaxBags] = useState(5);\n  const [initalBalance, setInitialBalance] = useState(10000);\n  const [initalBuyType, setInitalBuyType] = useState('usd');\n  const [initalBuyAmount, setInitalBuyAmount] = useState(1500);\n  const [buyStrategyValue, setBuyStrategyValue] = useState(defaultBuyStrat());\n  const [buyStrategyType, setBuyStrategyType] = useState('Real Middle Band'); // Used for Bollinger upper/middle/lower\n  const [sellStrategyValue, setSellStrategyValue] = useState(1);\n\n  const { deleteBacktest, current_symbol, cache_TSDA, cache_TSDA_function } = useContext(GlobalContext);\n\n  // Used for JSX dropdown items\n  const dropdownItems = (items) => {\n    return items.map(item => <option value={item.value} key={item.name}>{item.name}</option>);\n  }\n\n  // Calculates USD value for creating a bag\n  function calcInitalBuy(buyType, buyAmount, currentBalance, curStockPrice) {\n    switch(buyType){\n      case \"numStocks\":\n        return curStockPrice*buyAmount;\n      case \"percent\":\n        return currentBalance * (buyAmount/100.00);\n      default:\n        // case \"usd\":\n        return buyAmount;\n\n    }\n  }\n\n  // Function to return true/false for buy condition, given price and indicator values\n  function isBuyConditionMet(buyStrategyValue, curStockPrice, curIndicatorValue) {\n    switch(backtest.indicator){\n      case \"RSI\":\n        return curIndicatorValue < buyStrategyValue;\n      default:\n        // case EMA, SMA, BB (all cases where indicator is a price of stock)\n        return curStockPrice <= (curIndicatorValue * ((100.0 + buyStrategyValue)/100.0))\n    }\n  }\n\n  // Returns JSON name of element for indicator item\n  function getIndicatorJSON() {\n    switch(backtest.indicator){\n      case \"BBANDS\":\n        return buyStrategyType;\n      default:\n        return backtest.indicator;\n\n    }\n  }\n\n  // Finalizes trade, storing buy/sell data into backtest.tradeListData\n  function finalizeTrade(myBag, buyDate, sellDate, candleCountSell, sellPrice, curIndicatorValue, numShares) {\n    const percentChange = (sellPrice/myBag[\"buy-price\"]);\n    const profitUSD = +(percentChange-1)*myBag[\"volume-USD\"];\n    const candleLength = +candleCountSell-myBag[\"candle-count-buy\"];\n    \n    // Push on individual trade data\n    (backtest.tradeListData).push({\n      buyDate,\n      sellDate,\n      buyPrice: myBag[\"buy-price\"],\n      sellPrice,\n      numShares,\n      profitPercent: +percentChange-1,\n      profitUSD,\n      candleLength,\n      indicatorAtSell: curIndicatorValue,\n      indicatorAtBuy: myBag[\"indicator-at-buy\"]\n    });\n\n    // Update results Overview data\n    backtest.numTrades++;\n    backtest.profitUSD += profitUSD;\n    backtest.netBars += candleLength;\n    backtest.netSellVolume += sellPrice * numShares;\n\n    //console.log(\"finalizeTrade called, % change:\", percentChange, buyDate, sellDate);\n  }\n\n  // Runs user specified backtest algorithms and prepares outputs/trades to display\n  async function runBacktests(paperAPICall, pairSettings) {\n    let stockPriceData;\n    let stockIndicatorData;\n    let response;\n\n    // Ensure user has selected a stock\n    if(!current_symbol){\n      alert(\"Please select a stock to test your strategy on.\");\n      return;\n    }\n    \n    // Ensure API json for cache_TSDA exists\n    if(!cache_TSDA['Meta Data']){\n      response = await fetch(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${current_symbol}&outputsize=full&apikey=CQ5JZQYM4DG0OODA`);\n      stockPriceData = await response.json();\n      cache_TSDA_function(stockPriceData);\n\n      // Stop if MAX API\n      if(stockPriceData.Note) return;\n    }else{\n      stockPriceData = cache_TSDA;\n    }\n\n    // Make API call for stockIndicatorData\n    let optionalParameters;\n    switch(backtest.indicator){\n      case 'BBANDS':\n        optionalParameters = `&nbdevup=${pairSettings.stdDeviation}&nbdevdn=${pairSettings.stdDeviation}`;\n        break;\n      default:\n        optionalParameters = '';\n    }\n    response = await fetch(`https://www.alphavantage.co/query?function=${backtest.indicator}&symbol=${current_symbol}&interval=daily&time_period=${paperAPICall.timePeriod}&series_type=${paperAPICall.seriesType}${optionalParameters}&apikey=CQ5JZQYM4DG0OODA`);\n    stockIndicatorData = await response.json();\n    // Catches MAX API\n    if(stockIndicatorData.Note){\n      alert(\"MAX API CALLS. Please wait a minute for more. Thank you for visitng my project! However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n      return;\n    }\n\n    // Initalize bags/candle-count/currentBalance\n    let candleCount = 0;\n    let bagList = {};\n    bagList.length = 0;\n    let currentBalance = pairSettings.initalBalance;\n    let startDateReached = false;\n    // Initalize single integer to know lowest price I consider selling at(updated when new bags are added)\n    let lowestSellPrice = 0;\n    // Main loop that runs the paper trading bot algo, maintains bags/buys/sells/etc throughout 5 years (1265 trading days)\n    // Note: in the following for loop: key == date\n    for(let [key] of Object.entries(stockIndicatorData[`Technical Analysis: ${backtest.indicator}`]).reverse()){\n      // Enables iterator code to run once start date reached/passed\n      if(key>=startDate){\n        startDateReached = true;\n      }\n      // Skips iterator because start date not reached\n      if(startDateReached === false){\n        continue;\n      }else if(key===endDate){\n        // End date reached... so stop iterating.\n        break;\n      }\n\n      // Count Candles interated over\n      candleCount++;\n      \n      // Skip days where no price exists\n      if(!stockPriceData[\"Time Series (Daily)\"][`${key}`]) continue;\n      // Essential values for iterating stock data\n      let curIndicatorValue = +stockIndicatorData[`Technical Analysis: ${backtest.indicator}`][`${key}`][`${getIndicatorJSON()}`];\n      let curStockPrice = +stockPriceData[\"Time Series (Daily)\"][`${key}`][`${paperAPICall.seriesType}`];\n\n      // First price of start date\n      if(!backtest.startPrice){\n        backtest.startPrice = curStockPrice;\n      }\n      // Maintain oldest price\n      backtest.endPrice = curStockPrice;    \n\n      // Prospective USD to create a new bag\n      const newBagVolume = calcInitalBuy(pairSettings.initalBuyType, pairSettings.initalBuyAmount, currentBalance, curStockPrice);\n\n      // If Buy condition: Bags open, balance sufficient, price meets indicator limit\n      if(bagList.length<pairSettings.maxBags && newBagVolume <= currentBalance && isBuyConditionMet(pairSettings.buyStrategyValue, curStockPrice, curIndicatorValue)){\n        // Create and add bag to bagList, increment bagList.length. Automatically added by creating key.\n        bagList.length++;\n        console.log(\"bag added\");\n        bagList[`${key}`] = {\n          \"sell-price-limit\": +(1+(pairSettings.sellStrategyValue/100)) * curStockPrice,\n          \"buy-price\": +curStockPrice,\n          \"candle-count-buy\": +candleCount,\n          \"volume-USD\": +newBagVolume,\n          \"num-shares\": +newBagVolume/curStockPrice,\n          \"indicator-at-buy\": curIndicatorValue\n        }\n\n        // Update currentBalance\n        currentBalance -= bagList[`${key}`][\"volume-USD\"];\n\n        // Update lowestSellPrice, min of current lowest, or new buy price is lower. Initialize if only 1 bag.\n        if(bagList.length===1){\n          lowestSellPrice = +bagList[`${key}`][\"sell-price-limit\"];\n        }else{\n          lowestSellPrice = Math.min(lowestSellPrice, bagList[`${key}`][\"sell-price-limit\"]);\n        }\n      // Else If Sell Condition\n      }else if(curStockPrice>= lowestSellPrice && bagList.length>0){\n        // Store key of buy date(below loop has new key in smaller scope)\n        let sellDate = key;\n        for(let [key] of Object.entries(bagList)){ \n          if(curStockPrice >= bagList[`${key}`][\"sell-price-limit\"]){\n            // Finalize Trade function records trade data into backtest to display in JSX below\n            finalizeTrade(bagList[`${key}`], key, sellDate, candleCount, curStockPrice, curIndicatorValue, bagList[`${key}`][\"num-shares\"], bagList[`${key}`][\"indicator-at-buy\"]);\n            delete bagList[`${key}`];\n            bagList.length--;\n          }\n        }\n\n        // If bags exist, update to new lowest price\n        const newBagListKeys = Object.entries(bagList);\n        if(newBagListKeys[0][1]>0){\n          lowestSellPrice = bagList[newBagListKeys[1][0]][\"sell-price-limit\"];\n          for(let [key] of newBagListKeys){ \n            lowestSellPrice = Math.min(lowestSellPrice, +bagList[`${key}`][\"sell-price-limit\"]);\n          }\n        }\n      }\n      // End of Buy/Sell conditions\n    }\n    \n    console.log(\"iterating done\", backtest, startDate, endDate, backtest.holdReturn);\n    // Iterating complete, finalize some data on compelted backtest algorithm\n    backtest.holdReturn = (((backtest.endPrice / backtest.startPrice)-1) * 100).toFixed(2);\n    console.log(\"set holdret\", backtest.holdReturn, \"end/start\", backtest.endPrice, backtest.startPrice);\n    delete backtest.startPrice;\n    backtest.profitPercentOnBalance = backtest.profitUSD / pairSettings.initalBalance;\n    backtest.profitPercentOnTrades = backtest.profitUSD / (backtest.netSellVolume - backtest.profitUSD);\n    backtest.avgBars = backtest.netBars / backtest.numTrades;\n    \n    // Update results display and sends tradeListData to TradeList.js in JSX below\n    setTradeListData(backtest.tradeListData);\n  }\n\n  const onSubmit = () => {\n    backtest.current_symbol = current_symbol;\n\n    const paperAPICall = { \n      // Relavent variables that are global: current_symbol, interval(daily), backtest.indicator(ex, RSI)\n      seriesType: seriesType,\n      timePeriod: +timePeriod,\n      stdDeviation: +stdDeviation\n    };\n\n    const pairSettings = {\n      maxBags: +maxBags,\n      initalBalance: +initalBalance,\n      initalBuyType: initalBuyType,\n      initalBuyAmount: +initalBuyAmount,\n      buyStrategyValue: +buyStrategyValue,\n      buyStrategyType, // used for Bollinger upper/middle/lower\n      sellStrategyValue: +sellStrategyValue\n    }\n\n    // Ensure no trivial strategies are submitted\n    if(pairSettings.maxBags<1 || pairSettings.initalBalance<1 || pairSettings.initalBuyAmount<1 || pairSettings.sellStrategyValue<0 || paperAPICall.timePeriod<1){\n      // Bags, balance, timeperiod, buy amount, sell gain% must be positive\n      alert(\"Please enter valid inputs. Use positive integers for the following: Max bags, Sell percentage, Time period, Buy amount, Inital Balance.\");\n    }else if(pairSettings.initalBuyType==='percent' && (pairSettings.initalBuyAmount<1 || pairSettings.initalBuyAmount>100)){\n      // if(buy type is percent) buy amount must be (0-100]\n      alert(\"Buy amount percentage must be 1-100%\");\n    }else if (pairSettings.initalBuyAmount>pairSettings.initalBalance){\n      // inital buy must be < inital balance\n      alert(\"Inital buys must be less than or equal to inital balance.\");\n    }else if(backtest.indicator==='RSI' && (pairSettings.buyStrategyValue<1 || pairSettings.buyStrategyValue>99)){\n      // Ensure no trivial strategy specific settings are submitted <connect to previous if chain thing>\n      alert(\"RSI values must be between 1-99\");\n    }else if(backtest.indicator==='BBANDS' && paperAPICall.stdDeviation<0.5){\n      // Ensure no trivial BB std deviation\n      alert(\"Standard Deviation must be greater than or equal to 0.5.\");\n    }else{\n      // Calculation inputs valid\n      console.log(pairSettings);\n\n      // Initialize Trade List Data(for final results)\n      backtest.tradeListData = [];\n      backtest.profitUSD = 0;\n      backtest.numTrades = 0;\n      backtest.netBars = 0;\n      backtest.netSellVolume = 0; // Net volume USD sold\n\n      // Run backtest algorithm\n      runBacktests(paperAPICall, pairSettings);\n    }\n\n  }\n\n  let indicatorSettingDOM = null;\n  switch(backtest.indicator){\n    case 'RSI':\n      indicatorSettingDOM = (<> \n        {/* Time Period(# candles in calc) */}\n          <label className=\"input-label\" >Time Period:</label>\n          <input className=\"input-flex\" placeholder='14' onChange={(e) => setTimePeriod(e.target.value)} />\n      </>);\n      break;\n    case 'EMA':\n      indicatorSettingDOM = (<> \n        {/* Time Period(# candles in calc) */}\n        <label className=\"input-label\">Time Period: </label>\n        <input className=\"input-flex\" placeholder=\"9\" onChange={(e) => setTimePeriod(e.target.value)} />\n      </>);\n      break;\n    case 'SMA':\n      indicatorSettingDOM = (<> \n        {/* Time Period(# candles in calc) */}\n        <label className=\"input-label\">Time Period:</label>\n        <input className=\"input-flex\" placeholder=\"9\" onChange={(e) => setTimePeriod(e.target.value)} />\n      </>);\n      break;\n    case 'BBANDS':\n      indicatorSettingDOM = (<> \n        {/* Time Period(# candles in calc) */}\n        <label className=\"input-label\">Time Period: </label>\n        <input className=\"input-flex\" placeholder=\"20\" onChange={(e) => setTimePeriod(e.target.value)} />\n\n        {/* Standard deviation for both top/bot lines */}\n        <label className=\"input-label\">Standard Deviation for upper/lower lines:</label>\n        <input className=\"input-flex\" placeholder=\"2\" onChange={(e) => setStdDeviation(e.target.value)} />\n      </>);\n      break;\n    default:\n      indicatorSettingDOM = (<div>Default backtest indicator DOM</div>);\n    \n  }\n\n  let buyStrategyDOM = null;\n  switch(backtest.indicator){\n    case 'RSI':\n      buyStrategyDOM = (<> \n        {/* Buy Strategy RSI */}\n        <label className=\"input-label\">Buy when RSI less than</label>\n        <input className=\"input-inline\" placeholder='30' onChange={(e) => setBuyStrategyValue(e.target.value)} />\n        <br/>\n      </>);\n      break;\n    case 'EMA':\n      buyStrategyDOM = (<> \n        {/* Buy strategy % away */}\n        <label className=\"input-label\">Buy at price</label>\n        <input className=\"input-inline\" placeholder=\"-3\" onChange={(e) => setBuyStrategyValue(e.target.value)}/>\n        <label className=\"input-label\">% away from the EMA line. </label>\n        <label className=\"input-label-sub\">(3 = 3% above, -3 = 3% below)</label>\n        <br/>\n      </>);\n      break;\n    case 'SMA':\n      buyStrategyDOM = (<> \n        {/* Buy strategy % away */}\n        <label className=\"input-label\">Buy at price</label>\n        <input className=\"input-inline\" placeholder=\"-3\" onChange={(e) => setBuyStrategyValue(e.target.value)}/>\n        <label className=\"input-label\">% away from the SMA line. </label>\n        <label className=\"input-label-sub\">(3 = 3% above, -3 = 3% below)</label>\n        <br/>\n      </>);\n      break;\n    case 'BBANDS':\n      buyStrategyDOM = (<> \n        {/* Buy strategy % away (BB) */}\n        <label className=\"input-label\">Band to follow:</label>\n        <select className=\"input-select\" onChange={(e) => setBuyStrategyType(e.target.value)}>\n          {dropdownItems([\n            {name:'Middle', value:'Real Middle Band'},\n            {name:'Upper', value:'Real Upper Band'},\n            {name:'Lower', value:'Real Lower Band'}\n          ])}\n        </select>\n        \n        <label className=\"input-label\">Buy at price</label>\n        <input className=\"input-inline\" placeholder=\"-3\" onChange={(e) => setBuyStrategyValue(e.target.value)}/>\n        <label className=\"input-label\">% away from the selected line. </label>\n        <label className=\"input-label-sub\">(3 = 3% above, -3 = 3% below)</label>\n        <br/>\n      </>);\n      break;\n    default:\n      buyStrategyDOM = (<div>buy strat dom default</div>);\n    \n  }\n\n  return (\n    <CSS>\n      <div className='settings'>\n        {/* Beginning of Settings */}\n        <h4>{backtest.indicator} Settings</h4>\n\n        {/* series type */}\n        <label className=\"input-label\">Select Series Type:</label>\n        <select className=\"input-select\" onChange={(e) => setSeriesType(e.target.value)}>\n          {dropdownItems([\n            {name:'open', value:'1. open'},\n            {name:'close', value:'4. close'},\n            {name:'high', value:'2. high'},\n            {name:'low', value:'3. low'}])}\n        </select>\n        \n        {indicatorSettingDOM}\n\n        <br/>\n\n        <h4>Trading Strategy Settings</h4>\n\n        {/* Begin date for backtest */}\n        <label className=\"input-label\">Start Date:</label>\n        <input className=\"input-flex\" type=\"date\" value={getOldDate()} onChange={(e) => setStartDate(e.target.value)} />\n\n        {/* End date for backtest */}\n        <label className=\"input-label\">End Date:</label>\n        <input className=\"input-flex\" type=\"date\" value={getTodayDate()} onChange={(e) => setEndDate(e.target.value)} />\n              \n        {/* Max number bags */}\n        <label className=\"input-label\">Max number of bags:</label>\n        <input className=\"input-flex\" placeholder=\"5\" onChange={(e) => setMaxBags(e.target.value)} />\n\n        {/* Inital balance */}\n        <label className=\"input-label\">Inital balance (USD):</label>\n        <input className=\"input-flex\" min=\"0\" placeholder=\"10000\" onChange={(e) => setInitialBalance(e.target.value)} />\n\n        {/* Inital buy (type/amount) */}\n        <label className=\"input-label\">Inital buy type:</label>\n        <select className=\"input-select\" onChange={(e) => setInitalBuyType(e.target.value)}>\n          {dropdownItems([\n            {name:'($) USD', value:'usd'},\n            {name:'(%) Percent of Balance', value:'percent'},\n            {name:'(#) Number of Stocks', value:'numStocks'}\n          ])}\n        </select>\n\n        <label className=\"input-label\">Inital buy amount:</label>\n        <input className=\"input-flex\" min=\"0\" placeholder=\"1500\" onChange={(e) => setInitalBuyAmount(e.target.value)} />\n\n        {buyStrategyDOM}\n\n        {/* Sell Strategy */}\n        <label className=\"input-label\">Sell bags at</label>\n        <input className=\"input-inline\" placeholder=\"1\" onChange={(e) => setSellStrategyValue(e.target.value)} />\n        <label className=\"input-label\">% profit.</label>\n        <br/>\n\n        {/* submit button */}\n        <button className=\"calc-button\" onClick={() => onSubmit()}>Calculate</button>\n\n\n        {/* close button */}\n        <button onClick={() => deleteBacktest(backtest.id)} className=\"btn-primary w-25\">x</button>\n      </div>\n      {/* end of settings, beginning of results overview */}\n\n      <div className='results-overview'>\n        Results overview {backtest.current_symbol?\"(\"+backtest.current_symbol+\")\":\"\"}\n        <label>Profit USD: ${(backtest.profitUSD?backtest.profitUSD:0).toFixed(2)}</label>\n        <label>Profit Percent on Entire Balance: {(backtest.profitPercentOnBalance ? 100*backtest.profitPercentOnBalance : 0).toFixed(2)}%</label>\n        <label>Average profit per trade: {(backtest.profitPercentOnTrades?100*backtest.profitPercentOnTrades:0).toFixed(2)}%</label>\n        <label>Number of trades: {backtest.numTrades}</label>\n        <label>Average bars per trade: {(backtest.avgBars?backtest.avgBars:0).toFixed(2)}</label>\n        <label>Buy and hold return: {backtest.holdReturn>0?\"+\":\"\"}{backtest.holdReturn?backtest.holdReturn:\"\"}%</label>\n\n      </div>\n      \n      {/* End of results overview, begin list of trades */}\n\n      <div className='list-of-trades'>\n        List of trades\n        <div className=\"message_wrap\">\n          <div className=\"message_box\">\n            <TradeList tradeList={tradeListData.map(tradeData => tradeData)}/>\n          </div>\n        </div>\n      </div>\n      \n      {/* End list of trades */}\n    </CSS>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}