{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/benjaminshiao/Desktop/react/trade-analyzer/src/components/GraphSection.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport * as d3 from \"d3\";\nimport Chart from \"./chart-components/Chart\";\nimport { GlobalContext } from '../context/GlobalState';\nimport \"../chart.css\";\nexport const GraphSection = () => {\n  _s();\n\n  //grab global variables/functions to call in this file\n  const {\n    graphData_AV_API\n  } = useContext(GlobalContext);\n  const chart_width = window.screen.availWidth * 2 / 3;\n  const chart_height = window.screen.availHeight * 2 / 3; // Processes API call and sends data to candlestick chart.\n\n  const processGraphData = () => {\n    if (!graphData_AV_API.Note) {\n      let split_ratio = 1.0; //these two arrays are sus\n\n      let xAxis_times = [];\n      let graphDataProcessed = [];\n      let i = 0; // Iterate/translate API call to fit my charts inputs\n\n      for (let myDate in graphData_AV_API['Time Series (Daily)']) {\n        xAxis_times.push(myDate);\n        graphDataProcessed.push({\n          \"time\": i,\n          \"open\": +graphData_AV_API['Time Series (Daily)'][myDate]['1. open'] / split_ratio,\n          \"close\": +graphData_AV_API['Time Series (Daily)'][myDate]['4. close'] / split_ratio,\n          \"high\": +graphData_AV_API['Time Series (Daily)'][myDate]['2. high'] / split_ratio,\n          \"low\": +graphData_AV_API['Time Series (Daily)'][myDate]['3. low'] / split_ratio,\n          \"volume\": +graphData_AV_API['Time Series (Daily)'][myDate]['6. volume']\n        });\n        split_ratio *= +graphData_AV_API['Time Series (Daily)'][myDate]['8. split coefficient'];\n        i++;\n      }\n\n      graphDataProcessed.reverse();\n      return graphDataProcessed;\n    } else {\n      return [];\n    }\n  }; // Only for intialization: maybe make it display SPY as default\n\n\n  const [data, setData] = useState(() => processGraphData()); // Whenever graphData_AV_API is changed, code below will update graph\n\n  useEffect(() => {\n    setData(processGraphData());\n  }, [graphData_AV_API]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Chart, {\n      data: data,\n      width: chart_width,\n      height: chart_height\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(GraphSection, \"uzK1rcds85gsb1OC+Jd/KbGYYgA=\");\n\n_c = GraphSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"GraphSection\");","map":{"version":3,"sources":["/Users/benjaminshiao/Desktop/react/trade-analyzer/src/components/GraphSection.js"],"names":["React","useContext","useEffect","useState","d3","Chart","GlobalContext","GraphSection","graphData_AV_API","chart_width","window","screen","availWidth","chart_height","availHeight","processGraphData","Note","split_ratio","xAxis_times","graphDataProcessed","i","myDate","push","reverse","data","setData"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AAEA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAO,cAAP;AAGA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAChC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAuBP,UAAU,CAACK,aAAD,CAAvC;AAEA,QAAMG,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAcC,UAAd,GAAyB,CAAzB,GAA2B,CAA/C;AACA,QAAMC,YAAY,GAAGH,MAAM,CAACC,MAAP,CAAcG,WAAd,GAA0B,CAA1B,GAA4B,CAAjD,CALgC,CAOhC;;AACA,QAAMC,gBAAgB,GAAG,MAAM;AAC7B,QAAG,CAACP,gBAAgB,CAACQ,IAArB,EAA0B;AACxB,UAAIC,WAAW,GAAG,GAAlB,CADwB,CAGxB;;AACA,UAAIC,WAAW,GAAG,EAAlB;AACA,UAAIC,kBAAkB,GAAG,EAAzB;AAEA,UAAIC,CAAC,GAAG,CAAR,CAPwB,CAQxB;;AACA,WAAI,IAAIC,MAAR,IAAkBb,gBAAgB,CAAC,qBAAD,CAAlC,EAA0D;AACxDU,QAAAA,WAAW,CAACI,IAAZ,CAAiBD,MAAjB;AACAF,QAAAA,kBAAkB,CAACG,IAAnB,CAAwB;AACtB,kBAAQF,CADc;AAEtB,kBAAQ,CAACZ,gBAAgB,CAAC,qBAAD,CAAhB,CAAwCa,MAAxC,EAAgD,SAAhD,CAAD,GAA4DJ,WAF9C;AAGtB,mBAAS,CAACT,gBAAgB,CAAC,qBAAD,CAAhB,CAAwCa,MAAxC,EAAgD,UAAhD,CAAD,GAA6DJ,WAHhD;AAItB,kBAAQ,CAACT,gBAAgB,CAAC,qBAAD,CAAhB,CAAwCa,MAAxC,EAAgD,SAAhD,CAAD,GAA4DJ,WAJ9C;AAKtB,iBAAO,CAACT,gBAAgB,CAAC,qBAAD,CAAhB,CAAwCa,MAAxC,EAAgD,QAAhD,CAAD,GAA2DJ,WAL5C;AAMtB,oBAAU,CAACT,gBAAgB,CAAC,qBAAD,CAAhB,CAAwCa,MAAxC,EAAgD,WAAhD;AANW,SAAxB;AAQAJ,QAAAA,WAAW,IAAI,CAACT,gBAAgB,CAAC,qBAAD,CAAhB,CAAwCa,MAAxC,EAAgD,sBAAhD,CAAhB;AACAD,QAAAA,CAAC;AACF;;AACDD,MAAAA,kBAAkB,CAACI,OAAnB;AACA,aAAOJ,kBAAP;AACD,KAxBD,MAwBK;AAEH,aAAO,EAAP;AACD;AACF,GA7BD,CARgC,CAuChC;;;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBtB,QAAQ,CAAC,MAAMY,gBAAgB,EAAvB,CAAhC,CAxCgC,CAyChC;;AACAb,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,OAAO,CAACV,gBAAgB,EAAjB,CAAP;AACD,GAFQ,EAEN,CAACP,gBAAD,CAFM,CAAT;AAKA,sBACE;AAAA,2BACE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAEgB,IAAb;AAAmB,MAAA,KAAK,EAAEf,WAA1B;AAAuC,MAAA,MAAM,EAAEI;AAA/C;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD,CApDM;;GAAMN,Y;;KAAAA,Y","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport * as d3 from \"d3\";\nimport Chart from \"./chart-components/Chart\";\n\nimport { GlobalContext } from '../context/GlobalState';\nimport \"../chart.css\";\n\n\nexport const GraphSection = () => {\n  //grab global variables/functions to call in this file\n  const { graphData_AV_API } = useContext(GlobalContext);\n  \n  const chart_width = window.screen.availWidth*2/3;\n  const chart_height = window.screen.availHeight*2/3;\n\n  // Processes API call and sends data to candlestick chart.\n  const processGraphData = () => {\n    if(!graphData_AV_API.Note){\n      let split_ratio = 1.0;\n\n      //these two arrays are sus\n      let xAxis_times = [];\n      let graphDataProcessed = [];\n\n      let i = 0\n      // Iterate/translate API call to fit my charts inputs\n      for(let myDate in graphData_AV_API['Time Series (Daily)']){\n        xAxis_times.push(myDate);\n        graphDataProcessed.push({\n          \"time\": i,\n          \"open\": +graphData_AV_API['Time Series (Daily)'][myDate]['1. open']/split_ratio,\n          \"close\": +graphData_AV_API['Time Series (Daily)'][myDate]['4. close']/split_ratio,\n          \"high\": +graphData_AV_API['Time Series (Daily)'][myDate]['2. high']/split_ratio,\n          \"low\": +graphData_AV_API['Time Series (Daily)'][myDate]['3. low']/split_ratio,\n          \"volume\": +graphData_AV_API['Time Series (Daily)'][myDate]['6. volume']\n        });\n        split_ratio *= +graphData_AV_API['Time Series (Daily)'][myDate]['8. split coefficient'];\n        i++;\n      }\n      graphDataProcessed.reverse();\n      return graphDataProcessed;\n    }else{\n      \n      return [];\n    }\n  };\n  \n  // Only for intialization: maybe make it display SPY as default\n  const [data, setData] = useState(() => processGraphData());\n  // Whenever graphData_AV_API is changed, code below will update graph\n  useEffect(() => {\n    setData(processGraphData());\n  }, [graphData_AV_API]);\n\n\n  return (\n    <>\n      <Chart data={data} width={chart_width} height={chart_height} />\n    </>\n  )\n}\n\n\n"]},"metadata":{},"sourceType":"module"}