{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/benjaminshiao/Desktop/react/trade-analyzer/src/context/GlobalState.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer'; // Initial state\n\nconst initialState = {\n  backtests: [],\n  // starter code thing, can delete later\n  symbol_list: [],\n  // user input search results (1 API call)\n  graphData_AV_API: {},\n  // graphs historical stock data (1 API call)\n  current_symbol: '',\n  // current stock symbol being graphed\n  graph_type: '',\n  // tracks graph type for graphSection.js to know to add proper amount of candles to chart\n  cache_TSDA: {},\n  // cache AV_API for time series daily adjusted until user changes stock view(prevents unnecssary API calls)\n  cache_TS15min: {},\n  // cache AV_API for time series 15 min until user changes stock view(prevents unnecssary API calls)\n  cache_TS60min: {} // cache AV_API for time series 60 min until user changes stock view(prevents unnecssary API calls)\n\n}; // Create context\n\nexport const GlobalContext = /*#__PURE__*/createContext(initialState); // Provider component\n\nexport const GlobalProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(AppReducer, initialState); // Actions\n\n  function deleteBacktest(id) {\n    dispatch({\n      type: 'DELETE_BACKTEST',\n      payload: id\n    });\n  }\n\n  function addBacktest(backtest) {\n    dispatch({\n      type: 'ADD_BACKTEST',\n      payload: backtest\n    });\n  } // Updates search results from API when user searches for a stock\n\n\n  async function stockSearch(searchInput) {\n    //API call for searching stock tickers\n    let response = await fetch(`https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${searchInput.text}&apikey=CQ5JZQYM4DG0OODA`);\n    let data = await response.json(); //create temp list\n\n    let new_symbol_list = []; // If API limit: alerts, maintains current results(if any)\n    // Else: updates search results display properly\n\n    if (data.Note) {\n      alert(\"MAX API CALLS. Please wait a minute for more. Thank you for visitng my project! However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\"); // Maintains current search results\n\n      dispatch({\n        type: 'MAX_API',\n        payload: new_symbol_list\n      });\n    } else {\n      //iterate over all search results\n      Object.keys(data.bestMatches).forEach(e => {\n        //filter non-US stocks, then add\n        if (data.bestMatches[e][\"4. region\"] === \"United States\") {\n          let new_symbol = {\n            symbol: data.bestMatches[e][\"1. symbol\"],\n            name: data.bestMatches[e][\"2. name\"]\n          };\n          new_symbol_list = [new_symbol, ...new_symbol_list];\n        }\n      });\n      new_symbol_list.reverse(); //update state of web app (official symbol_list)\n\n      dispatch({\n        type: 'STOCK_SEARCH',\n        payload: new_symbol_list\n      });\n    }\n  } // Graphs API data based on user selected stock symbol\n\n\n  async function graphSymbol(selectedSymbol, graphType, doClearCache) {\n    // Clear cache for new symbol search\n    if (doClearCache) {\n      state.cache_TSDA = {};\n      state.cache_TS15min = {};\n      state.cache_TS60min = {};\n    } // Specific API call parameters\n\n\n    let function_API;\n    let outputSize;\n    let interval_API = '';\n    let cache_exists = false;\n    let data;\n    let response;\n\n    switch (graphType) {\n      case 'day':\n        if (state.cache_TS15min['Time Series (15min)']) {\n          cache_exists = true;\n          data = state.cache_TS15min;\n        } else {\n          function_API = 'TIME_SERIES_INTRADAY';\n          interval_API = '&interval=15min';\n          outputSize = 'compact';\n        }\n\n        break;\n\n      case 'week':\n        if (state.cache_TS60min['Time Series (60min)']) {\n          cache_exists = true;\n          data = state.cache_TS60min;\n        } else {\n          function_API = 'TIME_SERIES_INTRADAY';\n          interval_API = '&interval=60min';\n          outputSize = 'compact';\n        }\n\n        break;\n      // case 'month':\n      //     function_API = 'TIME_SERIES_DAILY_ADJUSTED';\n      //     outputSize = 'compact';\n      //     break;\n      // case 'quarter':\n      //     function_API = 'TIME_SERIES_DAILY_ADJUSTED';\n      //     outputSize = 'compact';\n      //     break;\n      // case 'year':\n      //     function_API = 'TIME_SERIES_DAILY_ADJUSTED';\n      //     outputSize = 'full';\n      //     break;\n\n      default:\n        if (state.cache_TSDA['Time Series (Daily)']) {\n          cache_exists = true;\n          data = state.cache_TSDA;\n        } else {\n          function_API = 'TIME_SERIES_DAILY_ADJUSTED';\n          outputSize = 'full';\n        }\n\n    }\n\n    if (!cache_exists) {\n      response = await fetch(`https://www.alphavantage.co/query?function=${function_API}&symbol=${selectedSymbol}${interval_API}&outputsize=${outputSize}&apikey=CQ5JZQYM4DG0OODA`);\n      data = await response.json();\n    } // If API limit: Alerts API limit reached, maintains current payload(stock data)\n    // Else: update current payload\n\n\n    if (data.Note) {\n      alert(\"MAX API CALLS. Please wait a minute for more. Thank you for visitng my project! However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n      dispatch({\n        type: 'MAX_API',\n        payload: [graphType, data]\n      });\n    } else if (data['Error Message']) {\n      alert(\"ERROR. This stock does not have valid data in the Alpha Vantage database.\");\n      dispatch({\n        type: 'MAX_API',\n        payload: [graphType, data]\n      });\n    } else {\n      dispatch({\n        type: 'DISPLAY_GRAPHS',\n        payload: [graphType, data]\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      backtests: state.backtests,\n      symbol_list: state.symbol_list,\n      graphData_AV_API: state.graphData_AV_API,\n      current_symbol: state.current_symbol,\n      cache_TSDA: state.cache_TSDA,\n      cache_TS15min: state.cache_TS15min,\n      cache_TS60min: state.cache_TS60min,\n      graph_type: state.graph_type,\n      deleteBacktest,\n      addBacktest,\n      stockSearch,\n      graphSymbol\n    },\n    children: [children, /*#__PURE__*/_jsxDEV(\"script\", {\n      src: \"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js\",\n      integrity: \"sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW\",\n      crossOrigin: \"anonymous\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 13\n  }, this);\n};\n\n_s(GlobalProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = GlobalProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"sources":["/Users/benjaminshiao/Desktop/react/trade-analyzer/src/context/GlobalState.js"],"names":["React","createContext","useReducer","AppReducer","initialState","backtests","symbol_list","graphData_AV_API","current_symbol","graph_type","cache_TSDA","cache_TS15min","cache_TS60min","GlobalContext","GlobalProvider","children","state","dispatch","deleteBacktest","id","type","payload","addBacktest","backtest","stockSearch","searchInput","response","fetch","text","data","json","new_symbol_list","Note","alert","Object","keys","bestMatches","forEach","e","new_symbol","symbol","name","reverse","graphSymbol","selectedSymbol","graphType","doClearCache","function_API","outputSize","interval_API","cache_exists"],"mappings":"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","sourcesContent":["import React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer';\n\n// Initial state\nconst initialState = {\n    backtests: [],     // starter code thing, can delete later\n  symbol_list: [],      // user input search results (1 API call)\n  graphData_AV_API: {}, // graphs historical stock data (1 API call)\n  current_symbol: '',   // current stock symbol being graphed\n  graph_type: '',       // tracks graph type for graphSection.js to know to add proper amount of candles to chart\n  cache_TSDA: {},        // cache AV_API for time series daily adjusted until user changes stock view(prevents unnecssary API calls)\n  cache_TS15min: {},        // cache AV_API for time series 15 min until user changes stock view(prevents unnecssary API calls)\n  cache_TS60min: {}        // cache AV_API for time series 60 min until user changes stock view(prevents unnecssary API calls)\n}\n\n// Create context\nexport const GlobalContext = createContext(initialState);\n\n// Provider component\nexport const GlobalProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(AppReducer, initialState);\n\n    // Actions\n    function deleteBacktest(id) {\n        dispatch({\n        type: 'DELETE_BACKTEST',\n        payload: id\n        });\n    }\n\n    function addBacktest(backtest) {\n        dispatch({\n        type: 'ADD_BACKTEST',\n        payload: backtest\n        });\n    }\n\n    // Updates search results from API when user searches for a stock\n    async function stockSearch(searchInput) {\n        //API call for searching stock tickers\n        let response = await fetch(`https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${searchInput.text}&apikey=CQ5JZQYM4DG0OODA`);\n        let data = await response.json();\n\n        //create temp list\n        let new_symbol_list = [];\n\n        // If API limit: alerts, maintains current results(if any)\n        // Else: updates search results display properly\n        if(data.Note){\n            alert(\"MAX API CALLS. Please wait a minute for more. Thank you for visitng my project! However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n            // Maintains current search results\n            dispatch({\n                type: 'MAX_API',\n                payload: new_symbol_list\n            });\n        }else{\n        //iterate over all search results\n        Object.keys(data.bestMatches).forEach( (e) => {\n            //filter non-US stocks, then add\n            if(data.bestMatches[e][\"4. region\"] === \"United States\"){\n            let new_symbol = {\n                symbol: data.bestMatches[e][\"1. symbol\"],\n                name: data.bestMatches[e][\"2. name\"]\n            }\n            new_symbol_list = [new_symbol, ...new_symbol_list];\n            }\n        });\n        new_symbol_list.reverse();\n        //update state of web app (official symbol_list)\n        dispatch({\n            type: 'STOCK_SEARCH',\n            payload: new_symbol_list\n        });\n        }\n    }\n\n    // Graphs API data based on user selected stock symbol\n    async function graphSymbol(selectedSymbol, graphType, doClearCache) {\n        // Clear cache for new symbol search\n        if(doClearCache){\n            state.cache_TSDA = {};\n            state.cache_TS15min = {};\n            state.cache_TS60min = {};\n        }\n\n        // Specific API call parameters\n        let function_API;\n        let outputSize;\n        let interval_API = '';\n        let cache_exists = false;\n        let data;\n        let response;\n        switch(graphType){\n            case 'day':\n                if(state.cache_TS15min['Time Series (15min)']){\n                    cache_exists = true;\n                    data = state.cache_TS15min;\n                }else{\n                    function_API = 'TIME_SERIES_INTRADAY';\n                    interval_API = '&interval=15min';\n                    outputSize = 'compact';\n                }\n                break;\n            case 'week':\n                if(state.cache_TS60min['Time Series (60min)']){\n                    cache_exists = true;\n                    data = state.cache_TS60min;\n                }else{\n                    function_API = 'TIME_SERIES_INTRADAY';\n                    interval_API = '&interval=60min';\n                    outputSize = 'compact';\n                }\n                break;\n            // case 'month':\n            //     function_API = 'TIME_SERIES_DAILY_ADJUSTED';\n            //     outputSize = 'compact';\n            //     break;\n            // case 'quarter':\n            //     function_API = 'TIME_SERIES_DAILY_ADJUSTED';\n            //     outputSize = 'compact';\n            //     break;\n            // case 'year':\n            //     function_API = 'TIME_SERIES_DAILY_ADJUSTED';\n            //     outputSize = 'full';\n            //     break;\n            default:\n                if(state.cache_TSDA['Time Series (Daily)']){\n                    cache_exists = true;\n                    data = state.cache_TSDA;\n                }else{\n                    function_API = 'TIME_SERIES_DAILY_ADJUSTED';\n                    outputSize = 'full';\n                }\n        }\n        if(!cache_exists){\n            response = await fetch(`https://www.alphavantage.co/query?function=${function_API}&symbol=${selectedSymbol}${interval_API}&outputsize=${outputSize}&apikey=CQ5JZQYM4DG0OODA`);\n            data = await response.json();\n        }\n\n\n\n        // If API limit: Alerts API limit reached, maintains current payload(stock data)\n        // Else: update current payload\n        if(data.Note){\n            alert(\"MAX API CALLS. Please wait a minute for more. Thank you for visitng my project! However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n            dispatch({\n                type: 'MAX_API',\n                payload: [graphType,data]\n            });\n        }else if(data['Error Message']){\n            alert(\"ERROR. This stock does not have valid data in the Alpha Vantage database.\");\n            dispatch({\n                type: 'MAX_API',\n                payload: [graphType,data]\n            });\n        }else{\n            dispatch({\n                type: 'DISPLAY_GRAPHS',\n                payload: [graphType,data]\n            });\n        }\n    }\n\n    return (<GlobalContext.Provider value={{\n        backtests: state.backtests,\n        symbol_list: state.symbol_list,\n        graphData_AV_API: state.graphData_AV_API,\n        current_symbol: state.current_symbol,\n        cache_TSDA: state.cache_TSDA,\n        cache_TS15min: state.cache_TS15min,\n        cache_TS60min: state.cache_TS60min,\n        graph_type: state.graph_type,\n        deleteBacktest,\n        addBacktest,\n        stockSearch,\n        graphSymbol\n    }}>\n        {children}\n        <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW\" crossOrigin=\"anonymous\"></script>\n        \n    </GlobalContext.Provider>);\n}"]},"metadata":{},"sourceType":"module"}