{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/benjaminshiao/Desktop/react/trade-analyzer/src/components/GraphSection.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport * as d3 from \"d3\";\nimport Chart from \"./chart-components/Chart\";\nimport { GlobalContext } from '../context/GlobalState';\nimport \"../chart.css\";\nexport const GraphSection = () => {\n  _s();\n\n  //grab global variables/functions to call in this file\n  const {\n    graphData_AV_API\n  } = useContext(GlobalContext);\n  const chart_width = window.screen.availWidth * 2 / 3;\n  const chart_height = window.screen.availHeight * 2 / 3; // Processes API call and sends data to candlestick chart.\n\n  const processGraphData = () => {\n    let graphDataProcessed = [];\n\n    if (!graphData_AV_API.Note) {\n      let split_ratio = 1.0; //these two arrays are sus\n\n      let xAxis_times = [];\n      let i = 0; // Iterate/translate API call to fit my charts inputs\n\n      for (let myDate in graphData_AV_API['Time Series (Daily)']) {\n        xAxis_times.push(myDate);\n        graphDataProcessed.push({\n          \"time\": i,\n          \"open\": +graphData_AV_API['Time Series (Daily)'][myDate]['1. open'] / split_ratio,\n          \"close\": +graphData_AV_API['Time Series (Daily)'][myDate]['4. close'] / split_ratio,\n          \"high\": +graphData_AV_API['Time Series (Daily)'][myDate]['2. high'] / split_ratio,\n          \"low\": +graphData_AV_API['Time Series (Daily)'][myDate]['3. low'] / split_ratio,\n          \"volume\": +graphData_AV_API['Time Series (Daily)'][myDate]['6. volume']\n        });\n        split_ratio *= +graphData_AV_API['Time Series (Daily)'][myDate]['8. split coefficient'];\n        i++;\n      }\n\n      graphDataProcessed.reverse();\n    } else {\n      const randomOne = (weight = 1) => {\n        return (Math.random() + Math.random() - 1) * weight;\n      };\n\n      const generateData = () => {\n        const length = Math.round(Math.random() * 90) + 10; // initial values\n\n        const seed_close = Math.random() * 150 + 50;\n        let previous_close = seed_close;\n        let previous_volume = Math.random() * 300 + 10;\n        let trend = Math.floor(Math.random() * 2) * 2 - 1; // calculate each bar\n\n        return d3.range(length).map((item, i) => {\n          const open = previous_close * (1 + randomOne(0.1));\n          const close = open * (1 + randomOne(0.2) * trend);\n          const high = Math.max(open, close) * (1 + randomOne(0.1));\n          const low = Math.min(open, close) * (1 - randomOne(0.1));\n          const volume = previous_volume * (1 + randomOne(0.5));\n          previous_close = close;\n          trend = Math.floor(Math.random() * 2) * 2 - 1;\n          return {\n            time: i,\n            open,\n            high,\n            low,\n            close,\n            volume\n          };\n        });\n      };\n\n      graphDataProcessed = generateData();\n    }\n\n    return graphDataProcessed;\n  }; // Only for intialization: maybe make it display SPY as default\n\n\n  const [data, setData] = useState(() => processGraphData()); // Whenever graphData_AV_API is changed, code below will update graph\n\n  useEffect(() => {\n    setData(processGraphData());\n  }, [graphData_AV_API]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Chart, {\n      data: data,\n      width: chart_width,\n      height: chart_height\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(GraphSection, \"uzK1rcds85gsb1OC+Jd/KbGYYgA=\");\n\n_c = GraphSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"GraphSection\");","map":{"version":3,"sources":["/Users/benjaminshiao/Desktop/react/trade-analyzer/src/components/GraphSection.js"],"names":["React","useContext","useEffect","useState","d3","Chart","GlobalContext","GraphSection","graphData_AV_API","chart_width","window","screen","availWidth","chart_height","availHeight","processGraphData","graphDataProcessed","Note","split_ratio","xAxis_times","i","myDate","push","reverse","randomOne","weight","Math","random","generateData","length","round","seed_close","previous_close","previous_volume","trend","floor","range","map","item","open","close","high","max","low","min","volume","time","data","setData"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport * as d3 from \"d3\";\nimport Chart from \"./chart-components/Chart\";\n\nimport { GlobalContext } from '../context/GlobalState';\nimport \"../chart.css\";\n\n\nexport const GraphSection = () => {\n  //grab global variables/functions to call in this file\n  const { graphData_AV_API } = useContext(GlobalContext);\n  \n  const chart_width = window.screen.availWidth*2/3;\n  const chart_height = window.screen.availHeight*2/3;\n\n  // Processes API call and sends data to candlestick chart.\n  const processGraphData = () => {\n\n    let graphDataProcessed = [];\n    if(!graphData_AV_API.Note){\n      let split_ratio = 1.0;\n\n      //these two arrays are sus\n      let xAxis_times = [];\n\n      let i = 0\n      // Iterate/translate API call to fit my charts inputs\n      for(let myDate in graphData_AV_API['Time Series (Daily)']){\n        xAxis_times.push(myDate);\n        graphDataProcessed.push({\n          \"time\": i,\n          \"open\": +graphData_AV_API['Time Series (Daily)'][myDate]['1. open']/split_ratio,\n          \"close\": +graphData_AV_API['Time Series (Daily)'][myDate]['4. close']/split_ratio,\n          \"high\": +graphData_AV_API['Time Series (Daily)'][myDate]['2. high']/split_ratio,\n          \"low\": +graphData_AV_API['Time Series (Daily)'][myDate]['3. low']/split_ratio,\n          \"volume\": +graphData_AV_API['Time Series (Daily)'][myDate]['6. volume']\n        });\n        split_ratio *= +graphData_AV_API['Time Series (Daily)'][myDate]['8. split coefficient'];\n        i++;\n      }\n      graphDataProcessed.reverse();\n    }else{\n      const randomOne = (weight = 1) => {\n        return (Math.random() + Math.random() - 1) * weight;\n      };\n    \n      const generateData = () => {\n        const length = Math.round(Math.random() * 90) + 10;\n    \n        // initial values\n        const seed_close = Math.random() * 150 + 50;\n        let previous_close = seed_close;\n        let previous_volume = Math.random() * 300 + 10;\n        let trend = Math.floor(Math.random() * 2) * 2 - 1;\n    \n        // calculate each bar\n        return d3.range(length).map((item, i) => {\n          const open = previous_close * (1 + randomOne(0.1));\n          const close = open * (1 + randomOne(0.2) * trend);\n          const high = Math.max(open, close) * (1 + randomOne(0.1));\n          const low = Math.min(open, close) * (1 - randomOne(0.1));\n          const volume = previous_volume * (1 + randomOne(0.5));\n    \n          previous_close = close;\n          trend = Math.floor(Math.random() * 2) * 2 - 1;\n    \n          return {\n            time: i,\n            open,\n            high,\n            low,\n            close,\n            volume\n          };\n        });\n      };\n      graphDataProcessed = generateData();\n    }\n\n    return graphDataProcessed;\n  };\n  \n  // Only for intialization: maybe make it display SPY as default\n  const [data, setData] = useState(() => processGraphData());\n  // Whenever graphData_AV_API is changed, code below will update graph\n  useEffect(() => {\n    setData(processGraphData());\n  }, [graphData_AV_API]);\n\n\n  return (\n    <>\n      <Chart data={data} width={chart_width} height={chart_height} />\n    </>\n  )\n}\n\n\n"]},"metadata":{},"sourceType":"module"}