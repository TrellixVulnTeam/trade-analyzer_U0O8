{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/benjaminshiao/Desktop/react/trade-analyzer/src/context/GlobalState.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer'; // Initial state\n\nconst initialState = {\n  transactions: [],\n  symbol_list: [],\n  symbolToGraph: '' //this guy isnt really used... can be tracked thru stockSearch function, then kept thru GraphSection.js thru 1D,1W,6M,1Y buttons\n\n}; // Create context\n\nexport const GlobalContext = /*#__PURE__*/createContext(initialState); // Provider component\n\nexport const GlobalProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(AppReducer, initialState); // Actions\n\n  function deleteTransaction(id) {\n    dispatch({\n      type: 'DELETE_TRANSACTION',\n      payload: id\n    });\n  }\n\n  function addTransaction(transaction) {\n    dispatch({\n      type: 'ADD_TRANSACTION',\n      payload: transaction\n    });\n  }\n\n  async function stockSearch(searchInput) {\n    //API call for searching stock tickers\n    let response = await fetch(`https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${searchInput.text}&apikey=CQ5JZQYM4DG0OODA`);\n    let data = await response.json(); //console.log(data);\n    //create temp list\n\n    let new_symbol_list = []; //Alerts API limit reached\n\n    if (data.Note) {\n      alert(\"MAX API CALLS. Please wait a minute. Thank you for visitng my project! However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n    } else {\n      //iterate over all search results\n      Object.keys(data.bestMatches).forEach(e => {\n        //filter non-US stocks, then add\n        if (data.bestMatches[e][\"4. region\"] === \"United States\") {\n          let new_symbol = {\n            symbol: data.bestMatches[e][\"1. symbol\"],\n            name: data.bestMatches[e][\"2. name\"]\n          };\n          new_symbol_list = [new_symbol, ...new_symbol_list];\n        } // console.log(data.bestMatches[e]); \n\n      });\n    } //update state of web app (official symbol_list)\n\n\n    dispatch({\n      type: 'STOCK_SEARCH',\n      payload: new_symbol_list\n    });\n  }\n\n  async function graphSymbol(selectedSymbol) {\n    //step 1: prepare api call... set up as global variable(below, above, appreducer.js)\n    //        remove symbolToGraph, replace it with the API call JSON... has metadata.symbol, can reference this for nested re-graphing\n    //step 2: balance.js, fix pulled from global stuff, make pullData() work using global variable(of stock data)\n    //        make the function first just run and console log to see it looks like generateData()\n    //step 3: make balance.js code properly call pullData() and display it\n    // --- API call for searching stock tickers ---\n    //let graphWindow = 'TIME_SERIES_INTRADAY';\n    //let graphWindowSize = '60min';\n    let outputSize = 'compact';\n    let response = await fetch(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${selectedSymbol}&outputsize=${outputSize}&apikey=CQ5JZQYM4DG0OODA`); //if intraday else daily --- above line of code, requires seperate API calls, too differnt due to interval\n\n    let data = await response.json();\n    console.log(data['Meta Data']['2. Symbol']);\n    console.log(data['Time Series (Daily)']);\n    data['Time Series (Daily)'].map(i => {\n      console.log(i);\n      return i;\n    }); //Alerts API limit reached\n    // if(data.Note){\n    //   alert(\"MAX API CALLS. Please wait a minute for more. Thank you for visitng my project! However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n    // }else{\n    //   //iterate over all search results\n    //   Object.keys(data.bestMatches).forEach( (e) => {\n    //     //filter non-US stocks, then add\n    //     if(data.bestMatches[e][\"4. region\"] === \"United States\"){\n    //       let new_symbol = {\n    //         symbol: data.bestMatches[e][\"1. symbol\"],\n    //         name: data.bestMatches[e][\"2. name\"]\n    //       }\n    //       new_symbol_list = [new_symbol, ...new_symbol_list];\n    //     }\n    //     // console.log(data.bestMatches[e]); \n    //   });\n    // }\n\n    dispatch({\n      type: 'DISPLAY_GRAPHS',\n      payload: selectedSymbol\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      transactions: state.transactions,\n      symbol_list: state.symbol_list,\n      symbolToGraph: state.symbolToGraph,\n      deleteTransaction,\n      addTransaction,\n      stockSearch,\n      graphSymbol\n    },\n    children: [children, /*#__PURE__*/_jsxDEV(\"script\", {\n      src: \"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js\",\n      integrity: \"sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW\",\n      crossOrigin: \"anonymous\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 11\n  }, this);\n};\n\n_s(GlobalProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = GlobalProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"sources":["/Users/benjaminshiao/Desktop/react/trade-analyzer/src/context/GlobalState.js"],"names":["React","createContext","useReducer","AppReducer","initialState","transactions","symbol_list","symbolToGraph","GlobalContext","GlobalProvider","children","state","dispatch","deleteTransaction","id","type","payload","addTransaction","transaction","stockSearch","searchInput","response","fetch","text","data","json","new_symbol_list","Note","alert","Object","keys","bestMatches","forEach","e","new_symbol","symbol","name","graphSymbol","selectedSymbol","outputSize","console","log","map","i"],"mappings":"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","sourcesContent":["import React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer';\n\n// Initial state\nconst initialState = {\n  transactions: [],\n  symbol_list: [], \n  symbolToGraph: ''//this guy isnt really used... can be tracked thru stockSearch function, then kept thru GraphSection.js thru 1D,1W,6M,1Y buttons\n}\n\n// Create context\nexport const GlobalContext = createContext(initialState);\n\n// Provider component\nexport const GlobalProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\n  // Actions\n  function deleteTransaction(id) {\n    dispatch({\n      type: 'DELETE_TRANSACTION',\n      payload: id\n    });\n  }\n\n  function addTransaction(transaction) {\n    dispatch({\n      type: 'ADD_TRANSACTION',\n      payload: transaction\n    });\n  }\n\n  async function stockSearch(searchInput) {\n    //API call for searching stock tickers\n    let response = await fetch(`https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${searchInput.text}&apikey=CQ5JZQYM4DG0OODA`);\n    let data = await response.json();\n    //console.log(data);\n\n    //create temp list\n    let new_symbol_list = [];\n\n    //Alerts API limit reached\n    if(data.Note){\n      alert(\"MAX API CALLS. Please wait a minute. Thank you for visitng my project! However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n    }else{\n      //iterate over all search results\n      Object.keys(data.bestMatches).forEach( (e) => {\n        //filter non-US stocks, then add\n        if(data.bestMatches[e][\"4. region\"] === \"United States\"){\n          let new_symbol = {\n            symbol: data.bestMatches[e][\"1. symbol\"],\n            name: data.bestMatches[e][\"2. name\"]\n          }\n          new_symbol_list = [new_symbol, ...new_symbol_list];\n        }\n        // console.log(data.bestMatches[e]); \n      });\n    }\n\n    //update state of web app (official symbol_list)\n    dispatch({\n      type: 'STOCK_SEARCH',\n      payload: new_symbol_list\n    });\n  }\n\n  async function graphSymbol(selectedSymbol) {\n    //step 1: prepare api call... set up as global variable(below, above, appreducer.js)\n    //        remove symbolToGraph, replace it with the API call JSON... has metadata.symbol, can reference this for nested re-graphing\n    //step 2: balance.js, fix pulled from global stuff, make pullData() work using global variable(of stock data)\n    //        make the function first just run and console log to see it looks like generateData()\n    //step 3: make balance.js code properly call pullData() and display it\n\n    // --- API call for searching stock tickers ---\n    //let graphWindow = 'TIME_SERIES_INTRADAY';\n    //let graphWindowSize = '60min';\n    let outputSize = 'compact';\n\n    let response = await fetch(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${selectedSymbol}&outputsize=${outputSize}&apikey=CQ5JZQYM4DG0OODA`);\n    //if intraday else daily --- above line of code, requires seperate API calls, too differnt due to interval\n    let data = await response.json();\n\n    console.log(data['Meta Data']['2. Symbol']);\n    console.log(data['Time Series (Daily)']);\n    data['Time Series (Daily)'].map( (i) => {\n      console.log(i);\n      return i;\n    });\n\n    //Alerts API limit reached\n    // if(data.Note){\n    //   alert(\"MAX API CALLS. Please wait a minute for more. Thank you for visitng my project! However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n    // }else{\n    //   //iterate over all search results\n    //   Object.keys(data.bestMatches).forEach( (e) => {\n    //     //filter non-US stocks, then add\n    //     if(data.bestMatches[e][\"4. region\"] === \"United States\"){\n    //       let new_symbol = {\n    //         symbol: data.bestMatches[e][\"1. symbol\"],\n    //         name: data.bestMatches[e][\"2. name\"]\n    //       }\n    //       new_symbol_list = [new_symbol, ...new_symbol_list];\n    //     }\n    //     // console.log(data.bestMatches[e]); \n    //   });\n    // }\n\n\n    dispatch({\n      type: 'DISPLAY_GRAPHS',\n      payload: selectedSymbol\n    });\n  }\n\n  return (<GlobalContext.Provider value={{\n    transactions: state.transactions,\n    symbol_list: state.symbol_list,\n    symbolToGraph: state.symbolToGraph,\n    deleteTransaction,\n    addTransaction,\n    stockSearch,\n    graphSymbol\n  }}>\n    {children}\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW\" crossOrigin=\"anonymous\"></script>\n      \n  </GlobalContext.Provider>);\n}"]},"metadata":{},"sourceType":"module"}