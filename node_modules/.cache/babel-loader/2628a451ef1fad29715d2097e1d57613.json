{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nexport const useContainerDimensions = myRef => {\n  _s();\n\n  const getDimensions = () => ({\n    width: myRef.current.offsetWidth,\n    height: myRef.current.offsetHeight\n  });\n\n  const [dimensions, setDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n  useEffect(() => {\n    const handleResize = () => {\n      setDimensions(getDimensions());\n    };\n\n    if (myRef.current) {\n      setDimensions(getDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, [myRef]);\n  return dimensions;\n};\n\n_s(useContainerDimensions, \"+s2/pdL2td2q2xFkCLbRJUtydJw=\");","map":{"version":3,"sources":["/Users/benjaminshiao/Desktop/react/trade-analyzer/src/components/ResizeWindow.js"],"names":["React","useRef","useContainerDimensions","myRef","getDimensions","width","current","offsetWidth","height","offsetHeight","dimensions","setDimensions","useState","useEffect","handleResize","window","addEventListener","removeEventListener"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA6B,OAA7B;AAEA,OAAO,MAAMC,sBAAsB,GAAGC,KAAK,IAAI;AAAA;;AAC7C,QAAMC,aAAa,GAAG,OAAO;AAC3BC,IAAAA,KAAK,EAAEF,KAAK,CAACG,OAAN,CAAcC,WADM;AAE3BC,IAAAA,MAAM,EAAEL,KAAK,CAACG,OAAN,CAAcG;AAFK,GAAP,CAAtB;;AAKA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BC,QAAQ,CAAC;AAAEP,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,MAAM,EAAE;AAApB,GAAD,CAA5C;AAEAK,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMC,YAAY,GAAG,MAAM;AACzBH,MAAAA,aAAa,CAACP,aAAa,EAAd,CAAb;AACD,KAFD;;AAIA,QAAID,KAAK,CAACG,OAAV,EAAmB;AACjBK,MAAAA,aAAa,CAACP,aAAa,EAAd,CAAb;AACD;;AAEDW,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCF,YAAlC;AAEA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCH,YAArC;AACD,KAFD;AAGD,GAdQ,EAcN,CAACX,KAAD,CAdM,CAAT;AAgBA,SAAOO,UAAP;AACD,CAzBM;;GAAMR,sB","sourcesContent":["import React, { useRef} from 'react';\n\nexport const useContainerDimensions = myRef => {\n  const getDimensions = () => ({\n    width: myRef.current.offsetWidth,\n    height: myRef.current.offsetHeight\n  })\n\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 })\n\n  useEffect(() => {\n    const handleResize = () => {\n      setDimensions(getDimensions())\n    }\n\n    if (myRef.current) {\n      setDimensions(getDimensions())\n    }\n\n    window.addEventListener(\"resize\", handleResize)\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize)\n    }\n  }, [myRef])\n\n  return dimensions;\n};"]},"metadata":{},"sourceType":"module"}