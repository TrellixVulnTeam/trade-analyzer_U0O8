{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/benjaminshiao/Desktop/react/trade-analyzer/src/components/Backtest.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport { GlobalContext } from '../context/GlobalState';\nexport const Backtest = ({\n  backtest\n}) => {\n  _s();\n\n  const [timeInterval, setTimeInterval] = useState('daily');\n  const [seriesType, setSeriesType] = useState('close');\n  const {\n    deleteBacktest,\n    current_symbol\n  } = useContext(GlobalContext);\n  /*\n    ema: function, symbol, interval,time period, series type,\n    Sma: function, symbol, interval,time period, series type,\n    rsi: function, symbol, interval,time period, series type\n     //do below later\n    bba: function, symbol, interval,time period, series type, (optionals: dev up, dev down, move avg type)\n    MACD:function, symbol, interval, series type, (optional: fastperiod, slow period, signalperiod)\n    OBv: function, symbol, interval\n    STOCH: function, symbol, interval, (optionals: fast K period, slow K period, slow D period, slow K ma type, slow D ma type)\n     pair settings:\n    max bags : int\n    inital balance: int\n    inital bag cost: int or percent\n    strategy: selected already... customize the indicator... depending which one, ask user for buy value(-x%)....rebuy delay:int....\n    Sell strategy: GAIN... sell profit %\n     optional future: trailing buy/sell... stop loss.... DCA system... average bag values(for sell strategy)\n    */\n\n  const onSubmit = () => {\n    const calculateThing = {\n      indicator: backtest.indicator,\n      symbol: current_symbol,\n      //this kinda optional bc current_symbol is in global state already...\n      timeInterval: timeInterval,\n      seriesType: seriesType\n    };\n    console.log(calculateThing);\n  };\n\n  switch (backtest.indicator) {\n    case 'RSI':\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card col-3\",\n          children: [backtest.indicator, /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Select Interval:\", /*#__PURE__*/_jsxDEV(\"select\", {\n              onChange: e => setTimeInterval(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"daily\",\n                children: \"Daily\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"60min\",\n                children: \"60 minutes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"15min\",\n                children: \"15 minutes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Select Series Type:\", /*#__PURE__*/_jsxDEV(\"select\", {\n              onChange: e => setSeriesType(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"close\",\n                children: \"close\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"open\",\n                children: \"open\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"high\",\n                children: \"high\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"low\",\n                children: \"low\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => onSubmit(),\n            className: \"btn-secondary w-25\",\n            children: \"Calculate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => deleteBacktest(backtest.id),\n            className: \"btn-primary w-25\",\n            children: \"x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this);\n\n    case 'EMA':\n      return /*#__PURE__*/_jsxDEV(\"li\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this);\n\n    case 'SMA':\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [backtest.indicator, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteBacktest(backtest.id),\n          className: \"btn-primary\",\n          children: \"x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this);\n\n    default:\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"default item\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteBacktest(backtest.id),\n          className: \"btn-primary\",\n          children: \"x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this);\n  }\n};\n\n_s(Backtest, \"XqpF/iDrCBsrO/HpjdlopfcHifA=\");\n\n_c = Backtest;\n\nvar _c;\n\n$RefreshReg$(_c, \"Backtest\");","map":{"version":3,"sources":["/Users/benjaminshiao/Desktop/react/trade-analyzer/src/components/Backtest.js"],"names":["React","useState","useContext","GlobalContext","Backtest","backtest","timeInterval","setTimeInterval","seriesType","setSeriesType","deleteBacktest","current_symbol","onSubmit","calculateThing","indicator","symbol","console","log","e","target","value","id"],"mappings":"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","sourcesContent":["import React, {useState, useContext} from 'react'\nimport { GlobalContext } from '../context/GlobalState';\n\nexport const Backtest = ({ backtest }) => {\n  const [timeInterval, setTimeInterval] = useState('daily');\n  const [seriesType, setSeriesType] = useState('close');\n\n  const { deleteBacktest, current_symbol } = useContext(GlobalContext);\n\n  /*\n    ema: function, symbol, interval,time period, series type,\n    Sma: function, symbol, interval,time period, series type,\n    rsi: function, symbol, interval,time period, series type\n\n    //do below later\n    bba: function, symbol, interval,time period, series type, (optionals: dev up, dev down, move avg type)\n    MACD:function, symbol, interval, series type, (optional: fastperiod, slow period, signalperiod)\n    OBv: function, symbol, interval\n    STOCH: function, symbol, interval, (optionals: fast K period, slow K period, slow D period, slow K ma type, slow D ma type)\n\n    pair settings:\n    max bags : int\n    inital balance: int\n    inital bag cost: int or percent\n    strategy: selected already... customize the indicator... depending which one, ask user for buy value(-x%)....rebuy delay:int....\n    Sell strategy: GAIN... sell profit %\n\n    optional future: trailing buy/sell... stop loss.... DCA system... average bag values(for sell strategy)\n\n\n  */\n  const onSubmit = () => {\n\n    const calculateThing = { \n      indicator: backtest.indicator,\n      symbol: current_symbol, //this kinda optional bc current_symbol is in global state already...\n      timeInterval: timeInterval,\n      seriesType: seriesType\n\n    };\n    console.log(calculateThing);\n  }\n\n\n  switch(backtest.indicator){\n    case 'RSI':\n      return (\n        <li>\n          <div className='card col-3'>\n            {/* title */}\n            {backtest.indicator}\n        \n            {/* time interval */}\n            <label>\n              Select Interval:\n              <select onChange={(e) => setTimeInterval(e.target.value)}>\n                <option value=\"daily\">Daily</option>\n                <option value=\"60min\">60 minutes</option>\n                <option value=\"15min\">15 minutes</option>\n              </select>\n            </label>\n\n            {/* series type */}\n            <label>\n              Select Series Type:\n              <select onChange={(e) => setSeriesType(e.target.value)}>\n                <option value=\"close\">close</option>\n                <option value=\"open\">open</option>\n                <option value=\"high\">high</option>\n                <option value=\"low\">low</option>\n              </select>\n            </label>\n\n            {/* submit button */}\n            <button onClick={() => onSubmit()} className=\"btn-secondary w-25\">Calculate</button>\n\n\n            {/* close button */}\n            <button onClick={() => deleteBacktest(backtest.id)} className=\"btn-primary w-25\">x</button>\n          </div>\n        </li>\n      )\n    case 'EMA':\n      return (\n        <li>\n        </li>\n      )\n    case 'SMA':\n      return (\n        <li>\n          {/* like a div here, has buttons/ parameters... case statement to catch the indicator type and determine return type */}\n          {backtest.indicator} \n          <button \n              onClick={() => deleteBacktest(backtest.id)} className=\"btn-primary\">x\n              \n          </button>\n        </li>\n      )\n    default:\n      return (\n        <li>\n          default item\n          <button \n              onClick={() => deleteBacktest(backtest.id)} className=\"btn-primary\">x\n          </button>\n        </li>\n      )\n    \n  }\n}\n"]},"metadata":{},"sourceType":"module"}