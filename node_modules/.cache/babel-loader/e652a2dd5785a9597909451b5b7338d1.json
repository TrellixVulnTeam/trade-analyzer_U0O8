{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/benjaminshiao/Desktop/react/trade-analyzer/src/components/GraphSection.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport * as d3 from \"d3\";\nimport Chart from \"./chart-components/Chart\";\nimport { GlobalContext } from '../context/GlobalState';\nimport \"../chart.css\";\nexport const GraphSection = () => {\n  _s();\n\n  //grab global variables/functions to call in this file\n  const {\n    graphData_AV_API\n  } = useContext(GlobalContext);\n  let data_ticker = \"Graph ...\";\n  const chart_width = window.screen.availWidth * 2 / 3;\n  const chart_height = window.screen.availHeight * 2 / 3; // Processes API call and sends data to candlestick chart.\n\n  const processGraphData = () => {\n    let split_ratio = 1.0;\n    let xAxis_times = [];\n    let graphDataProcessed = []; //data_ticker = graphData_AV_API['Meta Data']['2. Symbol'];\n    // Iterate/translate API call to fit my charts inputs\n\n    for (let myDate in graphData_AV_API['Time Series (Daily)']) {\n      xAxis_times.push(myDate);\n      graphDataProcessed.push({\n        \"open\": +graphData_AV_API['Time Series (Daily)'][myDate]['1. open'] / split_ratio,\n        \"close\": +graphData_AV_API['Time Series (Daily)'][myDate]['4. close'] / split_ratio,\n        \"high\": +graphData_AV_API['Time Series (Daily)'][myDate]['2. high'] / split_ratio,\n        \"low\": +graphData_AV_API['Time Series (Daily)'][myDate]['3. low'] / split_ratio,\n        \"volume\": +graphData_AV_API['Time Series (Daily)'][myDate]['6. volume']\n      });\n      split_ratio *= +graphData_AV_API['Time Series (Daily)'][myDate]['8. split coefficient'];\n    }\n\n    const length = xAxis_times.length; // Below return traanslates lines 26-36 bc idk how to format this type of object\n\n    return d3.range(length).map((item, i) => {\n      return {\n        time: i,\n        open: graphDataProcessed[i]['open'],\n        high: graphDataProcessed[i]['high'],\n        low: graphDataProcessed[i]['low'],\n        close: graphDataProcessed[i]['close'],\n        volume: graphDataProcessed[i]['volume']\n      };\n    });\n  }; // Only for intialization: maybe make it display SPY as default\n\n\n  const [data, setData] = useState(() => processGraphData()); // Whenever graphData_AV_API is changed, code below will update graph\n\n  useEffect(() => {\n    setData(processGraphData());\n    data.reverse();\n  }, [graphData_AV_API]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: data_ticker\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      data: data,\n      width: chart_width,\n      height: chart_height\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(GraphSection, \"uzK1rcds85gsb1OC+Jd/KbGYYgA=\");\n\n_c = GraphSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"GraphSection\");","map":{"version":3,"sources":["/Users/benjaminshiao/Desktop/react/trade-analyzer/src/components/GraphSection.js"],"names":["React","useContext","useEffect","useState","d3","Chart","GlobalContext","GraphSection","graphData_AV_API","data_ticker","chart_width","window","screen","availWidth","chart_height","availHeight","processGraphData","split_ratio","xAxis_times","graphDataProcessed","myDate","push","length","range","map","item","i","time","open","high","low","close","volume","data","setData","reverse"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport * as d3 from \"d3\";\nimport Chart from \"./chart-components/Chart\";\n\nimport { GlobalContext } from '../context/GlobalState';\nimport \"../chart.css\";\n\n\nexport const GraphSection = () => {\n  //grab global variables/functions to call in this file\n  const { graphData_AV_API } = useContext(GlobalContext);\n  \n  let data_ticker = \"Graph ...\";\n  const chart_width = window.screen.availWidth*2/3;\n  const chart_height = window.screen.availHeight*2/3;\n\n  // Processes API call and sends data to candlestick chart.\n  const processGraphData = () => {\n    let split_ratio = 1.0;\n    let xAxis_times = [];\n    let graphDataProcessed = [];\n    //data_ticker = graphData_AV_API['Meta Data']['2. Symbol'];\n\n    // Iterate/translate API call to fit my charts inputs\n    for(let myDate in graphData_AV_API['Time Series (Daily)']){\n      xAxis_times.push(myDate);\n      graphDataProcessed.push({\n        \"open\": +graphData_AV_API['Time Series (Daily)'][myDate]['1. open']/split_ratio,\n        \"close\": +graphData_AV_API['Time Series (Daily)'][myDate]['4. close']/split_ratio,\n        \"high\": +graphData_AV_API['Time Series (Daily)'][myDate]['2. high']/split_ratio,\n        \"low\": +graphData_AV_API['Time Series (Daily)'][myDate]['3. low']/split_ratio,\n        \"volume\": +graphData_AV_API['Time Series (Daily)'][myDate]['6. volume']\n      });\n      split_ratio *= +graphData_AV_API['Time Series (Daily)'][myDate]['8. split coefficient'];\n    }\n    \n    const length = xAxis_times.length;\n    // Below return traanslates lines 26-36 bc idk how to format this type of object\n    return d3.range(length).map((item, i) => {\n      return {\n        time: i,\n        open: graphDataProcessed[i]['open'],\n        high: graphDataProcessed[i]['high'],\n        low: graphDataProcessed[i]['low'],\n        close: graphDataProcessed[i]['close'],\n        volume: graphDataProcessed[i]['volume']\n      };\n    });\n  };\n  \n  // Only for intialization: maybe make it display SPY as default\n  const [data, setData] = useState(() => processGraphData());\n  // Whenever graphData_AV_API is changed, code below will update graph\n  useEffect(() => {\n    setData(processGraphData());\n    data.reverse();\n  }, [graphData_AV_API]);\n\n\n  return (\n    <>\n      <h1>{data_ticker}</h1>\n      <Chart data={data} width={chart_width} height={chart_height} />\n    </>\n  )\n}\n\n\n"]},"metadata":{},"sourceType":"module"}