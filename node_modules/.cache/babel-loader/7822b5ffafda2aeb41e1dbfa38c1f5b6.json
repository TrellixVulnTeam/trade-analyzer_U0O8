{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/benjaminshiao/Desktop/react/trade-analyzer/src/context/GlobalState.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer'; // Initial state\n\nconst initialState = {\n  transactions: [],\n  symbol_list: [],\n  graphData_AV_API: {}\n}; // Create context\n\nexport const GlobalContext = /*#__PURE__*/createContext(initialState); // Provider component\n\nexport const GlobalProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(AppReducer, initialState); // Actions\n\n  function deleteTransaction(id) {\n    dispatch({\n      type: 'DELETE_TRANSACTION',\n      payload: id\n    });\n  }\n\n  function addTransaction(transaction) {\n    dispatch({\n      type: 'ADD_TRANSACTION',\n      payload: transaction\n    });\n  } // Updates search results(API call) when user searches for stock\n\n\n  async function stockSearch(searchInput) {\n    //API call for searching stock tickers\n    let response = await fetch(`https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${searchInput.text}&apikey=CQ5JZQYM4DG0OODA`);\n    let data = await response.json(); //create temp list\n\n    let new_symbol_list = []; // If API limit: alerts, maintains current results(if any)\n    // Else: updates search results display properly\n\n    if (data.Note) {\n      alert(\"MAX API CALLS. Please wait a minute. Thank you for visitng my project! However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\"); // Maintains current search results\n\n      dispatch({\n        type: 'STOCK_SEARCH_MAX_API',\n        payload: new_symbol_list\n      });\n    } else {\n      //iterate over all search results\n      Object.keys(data.bestMatches).forEach(e => {\n        //filter non-US stocks, then add\n        if (data.bestMatches[e][\"4. region\"] === \"United States\") {\n          let new_symbol = {\n            symbol: data.bestMatches[e][\"1. symbol\"],\n            name: data.bestMatches[e][\"2. name\"]\n          };\n          new_symbol_list = [new_symbol, ...new_symbol_list];\n        }\n      }); //update state of web app (official symbol_list)\n\n      dispatch({\n        type: 'STOCK_SEARCH',\n        payload: new_symbol_list\n      });\n    }\n  } // User selected stock symbol --> graphSymbol(). \n  // ****************************************\n  // Need to add parameters to make it run for 1D,1W,etc\n  // console.log(data['Meta Data']['2. Symbol']); to find symbol for 1D,1W... buttons\n  // ****************************************\n\n\n  async function graphSymbol(selectedSymbol) {\n    //let graphWindow = 'TIME_SERIES_INTRADAY';\n    //let graphWindowSize = '60min';\n    let outputSize = 'compact';\n    let response = await fetch(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${selectedSymbol}&outputsize=${outputSize}&apikey=CQ5JZQYM4DG0OODA`); //if intraday else daily --- above line of code, requires seperate API calls, too differnt due to interval\n\n    let data = await response.json(); // console.log(data['Meta Data']['2. Symbol']);\n    // console.log(data['Time Series (Daily)']);\n    // for(let x in data['Time Series (Daily)']){\n    //   console.log(x,data['Time Series (Daily)'][x]);\n    // }\n    // If API limit: Alerts API limit reached, doesn't edit current payload\n    // Else: update current payload\n\n    if (data.Note) {\n      alert(\"MAX API CALLS. Please wait a minute for more. Thank you for visitng my project! However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n      alert(\"The graph will display randomly generated data due to the API limit. Please try again in a minute.\");\n      dispatch({\n        type: 'DISPLAY_GRAPHS_MAX_API',\n        payload: data\n      });\n    } else {\n      dispatch({\n        type: 'DISPLAY_GRAPHS',\n        payload: data\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      transactions: state.transactions,\n      symbol_list: state.symbol_list,\n      graphData_AV_API: state.graphData_AV_API,\n      deleteTransaction,\n      addTransaction,\n      stockSearch,\n      graphSymbol\n    },\n    children: [children, /*#__PURE__*/_jsxDEV(\"script\", {\n      src: \"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js\",\n      integrity: \"sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW\",\n      crossOrigin: \"anonymous\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 11\n  }, this);\n};\n\n_s(GlobalProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = GlobalProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"sources":["/Users/benjaminshiao/Desktop/react/trade-analyzer/src/context/GlobalState.js"],"names":["React","createContext","useReducer","AppReducer","initialState","transactions","symbol_list","graphData_AV_API","GlobalContext","GlobalProvider","children","state","dispatch","deleteTransaction","id","type","payload","addTransaction","transaction","stockSearch","searchInput","response","fetch","text","data","json","new_symbol_list","Note","alert","Object","keys","bestMatches","forEach","e","new_symbol","symbol","name","graphSymbol","selectedSymbol","outputSize"],"mappings":"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","sourcesContent":["import React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer';\n\n// Initial state\nconst initialState = {\n  transactions: [],\n  symbol_list: [], \n  graphData_AV_API: {}\n}\n\n// Create context\nexport const GlobalContext = createContext(initialState);\n\n// Provider component\nexport const GlobalProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\n  // Actions\n  function deleteTransaction(id) {\n    dispatch({\n      type: 'DELETE_TRANSACTION',\n      payload: id\n    });\n  }\n\n  function addTransaction(transaction) {\n    dispatch({\n      type: 'ADD_TRANSACTION',\n      payload: transaction\n    });\n  }\n\n  // Updates search results(API call) when user searches for stock\n  async function stockSearch(searchInput) {\n    //API call for searching stock tickers\n    let response = await fetch(`https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${searchInput.text}&apikey=CQ5JZQYM4DG0OODA`);\n    let data = await response.json();\n\n    //create temp list\n    let new_symbol_list = [];\n\n    // If API limit: alerts, maintains current results(if any)\n    // Else: updates search results display properly\n    if(data.Note){\n        alert(\"MAX API CALLS. Please wait a minute. Thank you for visitng my project! However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n        // Maintains current search results\n        dispatch({\n            type: 'STOCK_SEARCH_MAX_API',\n            payload: new_symbol_list\n        });\n    }else{\n      //iterate over all search results\n      Object.keys(data.bestMatches).forEach( (e) => {\n        //filter non-US stocks, then add\n        if(data.bestMatches[e][\"4. region\"] === \"United States\"){\n          let new_symbol = {\n            symbol: data.bestMatches[e][\"1. symbol\"],\n            name: data.bestMatches[e][\"2. name\"]\n          }\n          new_symbol_list = [new_symbol, ...new_symbol_list];\n        }\n      });\n      //update state of web app (official symbol_list)\n      dispatch({\n        type: 'STOCK_SEARCH',\n        payload: new_symbol_list\n      });\n    }\n  }\n\n  // User selected stock symbol --> graphSymbol(). \n  // ****************************************\n  // Need to add parameters to make it run for 1D,1W,etc\n  // console.log(data['Meta Data']['2. Symbol']); to find symbol for 1D,1W... buttons\n  // ****************************************\n  async function graphSymbol(selectedSymbol) {\n    //let graphWindow = 'TIME_SERIES_INTRADAY';\n    //let graphWindowSize = '60min';\n    let outputSize = 'compact';\n\n    let response = await fetch(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${selectedSymbol}&outputsize=${outputSize}&apikey=CQ5JZQYM4DG0OODA`);\n    //if intraday else daily --- above line of code, requires seperate API calls, too differnt due to interval\n    let data = await response.json();\n\n    // console.log(data['Meta Data']['2. Symbol']);\n    // console.log(data['Time Series (Daily)']);\n    // for(let x in data['Time Series (Daily)']){\n    //   console.log(x,data['Time Series (Daily)'][x]);\n    // }\n\n    // If API limit: Alerts API limit reached, doesn't edit current payload\n    // Else: update current payload\n    if(data.Note){\n      alert(\"MAX API CALLS. Please wait a minute for more. Thank you for visitng my project! However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n      alert(\"The graph will display randomly generated data due to the API limit. Please try again in a minute.\");\n      dispatch({\n        type: 'DISPLAY_GRAPHS_MAX_API',\n        payload: data\n      });\n    }else{\n        dispatch({\n            type: 'DISPLAY_GRAPHS',\n            payload: data\n          });\n    }\n  }\n\n  return (<GlobalContext.Provider value={{\n    transactions: state.transactions,\n    symbol_list: state.symbol_list,\n    graphData_AV_API: state.graphData_AV_API,\n    deleteTransaction,\n    addTransaction,\n    stockSearch,\n    graphSymbol\n  }}>\n    {children}\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW\" crossOrigin=\"anonymous\"></script>\n      \n  </GlobalContext.Provider>);\n}"]},"metadata":{},"sourceType":"module"}