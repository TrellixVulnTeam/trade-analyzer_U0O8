{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/benjaminshiao/Desktop/react/trade-analyzer/src/components/Backtest.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport TradeList from './TradeList';\nimport { GlobalContext } from '../context/GlobalState';\nexport const Backtest = ({\n  backtest\n}) => {\n  _s();\n\n  //delete this fodder backtest value later\n  backtest.profit = 5;\n  backtest.numTrades = 6;\n  backtest.avgBars = 7;\n  backtest.avgProfit = 8;\n  backtest.holdReturn = 9;\n  backtest.holdReturn = 430; //end of fodder\n\n  const defaultTimePeriod = () => {\n    switch (backtest.indicator) {\n      case 'RSI':\n        return 14;\n\n      case 'EMA':\n        return 9;\n\n      case 'SMA':\n        return 9;\n\n      case 'BB':\n        return 20;\n\n      default:\n        return 24;\n    }\n  };\n\n  const defaultBuyStrat = () => {\n    switch (backtest.indicator) {\n      case 'RSI':\n        return 30;\n\n      case 'EMA':\n        return -3;\n\n      case 'SMA':\n        return -3;\n\n      case 'BB':\n        return -3;\n\n      default:\n        return -3;\n    }\n  };\n\n  const [seriesType, setSeriesType] = useState('1. open');\n  const [timePeriod, setTimePeriod] = useState(defaultTimePeriod());\n  const [stdDeviation, setStdDeviation] = useState(2);\n  const [maxBags, setMaxBags] = useState(5);\n  const [initalBalance, setInitialBalance] = useState(10000);\n  const [initalBuyType, setInitalBuyType] = useState('usd');\n  const [initalBuyAmount, setInitalBuyAmount] = useState(1500);\n  const [buyStrategyValue, setBuyStrategyValue] = useState(defaultBuyStrat());\n  const [buyStrategyType, setBuyStrategyType] = useState('middle'); // Used for Bollinger upper/middle/lower\n\n  const [sellStrategyValue, setSellStrategyValue] = useState(1);\n  const {\n    deleteBacktest,\n    current_symbol,\n    cache_TSDA,\n    cache_TSDA_function\n  } = useContext(GlobalContext);\n\n  const dropdownItems = items => {\n    return items.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: item.value,\n      children: item.name\n    }, item.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 30\n    }, this));\n  };\n\n  async function runBacktests(paperAPICall, pairSettings) {\n    let stockPriceData;\n    let stockIndicatorData;\n    let response; // Ensure user has selected a stock\n\n    if (!current_symbol) {\n      alert(\"Please select a stock to test your strategy on.\");\n      return;\n    } // Ensure API json for cache_TSDA exists\n\n\n    if (!cache_TSDA['Meta Data']) {\n      response = await fetch(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${current_symbol}&outputsize=full&apikey=CQ5JZQYM4DG0OODA`);\n      stockPriceData = await response.json();\n      cache_TSDA_function(stockPriceData); // Stop if MAX API\n\n      if (stockPriceData.Note) return;\n    } else {\n      stockPriceData = cache_TSDA;\n    } // Make API call for stockIndicatorData\n\n\n    let optionalParameters;\n\n    switch (backtest.indicator) {\n      case 'BBANDS':\n        optionalParameters = `&nbdevup=${pairSettings.stdDeviation}&nbdevdn=${pairSettings.stdDeviation}`;\n        break;\n\n      default:\n        optionalParameters = '';\n    }\n\n    response = await fetch(`https://www.alphavantage.co/query?function=${backtest.indicator}&symbol=${current_symbol}&interval=daily&time_period=${paperAPICall.timePeriod}&series_type=${paperAPICall.seriesType}${optionalParameters}&apikey=CQ5JZQYM4DG0OODA`);\n    stockIndicatorData = await response.json(); // Catches MAX API\n\n    if (stockIndicatorData.Note) {\n      alert(\"MAX API CALLS. Please wait a minute for more. Thank you for visitng my project! However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n    } // ****TEMP**** just to see its printing\n\n\n    console.log(stockPriceData, \"Break\\n\", stockIndicatorData);\n    let bags = 500; // let bagList = {};\n    // let newBag = {\n    //   \"buy-date\": \"123\",\n    //   \"buy-price\": \"69$\"\n    // };\n    // bagList[\"12-21-02\"] = newBag;\n    // console.log(bagList);\n    // console.log(+bagList[\"12-21-02\"][\"buy-date\"]);\n    // delete bagList[\"12-21-02\"];\n    // console.log(bagList, bagList[\"12-21-02\"]);\n    // Main loop that runs the paper trading bot algo, maintains bags/buys/sells/etc throughout 5 years (1265 trading days)\n    // Note: key == date\n\n    let candleCount = 0;\n\n    for (let [key] of Object.entries(stockIndicatorData[`Technical Analysis: ${backtest.indicator}`]).reverse()) {\n      // Stop at 5 years (1265 trading days/candles)\n      if (candleCount++ === 1265) break; // Skip days where no price exists\n      //if(!stockPriceData[\"Time Series (Daily)\"][`${key}`]) continue;\n\n      console.log(key); // Essential values for iterating stock data\n\n      let curIndicatorValue = stockIndicatorData[`Technical Analysis: ${backtest.indicator}`][`${key}`][`${backtest.indicator}`];\n      let curStockPrice = stockPriceData[\"Time Series (Daily)\"][`${key}`][`${paperAPICall.seriesType}`]; // Three parts: Iterator code, buy code, else sell\n      // Above == have default iterator code\n      // if(/*buy condition*/){\n      // }else if(/*sell condition*/){\n      // }\n      //console.log(\"price: \", curStockPrice, \"indicator: \", curIndicatorValue);\n\n      if (curIndicatorValue > 60 && bags < 500) {\n        bags++;\n        console.log('sale');\n      }\n\n      if (curIndicatorValue < 40 && bags > 0) bags--;\n    }\n  }\n\n  const onSubmit = () => {\n    const paperAPICall = {\n      // Relavent variables that are global: current_symbol, interval(daily), backtest.indicator(ex, RSI)\n      seriesType: seriesType,\n      timePeriod: +timePeriod,\n      stdDeviation: +stdDeviation\n    };\n    const pairSettings = {\n      maxBags: +maxBags,\n      initalBalance: +initalBalance,\n      initalBuyType: initalBuyType,\n      initalBuyAmount: +initalBuyAmount,\n      buyStrategyValue: +buyStrategyValue,\n      buyStrategyType,\n      // used for Bollinger upper/middle/lower\n      sellStrategyValue: +sellStrategyValue\n    }; // Ensure no trivial strategies are submitted\n\n    if (pairSettings.maxBags < 1 || pairSettings.initalBalance < 1 || pairSettings.initalBuyAmount < 1 || pairSettings.sellStrategyValue < 0 || paperAPICall.timePeriod < 1) {\n      // Bags, balance, timeperiod, buy amount, sell gain% must be positive\n      alert(\"Please enter valid inputs. Use positive integers for the following: Max bags, Sell percentage, Time period, Buy amount, Inital Balance.\");\n    } else if (pairSettings.initalBuyType === 'percent' && (pairSettings.initalBuyAmount < 1 || pairSettings.initalBuyAmount > 100)) {\n      // if(buy type is percent) buy amount must be (0-100]\n      alert(\"Buy amount percentage must be 1-100%\");\n    } else if (pairSettings.initalBuyAmount > pairSettings.initalBalance) {\n      // inital buy must be < inital balance\n      alert(\"Inital buys must be less than or equal to inital balance.\");\n    } else if (backtest.indicator === 'RSI' && (pairSettings.buyStrategyValue < 1 || pairSettings.buyStrategyValue > 99)) {\n      // Ensure no trivial strategy specific settings are submitted <connect to previous if chain thing>\n      alert(\"RSI values must be between 1-99\");\n    } else if (backtest.indicator === 'BBANDS' && paperAPICall.stdDeviation < 0.5) {\n      // Ensure no trivial BB std deviation\n      alert(\"Standard Deviation must be greater than or equal to 0.5.\");\n    } else {\n      // Calculation inputs valid, run backtest algorithm\n      runBacktests(paperAPICall, pairSettings);\n    }\n  };\n\n  let indicatorSettingDOM = null;\n\n  switch (backtest.indicator) {\n    case 'RSI':\n      indicatorSettingDOM = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Time Period:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"14\",\n            onChange: e => setTimePeriod(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 9\n        }, this)\n      }, void 0, false);\n      break;\n\n    case 'EMA':\n      indicatorSettingDOM = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Time Period:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"9\",\n            onChange: e => setTimePeriod(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 9\n        }, this)\n      }, void 0, false);\n      break;\n\n    case 'SMA':\n      indicatorSettingDOM = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Time Period:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"9\",\n            onChange: e => setTimePeriod(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 9\n        }, this)\n      }, void 0, false);\n      break;\n\n    case 'BBANDS':\n      indicatorSettingDOM = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Time Period:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"20\",\n            onChange: e => setTimePeriod(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Standard Deviation for upper/lower lines:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"2\",\n            onChange: e => setStdDeviation(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true);\n      break;\n\n    default:\n      indicatorSettingDOM = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"indicaator setting dom default\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 30\n      }, this);\n  }\n\n  let buyStrategyDOM = null;\n\n  switch (backtest.indicator) {\n    case 'RSI':\n      buyStrategyDOM = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Buy at RSI \", \"<\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"30\",\n            onChange: e => setBuyStrategyValue(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 9\n        }, this)\n      }, void 0, false);\n      break;\n\n    case 'EMA':\n      buyStrategyDOM = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Buy at price\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"-3\",\n            onChange: e => setBuyStrategyValue(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 11\n          }, this), \"% away from EMA line.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 11\n          }, this), \"(3 = 3% above, -3 = 3% below)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 9\n        }, this)\n      }, void 0, false);\n      break;\n\n    case 'SMA':\n      buyStrategyDOM = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Buy at price\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"-3\",\n            onChange: e => setBuyStrategyValue(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 11\n          }, this), \"% away from SMA line.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 11\n          }, this), \"(3 = 3% above, -3 = 3% below)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 9\n        }, this)\n      }, void 0, false);\n      break;\n\n    case 'BBANDS':\n      buyStrategyDOM = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Band to follow:\", /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: e => setBuyStrategyType(e.target.value),\n            children: dropdownItems([{\n              name: 'Upper',\n              value: 'Real Upper Band'\n            }, {\n              name: 'Middle',\n              value: 'Real Lower Band'\n            }, {\n              name: 'Lower',\n              value: 'Real Middle Band'\n            }])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Buy at price\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"-3\",\n            onChange: e => setBuyStrategyValue(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 11\n          }, this), \"% away from selected line.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 11\n          }, this), \"(3 = 3% above, -3 = 3% below)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true);\n      break;\n\n    default:\n      buyStrategyDOM = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"buy strat dom default\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 25\n      }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row mx-4 my-2\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card w-25\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [backtest.indicator, \" Settings\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Select Series Type:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: e => setSeriesType(e.target.value),\n          children: dropdownItems([{\n            name: 'open',\n            value: '1. open'\n          }, {\n            name: 'close',\n            value: '4. close'\n          }, {\n            name: 'high',\n            value: '2. high'\n          }, {\n            name: 'low',\n            value: '3. low'\n          }])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this), indicatorSettingDOM, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Paper Bot Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Max number of bags:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"5\",\n          onChange: e => setMaxBags(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Inital balance (USD):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0\",\n          placeholder: \"10000\",\n          onChange: e => setInitialBalance(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Inital buy type:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: e => setInitalBuyType(e.target.value),\n          children: dropdownItems([{\n            name: '($) USD',\n            value: 'usd'\n          }, {\n            name: '(%) Percent of Balance',\n            value: 'percent'\n          }, {\n            name: '(#) Number of Stocks',\n            value: 'numStocks'\n          }])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Inital buy amount:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"1500\",\n          onChange: e => setInitalBuyAmount(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this), buyStrategyDOM, /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Sell at\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"1\",\n          onChange: e => setSellStrategyValue(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this), \"% profit.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => onSubmit(),\n        className: \"btn-secondary w-25\",\n        children: \"Calculate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deleteBacktest(backtest.id),\n        className: \"btn-primary w-25\",\n        children: \"x\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card w-25\",\n      children: [\"Results overview\", /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Profit: \", backtest.profit, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Number of trades: \", backtest.numTrades]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Average bars per trade: \", backtest.avgBars]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Average profit per trade: \", backtest.avgProfit, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Buy and hold return: \", backtest.holdReturn, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card w-25\",\n      children: [\"List of trades\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message_wrap\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message_box\",\n          children: /*#__PURE__*/_jsxDEV(TradeList, {\n            tradeList: [1, 2, 3, 4, 5, 64, 5, 5, 3, 5, 453, 45, 345, 34, 5]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 295,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Backtest, \"0oPtvPizK6xO0iJ0RTLjkD6BFqk=\");\n\n_c = Backtest;\n\nvar _c;\n\n$RefreshReg$(_c, \"Backtest\");","map":{"version":3,"sources":["/Users/benjaminshiao/Desktop/react/trade-analyzer/src/components/Backtest.js"],"names":["React","useState","useContext","TradeList","GlobalContext","Backtest","backtest","profit","numTrades","avgBars","avgProfit","holdReturn","defaultTimePeriod","indicator","defaultBuyStrat","seriesType","setSeriesType","timePeriod","setTimePeriod","stdDeviation","setStdDeviation","maxBags","setMaxBags","initalBalance","setInitialBalance","initalBuyType","setInitalBuyType","initalBuyAmount","setInitalBuyAmount","buyStrategyValue","setBuyStrategyValue","buyStrategyType","setBuyStrategyType","sellStrategyValue","setSellStrategyValue","deleteBacktest","current_symbol","cache_TSDA","cache_TSDA_function","dropdownItems","items","map","item","value","name","runBacktests","paperAPICall","pairSettings","stockPriceData","stockIndicatorData","response","alert","fetch","json","Note","optionalParameters","console","log","bags","candleCount","key","Object","entries","reverse","curIndicatorValue","curStockPrice","onSubmit","indicatorSettingDOM","e","target","buyStrategyDOM","id"],"mappings":"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","sourcesContent":["import React, {useState, useContext} from 'react'\nimport TradeList from './TradeList';\n\nimport { GlobalContext } from '../context/GlobalState';\n\nexport const Backtest = ({ backtest }) => {\n  //delete this fodder backtest value later\n  backtest.profit = 5;\n  backtest.numTrades = 6;\n  backtest.avgBars = 7;\n  backtest.avgProfit = 8;\n  backtest.holdReturn = 9;\n\n  backtest.holdReturn = 430;\n  //end of fodder\n\n  const defaultTimePeriod = () => {\n    switch(backtest.indicator){\n      case 'RSI': return 14;\n      case 'EMA': return 9;\n      case 'SMA': return 9;\n      case 'BB': return 20;\n      default: return 24;\n    }\n  }\n  const defaultBuyStrat = () => {\n    switch(backtest.indicator){\n      case 'RSI': return 30;\n      case 'EMA': return -3;\n      case 'SMA': return -3;\n      case 'BB': return -3;\n      default: return -3;\n    }\n  }\n\n  const [seriesType, setSeriesType] = useState('1. open');\n  const [timePeriod, setTimePeriod] = useState(defaultTimePeriod());\n  const [stdDeviation, setStdDeviation] = useState(2);\n\n  const [maxBags, setMaxBags] = useState(5);\n  const [initalBalance, setInitialBalance] = useState(10000);\n  const [initalBuyType, setInitalBuyType] = useState('usd');\n  const [initalBuyAmount, setInitalBuyAmount] = useState(1500);\n  const [buyStrategyValue, setBuyStrategyValue] = useState(defaultBuyStrat());\n  const [buyStrategyType, setBuyStrategyType] = useState('middle'); // Used for Bollinger upper/middle/lower\n  const [sellStrategyValue, setSellStrategyValue] = useState(1);\n\n  const { deleteBacktest, current_symbol, cache_TSDA, cache_TSDA_function } = useContext(GlobalContext);\n\n  const dropdownItems = (items) => {\n    return items.map(item => <option value={item.value} key={item.name}>{item.name}</option>);\n  }\n\n  async function runBacktests(paperAPICall, pairSettings) {\n    let stockPriceData;\n    let stockIndicatorData;\n    let response;\n\n    // Ensure user has selected a stock\n    if(!current_symbol){\n      alert(\"Please select a stock to test your strategy on.\");\n      return;\n    }\n    \n    // Ensure API json for cache_TSDA exists\n    if(!cache_TSDA['Meta Data']){\n      response = await fetch(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${current_symbol}&outputsize=full&apikey=CQ5JZQYM4DG0OODA`);\n      stockPriceData = await response.json();\n      cache_TSDA_function(stockPriceData);\n\n      // Stop if MAX API\n      if(stockPriceData.Note) return;\n    }else{\n      stockPriceData = cache_TSDA;\n    }\n\n    // Make API call for stockIndicatorData\n    let optionalParameters;\n    switch(backtest.indicator){\n      case 'BBANDS':\n        optionalParameters = `&nbdevup=${pairSettings.stdDeviation}&nbdevdn=${pairSettings.stdDeviation}`;\n        break;\n      default:\n        optionalParameters = '';\n    }\n    response = await fetch(`https://www.alphavantage.co/query?function=${backtest.indicator}&symbol=${current_symbol}&interval=daily&time_period=${paperAPICall.timePeriod}&series_type=${paperAPICall.seriesType}${optionalParameters}&apikey=CQ5JZQYM4DG0OODA`);\n    stockIndicatorData = await response.json();\n    // Catches MAX API\n    if(stockIndicatorData.Note){\n      alert(\"MAX API CALLS. Please wait a minute for more. Thank you for visitng my project! However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n    }\n\n    // ****TEMP**** just to see its printing\n    console.log(stockPriceData,\"Break\\n\", stockIndicatorData);\n    \n    let bags = 500;\n          // let bagList = {};\n          // let newBag = {\n          //   \"buy-date\": \"123\",\n          //   \"buy-price\": \"69$\"\n          // };\n          // bagList[\"12-21-02\"] = newBag;\n          // console.log(bagList);\n\n          // console.log(+bagList[\"12-21-02\"][\"buy-date\"]);\n          \n          // delete bagList[\"12-21-02\"];\n\n          // console.log(bagList, bagList[\"12-21-02\"]);\n    \n    // Main loop that runs the paper trading bot algo, maintains bags/buys/sells/etc throughout 5 years (1265 trading days)\n    // Note: key == date\n    let candleCount = 0;\n    for(let [key] of Object.entries(stockIndicatorData[`Technical Analysis: ${backtest.indicator}`]).reverse()){\n      // Stop at 5 years (1265 trading days/candles)\n      if(candleCount++ === 1265) break;\n      // Skip days where no price exists\n      //if(!stockPriceData[\"Time Series (Daily)\"][`${key}`]) continue;\n      console.log(key);\n      // Essential values for iterating stock data\n\n      let curIndicatorValue = stockIndicatorData[`Technical Analysis: ${backtest.indicator}`][`${key}`][`${backtest.indicator}`];\n      let curStockPrice = stockPriceData[\"Time Series (Daily)\"][`${key}`][`${paperAPICall.seriesType}`];\n      \n      // Three parts: Iterator code, buy code, else sell\n      // Above == have default iterator code\n      // if(/*buy condition*/){\n\n      // }else if(/*sell condition*/){\n\n      // }\n\n\n\n\n      //console.log(\"price: \", curStockPrice, \"indicator: \", curIndicatorValue);\n      if(curIndicatorValue>60 && bags<500) {bags++; console.log('sale');}\n      if(curIndicatorValue<40 && bags>0) bags--;\n    }\n    \n  }\n\n  const onSubmit = () => {\n\n    const paperAPICall = { \n      // Relavent variables that are global: current_symbol, interval(daily), backtest.indicator(ex, RSI)\n      seriesType: seriesType,\n      timePeriod: +timePeriod,\n      stdDeviation: +stdDeviation\n    };\n\n    const pairSettings = {\n      maxBags: +maxBags,\n      initalBalance: +initalBalance,\n      initalBuyType: initalBuyType,\n      initalBuyAmount: +initalBuyAmount,\n      buyStrategyValue: +buyStrategyValue,\n      buyStrategyType, // used for Bollinger upper/middle/lower\n      sellStrategyValue: +sellStrategyValue\n    }\n\n    // Ensure no trivial strategies are submitted\n    if(pairSettings.maxBags<1 || pairSettings.initalBalance<1 || pairSettings.initalBuyAmount<1 || pairSettings.sellStrategyValue<0 || paperAPICall.timePeriod<1){\n      // Bags, balance, timeperiod, buy amount, sell gain% must be positive\n      alert(\"Please enter valid inputs. Use positive integers for the following: Max bags, Sell percentage, Time period, Buy amount, Inital Balance.\");\n    }else if(pairSettings.initalBuyType==='percent' && (pairSettings.initalBuyAmount<1 || pairSettings.initalBuyAmount>100)){\n      // if(buy type is percent) buy amount must be (0-100]\n      alert(\"Buy amount percentage must be 1-100%\");\n    }else if (pairSettings.initalBuyAmount>pairSettings.initalBalance){\n      // inital buy must be < inital balance\n      alert(\"Inital buys must be less than or equal to inital balance.\");\n    }else if(backtest.indicator==='RSI' && (pairSettings.buyStrategyValue<1 || pairSettings.buyStrategyValue>99)){\n      // Ensure no trivial strategy specific settings are submitted <connect to previous if chain thing>\n      alert(\"RSI values must be between 1-99\");\n    }else if(backtest.indicator==='BBANDS' && paperAPICall.stdDeviation<0.5){\n      // Ensure no trivial BB std deviation\n      alert(\"Standard Deviation must be greater than or equal to 0.5.\");\n    }else{\n      // Calculation inputs valid, run backtest algorithm\n      runBacktests(paperAPICall, pairSettings);\n    }\n  }\n\n  let indicatorSettingDOM = null;\n  switch(backtest.indicator){\n    case 'RSI':\n      indicatorSettingDOM = (<> \n        {/* Time Period(# candles in calc) */}\n        <label>\n          Time Period:\n          <input type='number' placeholder='14' onChange={(e) => setTimePeriod(e.target.value)} />\n        </label>\n      </>);\n      break;\n    case 'EMA':\n      indicatorSettingDOM = (<> \n        {/* Time Period(# candles in calc) */}\n        <label>\n          Time Period:\n          <input type='number' placeholder='9' onChange={(e) => setTimePeriod(e.target.value)} />\n        </label>\n      </>);\n      break;\n    case 'SMA':\n      indicatorSettingDOM = (<> \n        {/* Time Period(# candles in calc) */}\n        <label>\n          Time Period:\n          <input type='number' placeholder='9' onChange={(e) => setTimePeriod(e.target.value)} />\n        </label>\n      </>);\n      break;\n    case 'BBANDS':\n      indicatorSettingDOM = (<> \n        {/* Time Period(# candles in calc) */}\n        <label>\n          Time Period:\n          <input type='number' placeholder='20' onChange={(e) => setTimePeriod(e.target.value)} />\n        </label>\n\n        {/* Standard deviation for both top/bot lines */}\n        <label>\n          Standard Deviation for upper/lower lines:\n          <input type='number' placeholder='2' onChange={(e) => setStdDeviation(e.target.value)} />\n        </label>\n      </>);\n      break;\n    default:\n      indicatorSettingDOM = (<div>indicaator setting dom default</div>);\n    \n  }\n\n  let buyStrategyDOM = null;\n  switch(backtest.indicator){\n    case 'RSI':\n      buyStrategyDOM = (<> \n        {/* Buy Strategy RSI */}\n        <label>\n          Buy at RSI {\"<\"}\n          <input type='number' placeholder='30' onChange={(e) => setBuyStrategyValue(e.target.value)} />\n        </label>\n      </>);\n      break;\n    case 'EMA':\n      buyStrategyDOM = (<> \n        {/* Buy strategy % away */}\n        <label>\n          Buy at price \n          <input type='number' placeholder='-3' onChange={(e) => setBuyStrategyValue(e.target.value)} />\n          % away from EMA line. \n          <br/>\n          (3 = 3% above, -3 = 3% below)\n        </label>\n      </>);\n      break;\n    case 'SMA':\n      buyStrategyDOM = (<> \n        {/* Buy strategy % away */}\n        <label>\n          Buy at price \n          <input type='number' placeholder='-3' onChange={(e) => setBuyStrategyValue(e.target.value)} />\n          % away from SMA line. \n          <br/>\n          (3 = 3% above, -3 = 3% below)\n        </label>\n      </>);\n      break;\n    case 'BBANDS':\n      buyStrategyDOM = (<> \n        {/* Buy strategy % away (BB) */}\n        <label>\n          Band to follow:  \n          <select onChange={(e) => setBuyStrategyType(e.target.value)}>\n            {dropdownItems([\n              {name:'Upper', value:'Real Upper Band'},\n              {name:'Middle', value:'Real Lower Band'},\n              {name:'Lower', value:'Real Middle Band'}])}\n          </select>\n        </label>\n        <label>\n          Buy at price \n          <input type='number' placeholder='-3' onChange={(e) => setBuyStrategyValue(e.target.value)} />\n          % away from selected line. \n          <br/>\n          (3 = 3% above, -3 = 3% below)\n        </label>\n      </>);\n      break;\n    default:\n      buyStrategyDOM = (<div>buy strat dom default</div>);\n    \n  }\n\n  return (\n    <div className='row mx-4 my-2'>\n      <div className='card w-25'>\n        {/* Beginning of Settings */}\n        <h4>{backtest.indicator} Settings</h4>\n\n        {/* series type */}\n        <label>\n          Select Series Type:\n          <select onChange={(e) => setSeriesType(e.target.value)}>\n            {dropdownItems([\n              {name:'open', value:'1. open'},\n              {name:'close', value:'4. close'},\n              {name:'high', value:'2. high'},\n              {name:'low', value:'3. low'}])}\n          </select>\n        </label>\n        \n        {indicatorSettingDOM}\n\n        <br/>\n\n        <label>Paper Bot Settings</label>\n        {/* Max number bags */}\n        <label>\n          Max number of bags:\n          <input type='number' placeholder='5' onChange={(e) => setMaxBags(e.target.value)} />\n        </label>\n\n        {/* Inital balance */}\n        <label>\n        Inital balance (USD):\n          <input type='number' min='0' placeholder='10000' onChange={(e) => setInitialBalance(e.target.value)} />\n        </label>\n\n        {/* Inital buy (type/amount) */}\n        <label>\n        Inital buy type:\n          <select onChange={(e) => setInitalBuyType(e.target.value)}>\n            {dropdownItems([\n                {name:'($) USD', value:'usd'},\n                {name:'(%) Percent of Balance', value:'percent'},\n                {name:'(#) Number of Stocks', value:'numStocks'}])}\n            </select>\n        </label>\n        <label>\n        Inital buy amount:\n          <input type='number' placeholder='1500' onChange={(e) => setInitalBuyAmount(e.target.value)} />\n        </label>\n\n        {buyStrategyDOM}\n\n        {/* Sell Strategy */}\n        <label>\n          Sell at \n          <input type='number' placeholder='1' onChange={(e) => setSellStrategyValue(e.target.value)} />\n          % profit.\n        </label>\n\n        {/* submit button */}\n        <button onClick={() => onSubmit()} className=\"btn-secondary w-25\">Calculate</button>\n\n\n        {/* close button */}\n        <button onClick={() => deleteBacktest(backtest.id)} className=\"btn-primary w-25\">x</button>\n      </div>\n      {/* end of settings, beginning of results overview */}\n\n      <div className='card w-25'>\n        Results overview\n        <label>Profit: {backtest.profit}%</label>\n        <label>Number of trades: {backtest.numTrades}</label>\n        <label>Average bars per trade: {backtest.avgBars}</label>\n        <label>Average profit per trade: {backtest.avgProfit}%</label>\n        <label>Buy and hold return: {backtest.holdReturn}%</label>\n\n      </div>\n      \n      {/* End of results overview, begin list of trades */}\n\n      <div className='card w-25'>\n        List of trades\n        <div className=\"message_wrap\">\n          <div className=\"message_box\">\n            <TradeList tradeList={[1,2,3,4,5,64,5,5,3,5,453,45,345,34,5]}/>\n          </div>\n        </div>\n      </div>\n      \n      {/* End list of trades */}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}