{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/benjaminshiao/Desktop/react/trade-analyzer/src/components/Backtest.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport { GlobalContext } from '../context/GlobalState';\nexport const Backtest = ({\n  backtest\n}) => {\n  _s();\n\n  const [timeInterval, setTimeInterval] = useState('daily');\n  const [seriesType, setSeriesType] = useState('close');\n  const [maxBags, setMaxBags] = useState(5);\n  const [initalBalance, setInitialBalance] = useState(10000);\n  const [initalBuyType, setInitalBuyType] = useState('usd');\n  const [initalBuyAmount, setInitalBuyAmount] = useState(1500);\n  const [buyStrategyValue, setBuyStrategyValue] = useState(30);\n  const [sellStrategyValue, setSellStrategyValue] = useState(1);\n  const {\n    deleteBacktest,\n    current_symbol\n  } = useContext(GlobalContext);\n  /*\n    ema: function, symbol, interval,time period, series type,\n    Sma: function, symbol, interval,time period, series type,\n    rsi: function, symbol, interval,time period, series type\n     //do below later\n    bba: function, symbol, interval,time period, series type, (optionals: dev up, dev down, move avg type)\n    MACD:function, symbol, interval, series type, (optional: fastperiod, slow period, signalperiod)\n    OBv: function, symbol, interval\n    STOCH: function, symbol, interval, (optionals: fast K period, slow K period, slow D period, slow K ma type, slow D ma type)\n     pair settings:\n    max bags : int\n    inital balance: int\n    inital bag cost: int or percent\n    strategy: selected already... customize the indicator... depending which one, ask user for buy value(-x%)....rebuy delay:int....\n    Sell strategy: GAIN... sell profit %\n     optional future: trailing buy/sell... stop loss.... DCA system... average bag values(for sell strategy)\n    */\n\n  const onSubmit = () => {\n    const paperAPICall = {\n      indicator: backtest.indicator,\n      symbol: current_symbol,\n      //this kinda optional bc current_symbol is in global state already...\n      timeInterval: timeInterval,\n      seriesType: seriesType\n    };\n    const pairSettings = {\n      maxBags: +maxBags,\n      initalBalance: +initalBalance,\n      initalBuyType: initalBuyType,\n      initalBuyAmount: +initalBuyAmount,\n      buyStrategyValue: +buyStrategyValue,\n      sellStrategyValue: +sellStrategyValue\n    }; // Ensure no trivial strategies are submitted\n    // Bags, balance, buy amount, sell gain% must be positive\n    // if(buy type is percent) buy amount must be (0-100]\n    // inital buy must be < inital balance\n\n    if (pairSettings.maxBags < 1 || pairSettings.initalBalance < 1 || pairSettings.initalBuyAmount < 1 || pairSettings.sellStrategyValue < 0 || pairSettings.initalBuyType === 'percent' && (pairSettings.initalBuyAmount < 0 || pairSettings.initalBuyAmount > 100) || pairSettings.initalBuyAmount > pairSettings.initalBalance) {\n      alert(\"Please enter valid inputs. Negative values are not allowed.\");\n    } // Ensure no trivial strategy specific settings are submitted \n\n\n    if (backtest.indicator === 'RSI' && (pairSettings.buyStrategyValue < 0 || pairSettings.buyStrategyValue > 100)) {\n      alert(\"RSI values must be between 0-100\");\n    }\n\n    console.log(paperAPICall, pairSettings);\n  };\n\n  switch (backtest.indicator) {\n    case 'RSI':\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card col-3\",\n          children: [backtest.indicator, /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Select Interval:\", /*#__PURE__*/_jsxDEV(\"select\", {\n              onChange: e => setTimeInterval(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"daily\",\n                children: \"Daily\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"60min\",\n                children: \"60 minutes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"15min\",\n                children: \"15 minutes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Select Series Type:\", /*#__PURE__*/_jsxDEV(\"select\", {\n              onChange: e => setSeriesType(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"close\",\n                children: \"close\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"open\",\n                children: \"open\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"high\",\n                children: \"high\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"low\",\n                children: \"low\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Paper Bot Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Max number of bags:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              placeholder: \"5\",\n              onChange: e => setMaxBags(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Inital balance (USD):\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"0\",\n              placeholder: \"10000\",\n              onChange: e => setInitialBalance(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Inital buy type:\", /*#__PURE__*/_jsxDEV(\"select\", {\n              onChange: e => setInitalBuyType(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"usd\",\n                children: \"($) USD\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"percent\",\n                children: \"(%) Percent of Balance\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"numStocks\",\n                children: \"(#) Number of Stocks\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Inital buy amount:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              placeholder: \"1500\",\n              onChange: e => setInitalBuyAmount(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Buy at RSI \", \"<\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              placeholder: \"30\",\n              onChange: e => setBuyStrategyValue(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Sell at\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              placeholder: \"2\",\n              onChange: e => setSellStrategyValue(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 15\n            }, this), \"% profit.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => onSubmit(),\n            className: \"btn-secondary w-25\",\n            children: \"Calculate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => deleteBacktest(backtest.id),\n            className: \"btn-primary w-25\",\n            children: \"x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this);\n\n    case 'EMA':\n      return /*#__PURE__*/_jsxDEV(\"li\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this);\n\n    case 'SMA':\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [backtest.indicator, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteBacktest(backtest.id),\n          className: \"btn-primary\",\n          children: \"x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this);\n\n    default:\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"default item\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteBacktest(backtest.id),\n          className: \"btn-primary\",\n          children: \"x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this);\n  }\n};\n\n_s(Backtest, \"uYnXDKg91do9YD3iDcPeZGodk2k=\");\n\n_c = Backtest;\n\nvar _c;\n\n$RefreshReg$(_c, \"Backtest\");","map":{"version":3,"sources":["/Users/benjaminshiao/Desktop/react/trade-analyzer/src/components/Backtest.js"],"names":["React","useState","useContext","GlobalContext","Backtest","backtest","timeInterval","setTimeInterval","seriesType","setSeriesType","maxBags","setMaxBags","initalBalance","setInitialBalance","initalBuyType","setInitalBuyType","initalBuyAmount","setInitalBuyAmount","buyStrategyValue","setBuyStrategyValue","sellStrategyValue","setSellStrategyValue","deleteBacktest","current_symbol","onSubmit","paperAPICall","indicator","symbol","pairSettings","alert","console","log","e","target","value","id"],"mappings":"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","sourcesContent":["import React, {useState, useContext} from 'react'\nimport { GlobalContext } from '../context/GlobalState';\n\nexport const Backtest = ({ backtest }) => {\n  const [timeInterval, setTimeInterval] = useState('daily');\n  const [seriesType, setSeriesType] = useState('close');\n\n  const [maxBags, setMaxBags] = useState(5);\n  const [initalBalance, setInitialBalance] = useState(10000);\n  const [initalBuyType, setInitalBuyType] = useState('usd');\n  const [initalBuyAmount, setInitalBuyAmount] = useState(1500);\n  const [buyStrategyValue, setBuyStrategyValue] = useState(30);\n  const [sellStrategyValue, setSellStrategyValue] = useState(1);\n\n  const { deleteBacktest, current_symbol } = useContext(GlobalContext);\n\n  /*\n    ema: function, symbol, interval,time period, series type,\n    Sma: function, symbol, interval,time period, series type,\n    rsi: function, symbol, interval,time period, series type\n\n    //do below later\n    bba: function, symbol, interval,time period, series type, (optionals: dev up, dev down, move avg type)\n    MACD:function, symbol, interval, series type, (optional: fastperiod, slow period, signalperiod)\n    OBv: function, symbol, interval\n    STOCH: function, symbol, interval, (optionals: fast K period, slow K period, slow D period, slow K ma type, slow D ma type)\n\n    pair settings:\n    max bags : int\n    inital balance: int\n    inital bag cost: int or percent\n    strategy: selected already... customize the indicator... depending which one, ask user for buy value(-x%)....rebuy delay:int....\n    Sell strategy: GAIN... sell profit %\n\n    optional future: trailing buy/sell... stop loss.... DCA system... average bag values(for sell strategy)\n\n\n  */\n  const onSubmit = () => {\n\n    const paperAPICall = { \n      indicator: backtest.indicator,\n      symbol: current_symbol, //this kinda optional bc current_symbol is in global state already...\n      timeInterval: timeInterval,\n      seriesType: seriesType\n    };\n\n    const pairSettings = {\n      maxBags: +maxBags,\n      initalBalance: +initalBalance,\n      initalBuyType: initalBuyType,\n      initalBuyAmount: +initalBuyAmount,\n      buyStrategyValue: +buyStrategyValue,\n      sellStrategyValue: +sellStrategyValue\n    }\n    // Ensure no trivial strategies are submitted\n    // Bags, balance, buy amount, sell gain% must be positive\n    // if(buy type is percent) buy amount must be (0-100]\n    // inital buy must be < inital balance\n    if(pairSettings.maxBags<1 || pairSettings.initalBalance<1 || pairSettings.initalBuyAmount<1 || pairSettings.sellStrategyValue<0 \n            || (pairSettings.initalBuyType==='percent' && (pairSettings.initalBuyAmount<0 || pairSettings.initalBuyAmount>100))\n            || (pairSettings.initalBuyAmount>pairSettings.initalBalance)){\n      alert(\"Please enter valid inputs. Negative values are not allowed.\");\n    }\n\n    // Ensure no trivial strategy specific settings are submitted \n    if(backtest.indicator==='RSI' && (pairSettings.buyStrategyValue<0 || pairSettings.buyStrategyValue>100)){\n      alert(\"RSI values must be between 0-100\");\n    }\n\n    console.log(paperAPICall, pairSettings);\n  }\n\n\n  switch(backtest.indicator){\n    case 'RSI':\n      return (\n        <li>\n          <div className='card col-3'>\n            {/* title */}\n            {backtest.indicator}\n        \n            {/* time interval */}\n            <label>\n              Select Interval:\n              <select onChange={(e) => setTimeInterval(e.target.value)}>\n                <option value=\"daily\">Daily</option>\n                <option value=\"60min\">60 minutes</option>\n                <option value=\"15min\">15 minutes</option>\n              </select>\n            </label>\n\n            {/* series type */}\n            <label>\n              Select Series Type:\n              <select onChange={(e) => setSeriesType(e.target.value)}>\n                <option value=\"close\">close</option>\n                <option value=\"open\">open</option>\n                <option value=\"high\">high</option>\n                <option value=\"low\">low</option>\n              </select>\n            </label>\n            <br/>\n            <label>Paper Bot Settings</label>\n            {/* Max number bags */}\n            <label>\n              Max number of bags:\n              <input type='number' placeholder='5' onChange={(e) => setMaxBags(e.target.value)} />\n            </label>\n\n            {/* Inital balance */}\n            <label>\n            Inital balance (USD):\n              <input type='number' min='0' placeholder='10000' onChange={(e) => setInitialBalance(e.target.value)} />\n            </label>\n\n            {/* Inital buy (type/amount) */}\n            <label>\n            Inital buy type:\n              <select onChange={(e) => setInitalBuyType(e.target.value)}>\n                  <option value=\"usd\">($) USD</option>\n                  <option value=\"percent\">(%) Percent of Balance</option>\n                  <option value=\"numStocks\">(#) Number of Stocks</option>\n                </select>\n            </label>\n            <label>\n            Inital buy amount:\n              <input type='number' placeholder='1500' onChange={(e) => setInitalBuyAmount(e.target.value)} />\n            </label>\n\n            {/* Buy Strategy */}\n            <label>\n              Buy at RSI {\"<\"}\n              <input type='number' placeholder='30' onChange={(e) => setBuyStrategyValue(e.target.value)} />\n            </label>\n\n            {/* Sell Strategy */}\n            <label>\n              Sell at \n              <input type='number' placeholder='2' onChange={(e) => setSellStrategyValue(e.target.value)} />\n              % profit.\n            </label>\n\n            {/* submit button */}\n            <button onClick={() => onSubmit()} className=\"btn-secondary w-25\">Calculate</button>\n\n\n            {/* close button */}\n            <button onClick={() => deleteBacktest(backtest.id)} className=\"btn-primary w-25\">x</button>\n          </div>\n        </li>\n      )\n    case 'EMA':\n      return (\n        <li>\n        </li>\n      )\n    case 'SMA':\n      return (\n        <li>\n          {/* like a div here, has buttons/ parameters... case statement to catch the indicator type and determine return type */}\n          {backtest.indicator} \n          <button \n              onClick={() => deleteBacktest(backtest.id)} className=\"btn-primary\">x\n              \n          </button>\n        </li>\n      )\n    default:\n      return (\n        <li>\n          default item\n          <button \n              onClick={() => deleteBacktest(backtest.id)} className=\"btn-primary\">x\n          </button>\n        </li>\n      )\n    \n  }\n}\n"]},"metadata":{},"sourceType":"module"}