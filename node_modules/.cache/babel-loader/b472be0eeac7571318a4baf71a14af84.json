{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/benjaminshiao/Desktop/react/trade-analyzer/src/components/Balance.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport * as d3 from \"d3\";\nimport Chart from \"../components/chart-components/Chart\";\nimport { GlobalContext } from '../context/GlobalState';\nimport \"../chart.css\";\nexport const Balance = () => {\n  _s();\n\n  //grab global variables/functions to call in this file\n  const {\n    transactions,\n    graphData_AV_API\n  } = useContext(GlobalContext);\n  const amounts = transactions.map(transaction => transaction.amount);\n  const total = amounts.reduce((acc, item) => acc += item, 0).toFixed(2); //temp graph d3 example--------------------------\n\n  const chart_width = window.screen.availWidth * 2 / 3;\n  const chart_height = window.screen.availHeight * 2 / 3; // Processes API call and sends data to candlestick chart.\n\n  const processGraphData = () => {\n    let split_ratio = 1.0;\n    let xAxis_times = [];\n    let graphDataProcessed = []; // Iterate/translate API call to fit my charts inputs\n\n    for (let myDate in graphData_AV_API['Time Series (Daily)']) {\n      xAxis_times.push(myDate);\n      graphDataProcessed.push({\n        \"open\": +graphData_AV_API['Time Series (Daily)'][myDate]['1. open'] / split_ratio,\n        \"close\": +graphData_AV_API['Time Series (Daily)'][myDate]['4. close'] / split_ratio,\n        \"high\": +graphData_AV_API['Time Series (Daily)'][myDate]['2. high'] / split_ratio,\n        \"low\": +graphData_AV_API['Time Series (Daily)'][myDate]['3. low'] / split_ratio,\n        \"volume\": +graphData_AV_API['Time Series (Daily)'][myDate]['6. volume']\n      });\n      split_ratio *= +graphData_AV_API['Time Series (Daily)'][myDate]['8. split coefficient'];\n    } // console.log(data['Meta Data']['2. Symbol']); to find symbol for 1D,1W... buttons\n\n\n    const length = xAxis_times.length; // Below return traanslates lines 26-36 bc idk how to format this type of object\n\n    return d3.range(length).map((item, i) => {\n      console.log(xAxis_times[i]);\n      return {\n        time: i,\n        open: graphDataProcessed[i]['open'],\n        high: graphDataProcessed[i]['high'],\n        low: graphDataProcessed[i]['low'],\n        close: graphDataProcessed[i]['close'],\n        volume: graphDataProcessed[i]['volume']\n      };\n    });\n  }; // Only for intialization: maybe make it display SPY as default\n\n\n  const [data, setData] = useState(() => processGraphData()); // Whenever graphData_AV_API is changed, code below will update graph\n\n  useEffect(() => {\n    setData(processGraphData());\n  }, [graphData_AV_API]); //candlestick tutorial end-----\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Your Balance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      data: data,\n      width: chart_width,\n      height: chart_height\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"$\", total]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Balance, \"/ZihTlXhdYEcycIE2QjA5Sm9qTc=\");\n\n_c = Balance;\n\nvar _c;\n\n$RefreshReg$(_c, \"Balance\");","map":{"version":3,"sources":["/Users/benjaminshiao/Desktop/react/trade-analyzer/src/components/Balance.js"],"names":["React","useContext","useEffect","useState","d3","Chart","GlobalContext","Balance","transactions","graphData_AV_API","amounts","map","transaction","amount","total","reduce","acc","item","toFixed","chart_width","window","screen","availWidth","chart_height","availHeight","processGraphData","split_ratio","xAxis_times","graphDataProcessed","myDate","push","length","range","i","console","log","time","open","high","low","close","volume","data","setData"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport * as d3 from \"d3\";\nimport Chart from \"../components/chart-components/Chart\";\n\nimport { GlobalContext } from '../context/GlobalState';\nimport \"../chart.css\";\n\n\nexport const Balance = () => {\n  //grab global variables/functions to call in this file\n  const { transactions, graphData_AV_API } = useContext(GlobalContext);\n\n  const amounts = transactions.map(transaction => transaction.amount);\n\n  const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\n\n  //temp graph d3 example--------------------------\n  const chart_width = window.screen.availWidth*2/3;\n  const chart_height = window.screen.availHeight*2/3;\n\n  // Processes API call and sends data to candlestick chart.\n  const processGraphData = () => {\n    let split_ratio = 1.0;\n    let xAxis_times = [];\n    let graphDataProcessed = [];\n\n    // Iterate/translate API call to fit my charts inputs\n    for(let myDate in graphData_AV_API['Time Series (Daily)']){\n      xAxis_times.push(myDate);\n      graphDataProcessed.push({\n        \"open\": +graphData_AV_API['Time Series (Daily)'][myDate]['1. open']/split_ratio,\n        \"close\": +graphData_AV_API['Time Series (Daily)'][myDate]['4. close']/split_ratio,\n        \"high\": +graphData_AV_API['Time Series (Daily)'][myDate]['2. high']/split_ratio,\n        \"low\": +graphData_AV_API['Time Series (Daily)'][myDate]['3. low']/split_ratio,\n        \"volume\": +graphData_AV_API['Time Series (Daily)'][myDate]['6. volume']\n      });\n      split_ratio *= +graphData_AV_API['Time Series (Daily)'][myDate]['8. split coefficient'];\n    }\n     // console.log(data['Meta Data']['2. Symbol']); to find symbol for 1D,1W... buttons\n    \n    const length = xAxis_times.length;\n    // Below return traanslates lines 26-36 bc idk how to format this type of object\n    return d3.range(length).map((item, i) => {\n      console.log(xAxis_times[i]);\n      return {\n        time: i,\n        open: graphDataProcessed[i]['open'],\n        high: graphDataProcessed[i]['high'],\n        low: graphDataProcessed[i]['low'],\n        close: graphDataProcessed[i]['close'],\n        volume: graphDataProcessed[i]['volume']\n      };\n    });\n  };\n  \n  // Only for intialization: maybe make it display SPY as default\n  const [data, setData] = useState(() => processGraphData());\n  // Whenever graphData_AV_API is changed, code below will update graph\n  useEffect(() => {\n    setData(processGraphData());\n  }, [graphData_AV_API]);\n  //candlestick tutorial end-----\n\n\n  return (\n    <>\n      <h4>Your Balance</h4>\n\n      <Chart data={data} width={chart_width} height={chart_height} />\n      <h1>${total}</h1>\n    </>\n  )\n}\n\n\n"]},"metadata":{},"sourceType":"module"}