{"ast":null,"code":"var _jsxFileName = \"/Users/benjaminshiao/Desktop/react/trade-analyzer/src/context/GlobalState.js\";\nimport React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer'; // Initial state\n\nconst initialState = {\n  transactions: [],\n  symbol_list: [],\n  symbolToGraph: ''\n}; // Create context\n\nexport const GlobalContext = createContext(initialState); // Provider component\n\nexport const GlobalProvider = ({\n  children\n}) => {\n  const [state, dispatch] = useReducer(AppReducer, initialState); // Actions\n\n  function deleteTransaction(id) {\n    dispatch({\n      type: 'DELETE_TRANSACTION',\n      payload: id\n    });\n  }\n\n  function addTransaction(transaction) {\n    dispatch({\n      type: 'ADD_TRANSACTION',\n      payload: transaction\n    });\n  }\n\n  async function stockSearch(searchInput) {\n    //API call for searching stock tickers\n    let response = await fetch(`https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${searchInput.text}&apikey=CQ5JZQYM4DG0OODA`);\n    let data = await response.json(); //console.log(data);\n    //create temp list\n\n    let new_symbol_list = []; //Alerts API limit reached\n\n    if (data.Note) {\n      alert(\"MAX API CALLS. Please wait a minute. Thank you for visitng my project! However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n    } else {\n      //iterate over all search results\n      Object.keys(data.bestMatches).forEach(e => {\n        //filter non-US stocks, then add\n        if (data.bestMatches[e][\"4. region\"] === \"United States\") {\n          let new_symbol = {\n            symbol: data.bestMatches[e][\"1. symbol\"],\n            name: data.bestMatches[e][\"2. name\"]\n          };\n          new_symbol_list = [new_symbol, ...new_symbol_list];\n        } // console.log(data.bestMatches[e]); \n\n      });\n    } //update state of web app (official symbol_list)\n\n\n    dispatch({\n      type: 'STOCK_SEARCH',\n      payload: new_symbol_list\n    });\n  }\n\n  function selectSymbol(selectedSymbol) {\n    console.log(\"hi ben, you have selected \", selectedSymbol); //API call here using `selectedSymbol`\n\n    const tempTest = {\n      text: selectedSymbol\n    };\n    dispatch({\n      type: 'DISPLAY_GRAPHS',\n      payload: tempTest\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(GlobalContext.Provider, {\n    value: {\n      transactions: state.transactions,\n      symbol_list: state.symbol_list,\n      deleteTransaction,\n      addTransaction,\n      stockSearch,\n      selectSymbol\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, children, /*#__PURE__*/React.createElement(\"script\", {\n    src: \"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js\",\n    integrity: \"sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW\",\n    crossOrigin: \"anonymous\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/benjaminshiao/Desktop/react/trade-analyzer/src/context/GlobalState.js"],"names":["React","createContext","useReducer","AppReducer","initialState","transactions","symbol_list","symbolToGraph","GlobalContext","GlobalProvider","children","state","dispatch","deleteTransaction","id","type","payload","addTransaction","transaction","stockSearch","searchInput","response","fetch","text","data","json","new_symbol_list","Note","alert","Object","keys","bestMatches","forEach","e","new_symbol","symbol","name","selectSymbol","selectedSymbol","console","log","tempTest"],"mappings":"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","sourcesContent":["import React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer';\n\n// Initial state\nconst initialState = {\n  transactions: [],\n  symbol_list: [], \n  symbolToGraph: ''\n}\n\n// Create context\nexport const GlobalContext = createContext(initialState);\n\n// Provider component\nexport const GlobalProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\n  // Actions\n  function deleteTransaction(id) {\n    dispatch({\n      type: 'DELETE_TRANSACTION',\n      payload: id\n    });\n  }\n\n  function addTransaction(transaction) {\n    dispatch({\n      type: 'ADD_TRANSACTION',\n      payload: transaction\n    });\n  }\n\n  async function stockSearch(searchInput) {\n    //API call for searching stock tickers\n    let response = await fetch(`https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${searchInput.text}&apikey=CQ5JZQYM4DG0OODA`);\n    let data = await response.json();\n    //console.log(data);\n\n    //create temp list\n    let new_symbol_list = [];\n\n    //Alerts API limit reached\n    if(data.Note){\n      alert(\"MAX API CALLS. Please wait a minute. Thank you for visitng my project! However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n    }else{\n      //iterate over all search results\n      Object.keys(data.bestMatches).forEach( (e) => {\n        //filter non-US stocks, then add\n        if(data.bestMatches[e][\"4. region\"] === \"United States\"){\n          let new_symbol = {\n            symbol: data.bestMatches[e][\"1. symbol\"],\n            name: data.bestMatches[e][\"2. name\"]\n          }\n          new_symbol_list = [new_symbol, ...new_symbol_list];\n        }\n        // console.log(data.bestMatches[e]); \n      });\n    }\n\n    //update state of web app (official symbol_list)\n    dispatch({\n      type: 'STOCK_SEARCH',\n      payload: new_symbol_list\n    });\n  }\n\n  function selectSymbol(selectedSymbol) {\n    console.log(\"hi ben, you have selected \", selectedSymbol);\n    //API call here using `selectedSymbol`\n    const tempTest  = { text: selectedSymbol}\n\n\n    dispatch({\n      type: 'DISPLAY_GRAPHS',\n      payload: tempTest\n    });\n  }\n\n  return (<GlobalContext.Provider value={{\n    transactions: state.transactions,\n    symbol_list: state.symbol_list,\n    deleteTransaction,\n    addTransaction,\n    stockSearch,\n    selectSymbol\n  }}>\n    {children}\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW\" crossOrigin=\"anonymous\"></script>\n      \n  </GlobalContext.Provider>);\n}"]},"metadata":{},"sourceType":"module"}