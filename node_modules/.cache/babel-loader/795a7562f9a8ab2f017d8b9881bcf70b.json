{"ast":null,"code":"var _jsxFileName = \"/Users/benjaminshiao/Desktop/react/trade-analyzer/src/context/GlobalState.js\";\nimport React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer'; // Initial state\n\nconst initialState = {\n  transactions: [],\n  symbol_list: []\n}; // Create context\n\nexport const GlobalContext = createContext(initialState); // Provider component\n\nexport const GlobalProvider = ({\n  children\n}) => {\n  const [state, dispatch] = useReducer(AppReducer, initialState); // Actions\n\n  function deleteTransaction(id) {\n    dispatch({\n      type: 'DELETE_TRANSACTION',\n      payload: id\n    });\n  }\n\n  function addTransaction(transaction) {\n    dispatch({\n      type: 'ADD_TRANSACTION',\n      payload: transaction\n    });\n  }\n\n  async function stockSearch(searchInput) {\n    //API call for searching stock tickers\n    let response = await fetch(`https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${searchInput}&apikey=CQ5JZQYM4DG0OODA`);\n    let data = await response.json(); //console.log(data);\n    //Alerts API limit reached\n\n    if (data.Note) {\n      alert(\"MAX API CALLS. Please wait a minute. Thank you for visitng my project! However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n    }\n\n    dispatch({\n      type: 'RUN_SEARCH',\n      payload: searchInput\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(GlobalContext.Provider, {\n    value: {\n      transactions: state.transactions,\n      deleteTransaction,\n      addTransaction,\n      stockSearch\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, children);\n};","map":{"version":3,"sources":["/Users/benjaminshiao/Desktop/react/trade-analyzer/src/context/GlobalState.js"],"names":["React","createContext","useReducer","AppReducer","initialState","transactions","symbol_list","GlobalContext","GlobalProvider","children","state","dispatch","deleteTransaction","id","type","payload","addTransaction","transaction","stockSearch","searchInput","response","fetch","data","json","Note","alert"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CAEA;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,YAAY,EAAE,EADK;AAEnBC,EAAAA,WAAW,EAAE;AAFM,CAArB,C,CAKA;;AACA,OAAO,MAAMC,aAAa,GAAGN,aAAa,CAACG,YAAD,CAAnC,C,CAEP;;AACA,OAAO,MAAMI,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC9C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,UAAU,CAACC,UAAD,EAAaC,YAAb,CAApC,CAD8C,CAG9C;;AACA,WAASQ,iBAAT,CAA2BC,EAA3B,EAA+B;AAC7BF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAE,oBADC;AAEPC,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID;;AAED,WAASG,cAAT,CAAwBC,WAAxB,EAAqC;AACnCN,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAE,iBADC;AAEPC,MAAAA,OAAO,EAAEE;AAFF,KAAD,CAAR;AAID;;AAED,iBAAeC,WAAf,CAA2BC,WAA3B,EAAwC;AACtC;AACA,QAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAE,qEAAoEF,WAAY,0BAAlF,CAA1B;AACA,QAAIG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAjB,CAHsC,CAItC;AAEA;;AACA,QAAGD,IAAI,CAACE,IAAR,EAAa;AACXC,MAAAA,KAAK,CAAC,uMAAD,CAAL;AACD;;AAEDd,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAE,YADC;AAEPC,MAAAA,OAAO,EAAEI;AAFF,KAAD,CAAR;AAID;;AAED,sBAAQ,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AACrCd,MAAAA,YAAY,EAAEK,KAAK,CAACL,YADiB;AAErCO,MAAAA,iBAFqC;AAGrCI,MAAAA,cAHqC;AAIrCE,MAAAA;AAJqC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMLT,QANK,CAAR;AAQD,CA3CM","sourcesContent":["import React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer';\n\n// Initial state\nconst initialState = {\n  transactions: [],\n  symbol_list: [], \n}\n\n// Create context\nexport const GlobalContext = createContext(initialState);\n\n// Provider component\nexport const GlobalProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\n  // Actions\n  function deleteTransaction(id) {\n    dispatch({\n      type: 'DELETE_TRANSACTION',\n      payload: id\n    });\n  }\n\n  function addTransaction(transaction) {\n    dispatch({\n      type: 'ADD_TRANSACTION',\n      payload: transaction\n    });\n  }\n\n  async function stockSearch(searchInput) {\n    //API call for searching stock tickers\n    let response = await fetch(`https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${searchInput}&apikey=CQ5JZQYM4DG0OODA`);\n    let data = await response.json();\n    //console.log(data);\n\n    //Alerts API limit reached\n    if(data.Note){\n      alert(\"MAX API CALLS. Please wait a minute. Thank you for visitng my project! However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n    }\n\n    dispatch({\n      type: 'RUN_SEARCH',\n      payload: searchInput\n    });\n  }\n\n  return (<GlobalContext.Provider value={{\n    transactions: state.transactions,\n    deleteTransaction,\n    addTransaction,\n    stockSearch\n  }}>\n    {children}\n  </GlobalContext.Provider>);\n}"]},"metadata":{},"sourceType":"module"}