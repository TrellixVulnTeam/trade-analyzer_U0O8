{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/benjaminshiao/Desktop/react/trade-analyzer/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport { select } from \"d3\";\nimport { Header } from './components/Header';\nimport { Balance } from './components/Balance';\nimport { IncomeExpenses } from './components/IncomeExpenses';\nimport { TransactionList } from './components/TransactionList';\nimport { AddTransaction } from './components/AddTransaction';\nimport { SearchResults } from './components/SearchResults';\nimport { GraphSection } from './components/GraphSection';\nimport { GlobalProvider } from './context/GlobalState';\nimport './App.css';\n\nfunction App() {\n  _s();\n\n  const [data, setData] = useState([25, 33, 44, 53, 23]);\n  const svgRef = useRef();\n  useEffect(() => {\n    const svg = select(svgRef.current); //now can use all d3 commands and stuff\n\n    svg.selectAll(\"circle\").data(data).join(enter => enter.append(\"circle\") //effects circles we add\n    .attr(\"r\", value => value).attr(\"cx\", value => value * 2).attr(\"cy\", value => value * 2).attr(\"stroke\", \"red\"), update => update.attr(\"class\", \"updated\"), //effects circles that we update(exist in html alr)\n    exit => exit.remove() //delete else, or remove\n    ); //add .attr here to effect ALL circles\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(GlobalProvider, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchResults, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GraphSection, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Balance, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(IncomeExpenses, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddTransaction, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      children: \" \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"89z1O8qzG2dz0ODMSaWNOpqMe/4=\");\n\n_c = App;\nexport default App;\n/*\nimport React, { useRef } from 'react';\nimport { select } from \"d3\";\n\nline 15->\nconst svgRef = useRef();\nuseEffect( () = > {\n  consolglog(svgref)\n  const svg = select(svgRef.current);//now can use all d3 commands and stuff\n  svg.selectAll(\"circle\").data(data)\n    .join(\n      enter => enter.append(\"circle\")     //effects circles we add\n        .attr(\"r\", value => value)\n        .attr(\"cx\", value => value*2)\n        .attr(\"cy\", value => value*2)\n        .attr(\"stroke\", \"red\"),\n      update => update.attr(\"class\", \"updated\"),    //effects circles that we update(exist in html alr)\n      exit => exit.remove()                         //delete else, or remove\n    )                                               //add .attr here to effect ALL circles\n\n}, []);\n\nhtml-->\n<svg ref = {svgRef}> </svg>\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/benjaminshiao/Desktop/react/trade-analyzer/src/App.js"],"names":["React","useRef","useEffect","useState","select","Header","Balance","IncomeExpenses","TransactionList","AddTransaction","SearchResults","GraphSection","GlobalProvider","App","data","setData","svgRef","svg","current","selectAll","join","enter","append","attr","value","update","exit","remove"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,MAAT,QAAuB,IAAvB;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,SAASC,eAAT,QAAgC,8BAAhC;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,SAASC,aAAT,QAA8B,4BAA9B;AACA,SAASC,YAAT,QAA6B,2BAA7B;AAEA,SAASC,cAAT,QAA+B,uBAA/B;AAEA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,EAAU,EAAV,EAAa,EAAb,CAAD,CAAhC;AACA,QAAMa,MAAM,GAAGf,MAAM,EAArB;AAEAC,EAAAA,SAAS,CAAE,MAAM;AACf,UAAMe,GAAG,GAAGb,MAAM,CAACY,MAAM,CAACE,OAAR,CAAlB,CADe,CACoB;;AACnCD,IAAAA,GAAG,CAACE,SAAJ,CAAc,QAAd,EAAwBL,IAAxB,CAA6BA,IAA7B,EACGM,IADH,CAEIC,KAAK,IAAIA,KAAK,CAACC,MAAN,CAAa,QAAb,EAA2B;AAA3B,KACNC,IADM,CACD,GADC,EACIC,KAAK,IAAIA,KADb,EAEND,IAFM,CAED,IAFC,EAEKC,KAAK,IAAIA,KAAK,GAAC,CAFpB,EAGND,IAHM,CAGD,IAHC,EAGKC,KAAK,IAAIA,KAAK,GAAC,CAHpB,EAIND,IAJM,CAID,QAJC,EAIS,KAJT,CAFb,EAOIE,MAAM,IAAIA,MAAM,CAACF,IAAP,CAAY,OAAZ,EAAqB,SAArB,CAPd,EAOkD;AAC9CG,IAAAA,IAAI,IAAIA,IAAI,CAACC,MAAL,EARZ,CAQkD;AARlD,MAFe,CAWmC;AAEnD,GAbQ,EAaN,CAACb,IAAD,CAbM,CAAT;AAeA,sBACE,QAAC,cAAD;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YALF,eAME,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,YANF,eAOE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YAPF,eAQE;AAAK,MAAA,GAAG,EAAIE,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GA/BQH,G;;KAAAA,G;AAiCT,eAAeA,GAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport { select } from \"d3\";\nimport { Header } from './components/Header';\nimport { Balance } from './components/Balance';\nimport { IncomeExpenses } from './components/IncomeExpenses';\nimport { TransactionList } from './components/TransactionList';\nimport { AddTransaction } from './components/AddTransaction';\nimport { SearchResults } from './components/SearchResults';\nimport { GraphSection } from './components/GraphSection';\n\nimport { GlobalProvider } from './context/GlobalState';\n\nimport './App.css';\n\nfunction App() {\n  const [data, setData] = useState([25,33,44,53,23]);\n  const svgRef = useRef();\n\n  useEffect( () => {\n    const svg = select(svgRef.current);//now can use all d3 commands and stuff\n    svg.selectAll(\"circle\").data(data)\n      .join(\n        enter => enter.append(\"circle\")     //effects circles we add\n          .attr(\"r\", value => value)\n          .attr(\"cx\", value => value*2)\n          .attr(\"cy\", value => value*2)\n          .attr(\"stroke\", \"red\"),\n        update => update.attr(\"class\", \"updated\"),    //effects circles that we update(exist in html alr)\n        exit => exit.remove()                         //delete else, or remove\n      )                                               //add .attr here to effect ALL circles\n\n  }, [data]);\n\n  return (\n    <GlobalProvider>\n      <Header />\n      <SearchResults />\n      <GraphSection />\n      <Balance />\n      <IncomeExpenses />\n      <TransactionList />\n      <AddTransaction />\n      <svg ref = {svgRef}> </svg>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n\n/*\nimport React, { useRef } from 'react';\nimport { select } from \"d3\";\n\nline 15->\nconst svgRef = useRef();\nuseEffect( () = > {\n  consolglog(svgref)\n  const svg = select(svgRef.current);//now can use all d3 commands and stuff\n  svg.selectAll(\"circle\").data(data)\n    .join(\n      enter => enter.append(\"circle\")     //effects circles we add\n        .attr(\"r\", value => value)\n        .attr(\"cx\", value => value*2)\n        .attr(\"cy\", value => value*2)\n        .attr(\"stroke\", \"red\"),\n      update => update.attr(\"class\", \"updated\"),    //effects circles that we update(exist in html alr)\n      exit => exit.remove()                         //delete else, or remove\n    )                                               //add .attr here to effect ALL circles\n\n}, []);\n\nhtml-->\n<svg ref = {svgRef}> </svg>\n*/"]},"metadata":{},"sourceType":"module"}