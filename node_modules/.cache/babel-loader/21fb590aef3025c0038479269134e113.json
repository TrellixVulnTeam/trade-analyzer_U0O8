{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/benjaminshiao/Desktop/react/trade-analyzer/src/components/Backtest.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport TradeList from './TradeList';\nimport { GlobalContext } from '../context/GlobalState';\nexport const Backtest = ({\n  backtest\n}) => {\n  _s();\n\n  const defaultTimePeriod = () => {\n    switch (backtest.indicator) {\n      case 'RSI':\n        return 14;\n\n      case 'EMA':\n        return 9;\n\n      case 'SMA':\n        return 9;\n\n      case 'BB':\n        return 20;\n\n      default:\n        return 24;\n    }\n  };\n\n  const defaultBuyStrat = () => {\n    switch (backtest.indicator) {\n      case 'RSI':\n        return 30;\n\n      case 'EMA':\n        return -3;\n\n      case 'SMA':\n        return -3;\n\n      case 'BB':\n        return -3;\n\n      default:\n        return -3;\n    }\n  };\n\n  const [seriesType, setSeriesType] = useState('1. open');\n  const [timePeriod, setTimePeriod] = useState(defaultTimePeriod());\n  const [stdDeviation, setStdDeviation] = useState(2);\n  const [maxBags, setMaxBags] = useState(5);\n  const [initalBalance, setInitialBalance] = useState(10000);\n  const [initalBuyType, setInitalBuyType] = useState('usd');\n  const [initalBuyAmount, setInitalBuyAmount] = useState(1500);\n  const [buyStrategyValue, setBuyStrategyValue] = useState(defaultBuyStrat());\n  const [buyStrategyType, setBuyStrategyType] = useState('Real Middle Band'); // Used for Bollinger upper/middle/lower\n\n  const [sellStrategyValue, setSellStrategyValue] = useState(1);\n  const {\n    deleteBacktest,\n    current_symbol,\n    cache_TSDA,\n    cache_TSDA_function\n  } = useContext(GlobalContext); // Used for JSX dropdown items\n\n  const dropdownItems = items => {\n    return items.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: item.value,\n      children: item.name\n    }, item.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 30\n    }, this));\n  }; // Calculates USD value for creating a bag\n\n\n  function calcInitalBuy(buyType, buyAmount, currentBalance, curStockPrice) {\n    switch (buyType) {\n      case \"numStocks\":\n        return curStockPrice * buyAmount;\n\n      case \"percent\":\n        return currentBalance * (buyAmount / 100.00);\n\n      default:\n        // case \"usd\":\n        return buyAmount;\n    }\n  } // Function to return true/false for buy condition, given price and indicator values\n\n\n  function isBuyConditionMet(buyStrategyValue, curStockPrice, curIndicatorValue) {\n    switch (backtest.indicator) {\n      case \"RSI\":\n        return curIndicatorValue < buyStrategyValue;\n\n      default:\n        // case EMA, SMA, BB (all cases where indicator is a price of stock)\n        return curStockPrice <= curIndicatorValue * ((100.0 + buyStrategyValue) / 100.0);\n    }\n  } // Returns JSON name of element for indicator item\n\n\n  function getIndicatorJSON() {\n    switch (backtest.indicator) {\n      case \"BBANDS\":\n        return buyStrategyType;\n\n      default:\n        return backtest.indicator;\n    }\n  } // Finalizes trade, storing buy/sell data into backtest.tradeListData\n\n\n  function finalizeTrade(myBag, buyDate, sellDate, candleCountSell, sellPrice, curIndicatorValue, numShares) {\n    const percentChange = sellPrice / myBag[\"buy-price\"] * myBag[\"volume-USD\"];\n    backtest.tradeListData.push({\n      buyDate,\n      sellDate,\n      numShares,\n      profitPercent: +percentChange - 1,\n      profitUSD: +(percentChange - 1) * myBag[\"volume-USD\"],\n      candleLength: candleCountSell - myBag[\"candle-count-buy\"],\n      indicatorAtSell: curIndicatorValue,\n      indicatorAtBuy: myBag[\"indicator-at-buy\"]\n    });\n    console.log(percentChange, buyDate, sellDate);\n  } // Runs user specified backtest algorithms and prepares outputs/trades to display\n\n\n  async function runBacktests(paperAPICall, pairSettings) {\n    let stockPriceData;\n    let stockIndicatorData;\n    let response; // Ensure user has selected a stock\n\n    if (!current_symbol) {\n      alert(\"Please select a stock to test your strategy on.\");\n      return;\n    } // Ensure API json for cache_TSDA exists\n\n\n    if (!cache_TSDA['Meta Data']) {\n      response = await fetch(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${current_symbol}&outputsize=full&apikey=CQ5JZQYM4DG0OODA`);\n      stockPriceData = await response.json();\n      cache_TSDA_function(stockPriceData); // Stop if MAX API\n\n      if (stockPriceData.Note) return;\n    } else {\n      stockPriceData = cache_TSDA;\n    } // Make API call for stockIndicatorData\n\n\n    let optionalParameters;\n\n    switch (backtest.indicator) {\n      case 'BBANDS':\n        optionalParameters = `&nbdevup=${pairSettings.stdDeviation}&nbdevdn=${pairSettings.stdDeviation}`;\n        break;\n\n      default:\n        optionalParameters = '';\n    }\n\n    response = await fetch(`https://www.alphavantage.co/query?function=${backtest.indicator}&symbol=${current_symbol}&interval=daily&time_period=${paperAPICall.timePeriod}&series_type=${paperAPICall.seriesType}${optionalParameters}&apikey=CQ5JZQYM4DG0OODA`);\n    stockIndicatorData = await response.json(); // Catches MAX API\n\n    if (stockIndicatorData.Note) {\n      alert(\"MAX API CALLS. Please wait a minute for more. Thank you for visitng my project! However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n    } // Initalize bags/candle-count/currentBalance\n\n\n    let candleCount = 0;\n    let bagList = {};\n    bagList.length = 0;\n    let currentBalance = pairSettings.initalBalance; // Initalize single integer to know lowest price I consider selling at(updated when new bags are added)\n\n    let lowestSellPrice = 0; // Main loop that runs the paper trading bot algo, maintains bags/buys/sells/etc throughout 5 years (1265 trading days)\n    // Note: in the following for loop: key == date\n\n    for (let [key] of Object.entries(stockIndicatorData[`Technical Analysis: ${backtest.indicator}`]).reverse()) {\n      // ***PROBleM***\n      // Stop at 5 years (1265 trading days/candles)\n      // if(candleCount++ === 1265) break;\n      // Skip days where no price exists\n      if (!stockPriceData[\"Time Series (Daily)\"][`${key}`]) continue; // Essential values for iterating stock data\n\n      let curIndicatorValue = +stockIndicatorData[`Technical Analysis: ${backtest.indicator}`][`${key}`][`${getIndicatorJSON()}`];\n      let curStockPrice = +stockPriceData[\"Time Series (Daily)\"][`${key}`][`${paperAPICall.seriesType}`]; // Prospective USD to create a new bag\n\n      const newBagVolume = calcInitalBuy(pairSettings.initalBuyType, pairSettings.initalBuyAmount, currentBalance, curStockPrice); // If Buy condition: Bags open, balance sufficient, price meets indicator limit\n\n      if (bagList.length < pairSettings.maxBags && newBagVolume <= currentBalance && isBuyConditionMet(pairSettings.buyStrategyValue, curStockPrice, curIndicatorValue)) {\n        // Create and add bag to bagList, increment bagList.length. Automatically added by creating key.\n        bagList.length++;\n        console.log(\"bag added\");\n        bagList[`${key}`] = {\n          \"sell-price-limit\": +(1 + pairSettings.sellStrategyValue / 100) * curStockPrice,\n          \"buy-price\": +curStockPrice,\n          \"candle-count-buy\": +candleCount,\n          \"volume-USD\": +newBagVolume,\n          \"num-shares\": +newBagVolume / curStockPrice,\n          \"indicator-at-buy\": curIndicatorValue\n        }; // Update currentBalance\n\n        currentBalance -= bagList[`${key}`][\"volume-USD\"]; // Update lowestSellPrice, min of current lowest, or new buy price is lower. Initialize if only 1 bag.\n\n        if (bagList.length === 1) {\n          lowestSellPrice = +bagList[`${key}`][\"sell-price-limit\"];\n        } else {\n          lowestSellPrice = Math.min(lowestSellPrice, bagList[`${key}`][\"sell-price-limit\"]);\n        } // Else If Sell Condition\n\n      } else if (curStockPrice >= lowestSellPrice && bagList.length > 0) {\n        // Store key of buy date(below loop has new key in smaller scope)\n        let sellDate = key;\n\n        for (let [key] of Object.entries(bagList)) {\n          if (curStockPrice >= bagList[`${key}`][\"sell-price-limit\"]) {\n            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`\n            //~~~~~Finalize Trade function(defined day 31), records profits for display\n            //~~~~~ this is where any outputs would be defined from all this iterating\n            //~~~~~~              bag               buy date, sell date, sell#candle\n            // ~~~~ finalizeTrade(bagList[`${key}`], key, purchaseDate, candleCount, curStockPrice, curIndicatorValue);\n            //things it ... find change in price (curStockPrice/buy-price)*volume-USD\n            //              updates backtest..profit(-->avg profit at end), numTrades, netBars(-->avg bars at end),(-->hold profit at end)\n            //              stores curTradePairs? some results vector for tradeListData\n            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`\n            finalizeTrade(bagList[`${key}`], key, sellDate, candleCount, curStockPrice, curIndicatorValue, bagList[`${key}`][\"num-shares\"], bagList[`${key}`][\"indicator-at-buy\"]);\n            delete bagList[`${key}`];\n            bagList.length--;\n          }\n        } // If bags exist, update to new lowest price\n\n\n        const newBagListKeys = Object.entries(bagList);\n\n        if (newBagListKeys[0][1] > 0) {\n          lowestSellPrice = bagList[newBagListKeys[1][0]][\"sell-price-limit\"];\n\n          for (let [key] of newBagListKeys) {\n            lowestSellPrice = Math.min(lowestSellPrice, +bagList[`${key}`][\"sell-price-limit\"]);\n          }\n        }\n      } // End of Buy/Sell conditions\n      //console.log(key, \"price: \", curStockPrice, \"indicator: \", curIndicatorValue);\n      // while(curIndicatorValue>60 && bags<500) {bags++; console.log('sale', bags); balance += +curStockPrice;}\n      // if(curIndicatorValue<40 && bags>0) {console.log(\"buy\"); bags--; balance -= +curStockPrice;}\n\n    }\n\n    console.log(\"iterating done\"); //~~~~need code here to calc:\n    //~~~~ update backtest.....avgProfit, avgBars, holdReturn, \n    //~~~~ send the outputs for frontend display\n  }\n\n  const onSubmit = () => {\n    const paperAPICall = {\n      // Relavent variables that are global: current_symbol, interval(daily), backtest.indicator(ex, RSI)\n      seriesType: seriesType,\n      timePeriod: +timePeriod,\n      stdDeviation: +stdDeviation\n    };\n    const pairSettings = {\n      maxBags: +maxBags,\n      initalBalance: +initalBalance,\n      initalBuyType: initalBuyType,\n      initalBuyAmount: +initalBuyAmount,\n      buyStrategyValue: +buyStrategyValue,\n      buyStrategyType,\n      // used for Bollinger upper/middle/lower\n      sellStrategyValue: +sellStrategyValue\n    }; // Ensure no trivial strategies are submitted\n\n    if (pairSettings.maxBags < 1 || pairSettings.initalBalance < 1 || pairSettings.initalBuyAmount < 1 || pairSettings.sellStrategyValue < 0 || paperAPICall.timePeriod < 1) {\n      // Bags, balance, timeperiod, buy amount, sell gain% must be positive\n      alert(\"Please enter valid inputs. Use positive integers for the following: Max bags, Sell percentage, Time period, Buy amount, Inital Balance.\");\n    } else if (pairSettings.initalBuyType === 'percent' && (pairSettings.initalBuyAmount < 1 || pairSettings.initalBuyAmount > 100)) {\n      // if(buy type is percent) buy amount must be (0-100]\n      alert(\"Buy amount percentage must be 1-100%\");\n    } else if (pairSettings.initalBuyAmount > pairSettings.initalBalance) {\n      // inital buy must be < inital balance\n      alert(\"Inital buys must be less than or equal to inital balance.\");\n    } else if (backtest.indicator === 'RSI' && (pairSettings.buyStrategyValue < 1 || pairSettings.buyStrategyValue > 99)) {\n      // Ensure no trivial strategy specific settings are submitted <connect to previous if chain thing>\n      alert(\"RSI values must be between 1-99\");\n    } else if (backtest.indicator === 'BBANDS' && paperAPICall.stdDeviation < 0.5) {\n      // Ensure no trivial BB std deviation\n      alert(\"Standard Deviation must be greater than or equal to 0.5.\");\n    } else {\n      // Calculation inputs valid, run backtest algorithm\n      console.log(pairSettings);\n      runBacktests(paperAPICall, pairSettings);\n    }\n\n    backtest.tradeListData = [];\n  };\n\n  let indicatorSettingDOM = null;\n\n  switch (backtest.indicator) {\n    case 'RSI':\n      indicatorSettingDOM = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Time Period:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"14\",\n            onChange: e => setTimePeriod(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 9\n        }, this)\n      }, void 0, false);\n      break;\n\n    case 'EMA':\n      indicatorSettingDOM = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Time Period:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"9\",\n            onChange: e => setTimePeriod(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 9\n        }, this)\n      }, void 0, false);\n      break;\n\n    case 'SMA':\n      indicatorSettingDOM = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Time Period:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"9\",\n            onChange: e => setTimePeriod(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 9\n        }, this)\n      }, void 0, false);\n      break;\n\n    case 'BBANDS':\n      indicatorSettingDOM = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Time Period:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"20\",\n            onChange: e => setTimePeriod(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Standard Deviation for upper/lower lines:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"2\",\n            onChange: e => setStdDeviation(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true);\n      break;\n\n    default:\n      indicatorSettingDOM = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"indicaator setting dom default\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 30\n      }, this);\n  }\n\n  let buyStrategyDOM = null;\n\n  switch (backtest.indicator) {\n    case 'RSI':\n      buyStrategyDOM = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Buy when RSI less than\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"30\",\n            onChange: e => setBuyStrategyValue(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 9\n        }, this)\n      }, void 0, false);\n      break;\n\n    case 'EMA':\n      buyStrategyDOM = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Buy at price\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"-3\",\n            onChange: e => setBuyStrategyValue(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 11\n          }, this), \"% away from the EMA line.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 11\n          }, this), \"(3 = 3% above, -3 = 3% below)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 9\n        }, this)\n      }, void 0, false);\n      break;\n\n    case 'SMA':\n      buyStrategyDOM = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Buy at price\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"-3\",\n            onChange: e => setBuyStrategyValue(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 11\n          }, this), \"% away from the SMA line.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 11\n          }, this), \"(3 = 3% above, -3 = 3% below)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 9\n        }, this)\n      }, void 0, false);\n      break;\n\n    case 'BBANDS':\n      buyStrategyDOM = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Band to follow:\", /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: e => setBuyStrategyType(e.target.value),\n            children: dropdownItems([{\n              name: 'Middle',\n              value: 'Real Middle Band'\n            }, {\n              name: 'Upper',\n              value: 'Real Upper Band'\n            }, {\n              name: 'Lower',\n              value: 'Real Lower Band'\n            }])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Buy at price\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"-3\",\n            onChange: e => setBuyStrategyValue(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 11\n          }, this), \"% away from the selected line.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 11\n          }, this), \"(3 = 3% above, -3 = 3% below)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true);\n      break;\n\n    default:\n      buyStrategyDOM = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"buy strat dom default\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 25\n      }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row mx-4 my-2\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card w-25\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [backtest.indicator, \" Settings\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Select Series Type:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: e => setSeriesType(e.target.value),\n          children: dropdownItems([{\n            name: 'open',\n            value: '1. open'\n          }, {\n            name: 'close',\n            value: '4. close'\n          }, {\n            name: 'high',\n            value: '2. high'\n          }, {\n            name: 'low',\n            value: '3. low'\n          }])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this), indicatorSettingDOM, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Paper Bot Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Max number of bags:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"5\",\n          onChange: e => setMaxBags(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Inital balance (USD):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0\",\n          placeholder: \"10000\",\n          onChange: e => setInitialBalance(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Inital buy type:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: e => setInitalBuyType(e.target.value),\n          children: dropdownItems([{\n            name: '($) USD',\n            value: 'usd'\n          }, {\n            name: '(%) Percent of Balance',\n            value: 'percent'\n          }, {\n            name: '(#) Number of Stocks',\n            value: 'numStocks'\n          }])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Inital buy amount:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"1500\",\n          onChange: e => setInitalBuyAmount(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }, this), buyStrategyDOM, /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Sell at\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"1\",\n          onChange: e => setSellStrategyValue(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 11\n        }, this), \"% profit.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => onSubmit(),\n        className: \"btn-secondary w-25\",\n        children: \"Calculate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deleteBacktest(backtest.id),\n        className: \"btn-primary w-25\",\n        children: \"x\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card w-25\",\n      children: [\"Results overview\", /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Profit: \", backtest.profit, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Number of trades: \", backtest.numTrades]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Average bars per trade: \", backtest.avgBars]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Average profit per trade: \", backtest.avgProfit, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Buy and hold return: \", backtest.holdReturn, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card w-25\",\n      children: [\"List of trades\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message_wrap\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message_box\",\n          children: /*#__PURE__*/_jsxDEV(TradeList, {\n            tradeList: [1, 2, 3, 4, 5, 64, 5, 5, 3, 5, 453, 45, 345, 34, 5]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 386,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Backtest, \"bgBE9pes6agtrLuSkJzLkA61TZ0=\");\n\n_c = Backtest;\n\nvar _c;\n\n$RefreshReg$(_c, \"Backtest\");","map":{"version":3,"sources":["/Users/benjaminshiao/Desktop/react/trade-analyzer/src/components/Backtest.js"],"names":["React","useState","useContext","TradeList","GlobalContext","Backtest","backtest","defaultTimePeriod","indicator","defaultBuyStrat","seriesType","setSeriesType","timePeriod","setTimePeriod","stdDeviation","setStdDeviation","maxBags","setMaxBags","initalBalance","setInitialBalance","initalBuyType","setInitalBuyType","initalBuyAmount","setInitalBuyAmount","buyStrategyValue","setBuyStrategyValue","buyStrategyType","setBuyStrategyType","sellStrategyValue","setSellStrategyValue","deleteBacktest","current_symbol","cache_TSDA","cache_TSDA_function","dropdownItems","items","map","item","value","name","calcInitalBuy","buyType","buyAmount","currentBalance","curStockPrice","isBuyConditionMet","curIndicatorValue","getIndicatorJSON","finalizeTrade","myBag","buyDate","sellDate","candleCountSell","sellPrice","numShares","percentChange","tradeListData","push","profitPercent","profitUSD","candleLength","indicatorAtSell","indicatorAtBuy","console","log","runBacktests","paperAPICall","pairSettings","stockPriceData","stockIndicatorData","response","alert","fetch","json","Note","optionalParameters","candleCount","bagList","length","lowestSellPrice","key","Object","entries","reverse","newBagVolume","Math","min","newBagListKeys","onSubmit","indicatorSettingDOM","e","target","buyStrategyDOM","id","profit","numTrades","avgBars","avgProfit","holdReturn"],"mappings":"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","sourcesContent":["import React, {useState, useContext} from 'react'\nimport TradeList from './TradeList';\n\nimport { GlobalContext } from '../context/GlobalState';\n\nexport const Backtest = ({ backtest }) => {\n\n  const defaultTimePeriod = () => {\n    switch(backtest.indicator){\n      case 'RSI': return 14;\n      case 'EMA': return 9;\n      case 'SMA': return 9;\n      case 'BB': return 20;\n      default: return 24;\n    }\n  }\n  const defaultBuyStrat = () => {\n    switch(backtest.indicator){\n      case 'RSI': return 30;\n      case 'EMA': return -3;\n      case 'SMA': return -3;\n      case 'BB': return -3;\n      default: return -3;\n    }\n  }\n\n  const [seriesType, setSeriesType] = useState('1. open');\n  const [timePeriod, setTimePeriod] = useState(defaultTimePeriod());\n  const [stdDeviation, setStdDeviation] = useState(2);\n\n  const [maxBags, setMaxBags] = useState(5);\n  const [initalBalance, setInitialBalance] = useState(10000);\n  const [initalBuyType, setInitalBuyType] = useState('usd');\n  const [initalBuyAmount, setInitalBuyAmount] = useState(1500);\n  const [buyStrategyValue, setBuyStrategyValue] = useState(defaultBuyStrat());\n  const [buyStrategyType, setBuyStrategyType] = useState('Real Middle Band'); // Used for Bollinger upper/middle/lower\n  const [sellStrategyValue, setSellStrategyValue] = useState(1);\n\n  const { deleteBacktest, current_symbol, cache_TSDA, cache_TSDA_function } = useContext(GlobalContext);\n\n  // Used for JSX dropdown items\n  const dropdownItems = (items) => {\n    return items.map(item => <option value={item.value} key={item.name}>{item.name}</option>);\n  }\n\n  // Calculates USD value for creating a bag\n  function calcInitalBuy(buyType, buyAmount, currentBalance, curStockPrice) {\n    switch(buyType){\n      case \"numStocks\":\n        return curStockPrice*buyAmount;\n      case \"percent\":\n        return currentBalance * (buyAmount/100.00);\n      default:\n        // case \"usd\":\n        return buyAmount;\n\n    }\n  }\n\n  // Function to return true/false for buy condition, given price and indicator values\n  function isBuyConditionMet(buyStrategyValue, curStockPrice, curIndicatorValue) {\n    switch(backtest.indicator){\n      case \"RSI\":\n        return curIndicatorValue < buyStrategyValue;\n      default:\n        // case EMA, SMA, BB (all cases where indicator is a price of stock)\n        return curStockPrice <= (curIndicatorValue * ((100.0 + buyStrategyValue)/100.0))\n    }\n  }\n\n  // Returns JSON name of element for indicator item\n  function getIndicatorJSON() {\n    switch(backtest.indicator){\n      case \"BBANDS\":\n        return buyStrategyType;\n      default:\n        return backtest.indicator;\n\n    }\n  }\n\n  // Finalizes trade, storing buy/sell data into backtest.tradeListData\n  function finalizeTrade(myBag, buyDate, sellDate, candleCountSell, sellPrice, curIndicatorValue, numShares) {\n    const percentChange = (sellPrice/myBag[\"buy-price\"])*myBag[\"volume-USD\"];\n    (backtest.tradeListData).push({\n      buyDate,\n      sellDate,\n      numShares,\n      profitPercent: +percentChange-1,\n      profitUSD: +(percentChange-1)*myBag[\"volume-USD\"],\n      candleLength: candleCountSell-myBag[\"candle-count-buy\"],\n      indicatorAtSell: curIndicatorValue,\n      indicatorAtBuy: myBag[\"indicator-at-buy\"]\n    });\n    console.log(percentChange, buyDate, sellDate);\n\n  }\n\n  // Runs user specified backtest algorithms and prepares outputs/trades to display\n  async function runBacktests(paperAPICall, pairSettings) {\n    let stockPriceData;\n    let stockIndicatorData;\n    let response;\n\n    // Ensure user has selected a stock\n    if(!current_symbol){\n      alert(\"Please select a stock to test your strategy on.\");\n      return;\n    }\n    \n    // Ensure API json for cache_TSDA exists\n    if(!cache_TSDA['Meta Data']){\n      response = await fetch(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${current_symbol}&outputsize=full&apikey=CQ5JZQYM4DG0OODA`);\n      stockPriceData = await response.json();\n      cache_TSDA_function(stockPriceData);\n\n      // Stop if MAX API\n      if(stockPriceData.Note) return;\n    }else{\n      stockPriceData = cache_TSDA;\n    }\n\n    // Make API call for stockIndicatorData\n    let optionalParameters;\n    switch(backtest.indicator){\n      case 'BBANDS':\n        optionalParameters = `&nbdevup=${pairSettings.stdDeviation}&nbdevdn=${pairSettings.stdDeviation}`;\n        break;\n      default:\n        optionalParameters = '';\n    }\n    response = await fetch(`https://www.alphavantage.co/query?function=${backtest.indicator}&symbol=${current_symbol}&interval=daily&time_period=${paperAPICall.timePeriod}&series_type=${paperAPICall.seriesType}${optionalParameters}&apikey=CQ5JZQYM4DG0OODA`);\n    stockIndicatorData = await response.json();\n    // Catches MAX API\n    if(stockIndicatorData.Note){\n      alert(\"MAX API CALLS. Please wait a minute for more. Thank you for visitng my project! However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n    }\n\n    // Initalize bags/candle-count/currentBalance\n    let candleCount = 0;\n    let bagList = {};\n    bagList.length = 0;\n    let currentBalance = pairSettings.initalBalance;\n    // Initalize single integer to know lowest price I consider selling at(updated when new bags are added)\n    let lowestSellPrice = 0;\n    // Main loop that runs the paper trading bot algo, maintains bags/buys/sells/etc throughout 5 years (1265 trading days)\n    // Note: in the following for loop: key == date\n    for(let [key] of Object.entries(stockIndicatorData[`Technical Analysis: ${backtest.indicator}`]).reverse()){\n      \n      // ***PROBleM***\n      // Stop at 5 years (1265 trading days/candles)\n      // if(candleCount++ === 1265) break;\n\n\n      // Skip days where no price exists\n      if(!stockPriceData[\"Time Series (Daily)\"][`${key}`]) continue;\n      // Essential values for iterating stock data\n      let curIndicatorValue = +stockIndicatorData[`Technical Analysis: ${backtest.indicator}`][`${key}`][`${getIndicatorJSON()}`];\n      let curStockPrice = +stockPriceData[\"Time Series (Daily)\"][`${key}`][`${paperAPICall.seriesType}`];\n    \n\n      // Prospective USD to create a new bag\n      const newBagVolume = calcInitalBuy(pairSettings.initalBuyType, pairSettings.initalBuyAmount, currentBalance, curStockPrice);\n\n      // If Buy condition: Bags open, balance sufficient, price meets indicator limit\n      if(bagList.length<pairSettings.maxBags && newBagVolume <= currentBalance && isBuyConditionMet(pairSettings.buyStrategyValue, curStockPrice, curIndicatorValue)){\n        // Create and add bag to bagList, increment bagList.length. Automatically added by creating key.\n        bagList.length++;\n        console.log(\"bag added\");\n        bagList[`${key}`] = {\n          \"sell-price-limit\": +(1+(pairSettings.sellStrategyValue/100)) * curStockPrice,\n          \"buy-price\": +curStockPrice,\n          \"candle-count-buy\": +candleCount,\n          \"volume-USD\": +newBagVolume,\n          \"num-shares\": +newBagVolume/curStockPrice,\n          \"indicator-at-buy\": curIndicatorValue\n        }\n\n        // Update currentBalance\n        currentBalance -= bagList[`${key}`][\"volume-USD\"];\n\n        // Update lowestSellPrice, min of current lowest, or new buy price is lower. Initialize if only 1 bag.\n        if(bagList.length===1){\n          lowestSellPrice = +bagList[`${key}`][\"sell-price-limit\"];\n        }else{\n          lowestSellPrice = Math.min(lowestSellPrice, bagList[`${key}`][\"sell-price-limit\"]);\n        }\n      // Else If Sell Condition\n      }else if(curStockPrice>= lowestSellPrice && bagList.length>0){\n        // Store key of buy date(below loop has new key in smaller scope)\n        let sellDate = key;\n        for(let [key] of Object.entries(bagList)){ \n          if(curStockPrice >= bagList[`${key}`][\"sell-price-limit\"]){\n            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`\n            //~~~~~Finalize Trade function(defined day 31), records profits for display\n            //~~~~~ this is where any outputs would be defined from all this iterating\n            //~~~~~~              bag               buy date, sell date, sell#candle\n            // ~~~~ finalizeTrade(bagList[`${key}`], key, purchaseDate, candleCount, curStockPrice, curIndicatorValue);\n            //things it ... find change in price (curStockPrice/buy-price)*volume-USD\n            //              updates backtest..profit(-->avg profit at end), numTrades, netBars(-->avg bars at end),(-->hold profit at end)\n            //              stores curTradePairs? some results vector for tradeListData\n            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`\n            finalizeTrade(bagList[`${key}`], key, sellDate, candleCount, curStockPrice, curIndicatorValue, bagList[`${key}`][\"num-shares\"], bagList[`${key}`][\"indicator-at-buy\"]);\n            delete bagList[`${key}`];\n            bagList.length--;\n          }\n        }\n\n        // If bags exist, update to new lowest price\n        const newBagListKeys = Object.entries(bagList);\n        if(newBagListKeys[0][1]>0){\n          lowestSellPrice = bagList[newBagListKeys[1][0]][\"sell-price-limit\"];\n          for(let [key] of newBagListKeys){ \n            lowestSellPrice = Math.min(lowestSellPrice, +bagList[`${key}`][\"sell-price-limit\"]);\n          }\n        }\n      }\n      // End of Buy/Sell conditions\n\n\n\n      //console.log(key, \"price: \", curStockPrice, \"indicator: \", curIndicatorValue);\n      // while(curIndicatorValue>60 && bags<500) {bags++; console.log('sale', bags); balance += +curStockPrice;}\n      // if(curIndicatorValue<40 && bags>0) {console.log(\"buy\"); bags--; balance -= +curStockPrice;}\n    }\n    console.log(\"iterating done\");\n    //~~~~need code here to calc:\n    //~~~~ update backtest.....avgProfit, avgBars, holdReturn, \n    //~~~~ send the outputs for frontend display\n  }\n\n  const onSubmit = () => {\n\n    const paperAPICall = { \n      // Relavent variables that are global: current_symbol, interval(daily), backtest.indicator(ex, RSI)\n      seriesType: seriesType,\n      timePeriod: +timePeriod,\n      stdDeviation: +stdDeviation\n    };\n\n    const pairSettings = {\n      maxBags: +maxBags,\n      initalBalance: +initalBalance,\n      initalBuyType: initalBuyType,\n      initalBuyAmount: +initalBuyAmount,\n      buyStrategyValue: +buyStrategyValue,\n      buyStrategyType, // used for Bollinger upper/middle/lower\n      sellStrategyValue: +sellStrategyValue\n    }\n\n    // Ensure no trivial strategies are submitted\n    if(pairSettings.maxBags<1 || pairSettings.initalBalance<1 || pairSettings.initalBuyAmount<1 || pairSettings.sellStrategyValue<0 || paperAPICall.timePeriod<1){\n      // Bags, balance, timeperiod, buy amount, sell gain% must be positive\n      alert(\"Please enter valid inputs. Use positive integers for the following: Max bags, Sell percentage, Time period, Buy amount, Inital Balance.\");\n    }else if(pairSettings.initalBuyType==='percent' && (pairSettings.initalBuyAmount<1 || pairSettings.initalBuyAmount>100)){\n      // if(buy type is percent) buy amount must be (0-100]\n      alert(\"Buy amount percentage must be 1-100%\");\n    }else if (pairSettings.initalBuyAmount>pairSettings.initalBalance){\n      // inital buy must be < inital balance\n      alert(\"Inital buys must be less than or equal to inital balance.\");\n    }else if(backtest.indicator==='RSI' && (pairSettings.buyStrategyValue<1 || pairSettings.buyStrategyValue>99)){\n      // Ensure no trivial strategy specific settings are submitted <connect to previous if chain thing>\n      alert(\"RSI values must be between 1-99\");\n    }else if(backtest.indicator==='BBANDS' && paperAPICall.stdDeviation<0.5){\n      // Ensure no trivial BB std deviation\n      alert(\"Standard Deviation must be greater than or equal to 0.5.\");\n    }else{\n      // Calculation inputs valid, run backtest algorithm\n      console.log(pairSettings);\n      runBacktests(paperAPICall, pairSettings);\n    }\n    backtest.tradeListData = [];\n  }\n\n  let indicatorSettingDOM = null;\n  switch(backtest.indicator){\n    case 'RSI':\n      indicatorSettingDOM = (<> \n        {/* Time Period(# candles in calc) */}\n        <label>\n          Time Period:\n          <input type='number' placeholder='14' onChange={(e) => setTimePeriod(e.target.value)} />\n        </label>\n      </>);\n      break;\n    case 'EMA':\n      indicatorSettingDOM = (<> \n        {/* Time Period(# candles in calc) */}\n        <label>\n          Time Period:\n          <input type='number' placeholder='9' onChange={(e) => setTimePeriod(e.target.value)} />\n        </label>\n      </>);\n      break;\n    case 'SMA':\n      indicatorSettingDOM = (<> \n        {/* Time Period(# candles in calc) */}\n        <label>\n          Time Period:\n          <input type='number' placeholder='9' onChange={(e) => setTimePeriod(e.target.value)} />\n        </label>\n      </>);\n      break;\n    case 'BBANDS':\n      indicatorSettingDOM = (<> \n        {/* Time Period(# candles in calc) */}\n        <label>\n          Time Period:\n          <input type='number' placeholder='20' onChange={(e) => setTimePeriod(e.target.value)} />\n        </label>\n\n        {/* Standard deviation for both top/bot lines */}\n        <label>\n          Standard Deviation for upper/lower lines:\n          <input type='number' placeholder='2' onChange={(e) => setStdDeviation(e.target.value)} />\n        </label>\n      </>);\n      break;\n    default:\n      indicatorSettingDOM = (<div>indicaator setting dom default</div>);\n    \n  }\n\n  let buyStrategyDOM = null;\n  switch(backtest.indicator){\n    case 'RSI':\n      buyStrategyDOM = (<> \n        {/* Buy Strategy RSI */}\n        <label>\n          Buy when RSI less than\n          <input type='number' placeholder='30' onChange={(e) => setBuyStrategyValue(e.target.value)} />\n        </label>\n      </>);\n      break;\n    case 'EMA':\n      buyStrategyDOM = (<> \n        {/* Buy strategy % away */}\n        <label>\n          Buy at price \n          <input type='number' placeholder='-3' onChange={(e) => setBuyStrategyValue(e.target.value)} />\n          % away from the EMA line. \n          <br/>\n          (3 = 3% above, -3 = 3% below)\n        </label>\n      </>);\n      break;\n    case 'SMA':\n      buyStrategyDOM = (<> \n        {/* Buy strategy % away */}\n        <label>\n          Buy at price \n          <input type='number' placeholder='-3' onChange={(e) => setBuyStrategyValue(e.target.value)} />\n          % away from the SMA line. \n          <br/>\n          (3 = 3% above, -3 = 3% below)\n        </label>\n      </>);\n      break;\n    case 'BBANDS':\n      buyStrategyDOM = (<> \n        {/* Buy strategy % away (BB) */}\n        <label>\n          Band to follow:  \n          <select onChange={(e) => setBuyStrategyType(e.target.value)}>\n            {dropdownItems([\n              {name:'Middle', value:'Real Middle Band'},\n              {name:'Upper', value:'Real Upper Band'},\n              {name:'Lower', value:'Real Lower Band'}])}\n          </select>\n        </label>\n        <label>\n          Buy at price \n          <input type='number' placeholder='-3' onChange={(e) => setBuyStrategyValue(e.target.value)} />\n          % away from the selected line. \n          <br/>\n          (3 = 3% above, -3 = 3% below)\n        </label>\n      </>);\n      break;\n    default:\n      buyStrategyDOM = (<div>buy strat dom default</div>);\n    \n  }\n\n  return (\n    <div className='row mx-4 my-2'>\n      <div className='card w-25'>\n        {/* Beginning of Settings */}\n        <h4>{backtest.indicator} Settings</h4>\n\n        {/* series type */}\n        <label>\n          Select Series Type:\n          <select onChange={(e) => setSeriesType(e.target.value)}>\n            {dropdownItems([\n              {name:'open', value:'1. open'},\n              {name:'close', value:'4. close'},\n              {name:'high', value:'2. high'},\n              {name:'low', value:'3. low'}])}\n          </select>\n        </label>\n        \n        {indicatorSettingDOM}\n\n        <br/>\n\n        <label>Paper Bot Settings</label>\n        {/* Max number bags */}\n        <label>\n          Max number of bags:\n          <input type='number' placeholder='5' onChange={(e) => setMaxBags(e.target.value)} />\n        </label>\n\n        {/* Inital balance */}\n        <label>\n        Inital balance (USD):\n          <input type='number' min='0' placeholder='10000' onChange={(e) => setInitialBalance(e.target.value)} />\n        </label>\n\n        {/* Inital buy (type/amount) */}\n        <label>\n        Inital buy type:\n          <select onChange={(e) => setInitalBuyType(e.target.value)}>\n            {dropdownItems([\n                {name:'($) USD', value:'usd'},\n                {name:'(%) Percent of Balance', value:'percent'},\n                {name:'(#) Number of Stocks', value:'numStocks'}])}\n            </select>\n        </label>\n        <label>\n        Inital buy amount:\n          <input type='number' placeholder='1500' onChange={(e) => setInitalBuyAmount(e.target.value)} />\n        </label>\n\n        {buyStrategyDOM}\n\n        {/* Sell Strategy */}\n        <label>\n          Sell at \n          <input type='number' placeholder='1' onChange={(e) => setSellStrategyValue(e.target.value)} />\n          % profit.\n        </label>\n\n        {/* submit button */}\n        <button onClick={() => onSubmit()} className=\"btn-secondary w-25\">Calculate</button>\n\n\n        {/* close button */}\n        <button onClick={() => deleteBacktest(backtest.id)} className=\"btn-primary w-25\">x</button>\n      </div>\n      {/* end of settings, beginning of results overview */}\n\n      <div className='card w-25'>\n        Results overview\n        <label>Profit: {backtest.profit}%</label>\n        <label>Number of trades: {backtest.numTrades}</label>\n        <label>Average bars per trade: {backtest.avgBars}</label>\n        <label>Average profit per trade: {backtest.avgProfit}%</label>\n        <label>Buy and hold return: {backtest.holdReturn}%</label>\n\n      </div>\n      \n      {/* End of results overview, begin list of trades */}\n\n      <div className='card w-25'>\n        List of trades\n        <div className=\"message_wrap\">\n          <div className=\"message_box\">\n            <TradeList tradeList={[1,2,3,4,5,64,5,5,3,5,453,45,345,34,5]}/>\n          </div>\n        </div>\n      </div>\n      \n      {/* End list of trades */}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}