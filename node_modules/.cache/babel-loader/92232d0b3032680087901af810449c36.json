{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/benjaminshiao/Desktop/react/trade-analyzer/src/components/GraphSection.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport Chart from \"./chart-components/Chart\";\nimport { GlobalContext } from '../context/GlobalState';\nimport \"../chart.css\";\nexport const GraphSection = () => {\n  _s();\n\n  //grab global variables/functions to call in this file\n  const {\n    graphData_AV_API,\n    graphSymbol,\n    current_symbol\n  } = useContext(GlobalContext);\n  const chart_width = window.screen.availWidth;\n  const chart_height = window.screen.availHeight * 2 / 3; // Processes update to API call and sends data to candlestick chart.\n\n  const processGraphData = () => {\n    let time_series_type;\n\n    if (graphData_AV_API['Time Series (10min)']) {\n      time_series_type = 'Time Series (10min)';\n    } else if (graphData_AV_API['Time Series (60min)']) {\n      time_series_type = 'Time Series (60min)';\n    } else if (graphData_AV_API['Time Series (Daily)']) {\n      time_series_type = 'Time Series (Daily)';\n    } else {//we are doing the non-compact data for papertrade/1Year chart\n    }\n\n    const time_series_isDaily = time_series_type === 'Time Series (Daily)' ? true : false;\n    let split_ratio = 1.0; //these two arrays are sus\n\n    let xAxis_times = [];\n    let graphDataProcessed = [];\n    let i = 0; // Iterate/translate API call to fit my charts inputs\n\n    for (let myDate in graphData_AV_API[time_series_type]) {\n      xAxis_times.push(myDate); // Some API data open==close==high==low, resulting in candles of size 0x0, resulting in empty graph. \n      // flat_candle ensures candles are never 0x0 (invisible).\n\n      let flat_candle = +graphData_AV_API[time_series_type][myDate]['1. open'] === +graphData_AV_API[time_series_type][myDate]['4. close'] ? 0.001 : 0;\n      graphDataProcessed.push({\n        \"time\": i,\n        \"open\": +graphData_AV_API[time_series_type][myDate]['1. open'] / split_ratio,\n        \"close\": flat_candle + graphData_AV_API[time_series_type][myDate]['4. close'] / split_ratio,\n        \"high\": +graphData_AV_API[time_series_type][myDate]['2. high'] / split_ratio,\n        \"low\": +graphData_AV_API[time_series_type][myDate]['3. low'] / split_ratio,\n        \"volume\": +graphData_AV_API[time_series_type][myDate][time_series_isDaily ? '6. volume' : '5. volume']\n      });\n      if (time_series_isDaily) split_ratio *= +graphData_AV_API[time_series_type][myDate]['8. split coefficient'];\n      i++;\n    }\n\n    graphDataProcessed.reverse();\n    return graphDataProcessed;\n  }; // Only for intialization: maybe make it display SPY as default\n\n\n  const [data, setData] = useState(() => processGraphData()); // Whenever graphData_AV_API is changed, code below will update graph\n\n  useEffect(() => {\n    setData(processGraphData());\n  }, [graphData_AV_API]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: current_symbol\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      data: data,\n      width: chart_width,\n      height: chart_height\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card mb-1 center\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => graphSymbol(current_symbol, 'day'),\n        className: \"text-info bg-dark\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-warning\",\n          children: \"1D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => graphSymbol(current_symbol, 'week'),\n        className: \"text-info bg-dark\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-warning\",\n          children: \"1W\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => graphSymbol(current_symbol, 'month'),\n        className: \"text-info bg-dark\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-warning\",\n          children: \"1M\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => graphSymbol(current_symbol, 'quarter'),\n        className: \"text-info bg-dark\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-warning\",\n          children: \"3M\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => graphSymbol(current_symbol, 'year'),\n        className: \"text-info bg-dark\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-warning\",\n          children: \"1Y\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(GraphSection, \"JhzCgumQS4j8f85HVahEeYFEOGY=\");\n\n_c = GraphSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"GraphSection\");","map":{"version":3,"sources":["/Users/benjaminshiao/Desktop/react/trade-analyzer/src/components/GraphSection.js"],"names":["React","useContext","useEffect","useState","Chart","GlobalContext","GraphSection","graphData_AV_API","graphSymbol","current_symbol","chart_width","window","screen","availWidth","chart_height","availHeight","processGraphData","time_series_type","time_series_isDaily","split_ratio","xAxis_times","graphDataProcessed","i","myDate","push","flat_candle","reverse","data","setData"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AAEA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAO,cAAP;AAGA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAChC;AACA,QAAM;AAAEC,IAAAA,gBAAF;AAAoBC,IAAAA,WAApB;AAAiCC,IAAAA;AAAjC,MAAoDR,UAAU,CAACI,aAAD,CAApE;AAEA,QAAMK,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAcC,UAAlC;AACA,QAAMC,YAAY,GAAGH,MAAM,CAACC,MAAP,CAAcG,WAAd,GAA0B,CAA1B,GAA4B,CAAjD,CALgC,CAOhC;;AACA,QAAMC,gBAAgB,GAAG,MAAM;AAC7B,QAAIC,gBAAJ;;AACA,QAAGV,gBAAgB,CAAC,qBAAD,CAAnB,EAA2C;AACzCU,MAAAA,gBAAgB,GAAG,qBAAnB;AACD,KAFD,MAEM,IAAGV,gBAAgB,CAAC,qBAAD,CAAnB,EAA2C;AAC/CU,MAAAA,gBAAgB,GAAG,qBAAnB;AACD,KAFK,MAEA,IAAGV,gBAAgB,CAAC,qBAAD,CAAnB,EAA2C;AAC/CU,MAAAA,gBAAgB,GAAG,qBAAnB;AACD,KAFK,MAED,CACH;AACD;;AACD,UAAMC,mBAAmB,GAAGD,gBAAgB,KAAK,qBAArB,GAA6C,IAA7C,GAAoD,KAAhF;AACA,QAAIE,WAAW,GAAG,GAAlB,CAZ6B,CAc7B;;AACA,QAAIC,WAAW,GAAG,EAAlB;AACA,QAAIC,kBAAkB,GAAG,EAAzB;AAEA,QAAIC,CAAC,GAAG,CAAR,CAlB6B,CAmB7B;;AACA,SAAI,IAAIC,MAAR,IAAkBhB,gBAAgB,CAACU,gBAAD,CAAlC,EAAqD;AACnDG,MAAAA,WAAW,CAACI,IAAZ,CAAiBD,MAAjB,EADmD,CAGnD;AACA;;AACA,UAAIE,WAAW,GAAG,CAAClB,gBAAgB,CAACU,gBAAD,CAAhB,CAAmCM,MAAnC,EAA2C,SAA3C,CAAD,KAA0D,CAAChB,gBAAgB,CAACU,gBAAD,CAAhB,CAAmCM,MAAnC,EAA2C,UAA3C,CAA3D,GAAoH,KAApH,GAA4H,CAA9I;AAEAF,MAAAA,kBAAkB,CAACG,IAAnB,CAAwB;AACtB,gBAAQF,CADc;AAEtB,gBAAQ,CAACf,gBAAgB,CAACU,gBAAD,CAAhB,CAAmCM,MAAnC,EAA2C,SAA3C,CAAD,GAAuDJ,WAFzC;AAGtB,iBAASM,WAAW,GAAClB,gBAAgB,CAACU,gBAAD,CAAhB,CAAmCM,MAAnC,EAA2C,UAA3C,IAAuDJ,WAHtD;AAItB,gBAAQ,CAACZ,gBAAgB,CAACU,gBAAD,CAAhB,CAAmCM,MAAnC,EAA2C,SAA3C,CAAD,GAAuDJ,WAJzC;AAKtB,eAAO,CAACZ,gBAAgB,CAACU,gBAAD,CAAhB,CAAmCM,MAAnC,EAA2C,QAA3C,CAAD,GAAsDJ,WALvC;AAMtB,kBAAU,CAACZ,gBAAgB,CAACU,gBAAD,CAAhB,CAAmCM,MAAnC,EAA2CL,mBAAmB,GAAG,WAAH,GAAiB,WAA/E;AANW,OAAxB;AAQA,UAAGA,mBAAH,EAAwBC,WAAW,IAAI,CAACZ,gBAAgB,CAACU,gBAAD,CAAhB,CAAmCM,MAAnC,EAA2C,sBAA3C,CAAhB;AACxBD,MAAAA,CAAC;AACF;;AACDD,IAAAA,kBAAkB,CAACK,OAAnB;AACA,WAAOL,kBAAP;AACD,GAxCD,CARgC,CAkDhC;;;AACA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBzB,QAAQ,CAAC,MAAMa,gBAAgB,EAAvB,CAAhC,CAnDgC,CAoDhC;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACd0B,IAAAA,OAAO,CAACZ,gBAAgB,EAAjB,CAAP;AACD,GAFQ,EAEN,CAACT,gBAAD,CAFM,CAAT,CArDgC,CAuDR;;AAGxB,sBACE;AAAA,4BACE;AAAA,gBAAKE;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAEkB,IAAb;AAAmB,MAAA,KAAK,EAAEjB,WAA1B;AAAuC,MAAA,MAAM,EAAEI;AAA/C;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACE;AAAQ,QAAA,OAAO,EAAE,MAAMN,WAAW,CAACC,cAAD,EAAgB,KAAhB,CAAlC;AAA0D,QAAA,SAAS,EAAC,mBAApE;AAAA,+BACE;AAAG,UAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAQ,QAAA,OAAO,EAAE,MAAMD,WAAW,CAACC,cAAD,EAAgB,MAAhB,CAAlC;AAA2D,QAAA,SAAS,EAAC,mBAArE;AAAA,+BACE;AAAG,UAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAJF,eAOE;AAAQ,QAAA,OAAO,EAAE,MAAMD,WAAW,CAACC,cAAD,EAAgB,OAAhB,CAAlC;AAA4D,QAAA,SAAS,EAAC,mBAAtE;AAAA,+BACE;AAAG,UAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAPF,eAUE;AAAQ,QAAA,OAAO,EAAE,MAAMD,WAAW,CAACC,cAAD,EAAgB,SAAhB,CAAlC;AAA8D,QAAA,SAAS,EAAC,mBAAxE;AAAA,+BACE;AAAG,UAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAVF,eAaE;AAAQ,QAAA,OAAO,EAAE,MAAMD,WAAW,CAACC,cAAD,EAAgB,MAAhB,CAAlC;AAA2D,QAAA,SAAS,EAAC,mBAArE;AAAA,+BACE;AAAG,UAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAbF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF;AAuBD,CAjFM;;GAAMH,Y;;KAAAA,Y","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport Chart from \"./chart-components/Chart\";\n\nimport { GlobalContext } from '../context/GlobalState';\nimport \"../chart.css\";\n\n\nexport const GraphSection = () => {\n  //grab global variables/functions to call in this file\n  const { graphData_AV_API, graphSymbol, current_symbol } = useContext(GlobalContext);\n\n  const chart_width = window.screen.availWidth;\n  const chart_height = window.screen.availHeight*2/3;\n\n  // Processes update to API call and sends data to candlestick chart.\n  const processGraphData = () => {\n    let time_series_type;\n    if(graphData_AV_API['Time Series (10min)']){\n      time_series_type = 'Time Series (10min)';\n    }else if(graphData_AV_API['Time Series (60min)']){\n      time_series_type = 'Time Series (60min)';\n    }else if(graphData_AV_API['Time Series (Daily)']){\n      time_series_type = 'Time Series (Daily)';\n    }else{\n      //we are doing the non-compact data for papertrade/1Year chart\n    }\n    const time_series_isDaily = time_series_type === 'Time Series (Daily)' ? true : false;\n    let split_ratio = 1.0;\n\n    //these two arrays are sus\n    let xAxis_times = [];\n    let graphDataProcessed = [];\n\n    let i = 0\n    // Iterate/translate API call to fit my charts inputs\n    for(let myDate in graphData_AV_API[time_series_type]){\n      xAxis_times.push(myDate);\n\n      // Some API data open==close==high==low, resulting in candles of size 0x0, resulting in empty graph. \n      // flat_candle ensures candles are never 0x0 (invisible).\n      let flat_candle = +graphData_AV_API[time_series_type][myDate]['1. open']=== +graphData_AV_API[time_series_type][myDate]['4. close'] ? 0.001 : 0;\n      \n      graphDataProcessed.push({\n        \"time\": i,\n        \"open\": +graphData_AV_API[time_series_type][myDate]['1. open']/split_ratio,\n        \"close\": flat_candle+graphData_AV_API[time_series_type][myDate]['4. close']/split_ratio,\n        \"high\": +graphData_AV_API[time_series_type][myDate]['2. high']/split_ratio,\n        \"low\": +graphData_AV_API[time_series_type][myDate]['3. low']/split_ratio,\n        \"volume\": +graphData_AV_API[time_series_type][myDate][time_series_isDaily ? '6. volume' : '5. volume']\n      });\n      if(time_series_isDaily) split_ratio *= +graphData_AV_API[time_series_type][myDate]['8. split coefficient'];\n      i++;\n    }\n    graphDataProcessed.reverse();\n    return graphDataProcessed;\n  };\n\n  // Only for intialization: maybe make it display SPY as default\n  const [data, setData] = useState(() => processGraphData());\n  // Whenever graphData_AV_API is changed, code below will update graph\n  useEffect(() => {\n    setData(processGraphData());\n  }, [graphData_AV_API]); // eslint-disable-line react-hooks/exhaustive-deps\n\n\n  return (\n    <>\n      <h1>{current_symbol}</h1>\n      <Chart data={data} width={chart_width} height={chart_height} />\n      <div className='card mb-1 center'>\n        <button onClick={() => graphSymbol(current_symbol,'day')} className=\"text-info bg-dark\">\n          <p className='text-warning'>1D</p>\n        </button>\n        <button onClick={() => graphSymbol(current_symbol,'week')} className=\"text-info bg-dark\">\n          <p className='text-warning'>1W</p>\n        </button>\n        <button onClick={() => graphSymbol(current_symbol,'month')} className=\"text-info bg-dark\">\n          <p className='text-warning'>1M</p>\n        </button>\n        <button onClick={() => graphSymbol(current_symbol,'quarter')} className=\"text-info bg-dark\">\n          <p className='text-warning'>3M</p>\n        </button>\n        <button onClick={() => graphSymbol(current_symbol,'year')} className=\"text-info bg-dark\">\n          <p className='text-warning'>1Y</p>\n        </button>\n    </div>\n    </>\n  )\n}\n\n\n"]},"metadata":{},"sourceType":"module"}